
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027b0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  080028bc  080028bc  000128bc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002930  08002930  00012930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002934  08002934  00012934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000f8  20000000  08002938  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000884  200000f8  08002a30  000200f8  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000097c  08002a30  0002097c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000b5e5  00000000  00000000  00020121  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000026d3  00000000  00000000  0002b706  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000045d5  00000000  00000000  0002ddd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000818  00000000  00000000  000323b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000009c0  00000000  00000000  00032bc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000044b0  00000000  00000000  00033588  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000261b  00000000  00000000  00037a38  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  0003a053  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000012f4  00000000  00000000  0003a0d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000f8 	.word	0x200000f8
 8000128:	00000000 	.word	0x00000000
 800012c:	080028a4 	.word	0x080028a4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000fc 	.word	0x200000fc
 8000148:	080028a4 	.word	0x080028a4

0800014c <USBD_FS_DeviceDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_DeviceDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 800014c:	2312      	movs	r3, #18
 800014e:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8000150:	4800      	ldr	r0, [pc, #0]	; (8000154 <USBD_FS_DeviceDescriptor+0x8>)
 8000152:	4770      	bx	lr
 8000154:	20000020 	.word	0x20000020

08000158 <USBD_FS_LangIDStrDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_LangIDStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
  *length =  sizeof(USBD_LangIDDesc);  
 8000158:	2304      	movs	r3, #4
 800015a:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 800015c:	4800      	ldr	r0, [pc, #0]	; (8000160 <USBD_FS_LangIDStrDescriptor+0x8>)
 800015e:	4770      	bx	lr
 8000160:	2000001c 	.word	0x2000001c

08000164 <USBD_FS_ManufacturerStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ManufacturerStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8000164:	b510      	push	{r4, lr}
  USBD_GetString (USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8000166:	4c04      	ldr	r4, [pc, #16]	; (8000178 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8000168:	460a      	mov	r2, r1
 800016a:	4804      	ldr	r0, [pc, #16]	; (800017c <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800016c:	4621      	mov	r1, r4
 800016e:	f000 fc12 	bl	8000996 <USBD_GetString>
  return USBD_StrDesc;
}
 8000172:	4620      	mov	r0, r4
 8000174:	bd10      	pop	{r4, pc}
 8000176:	bf00      	nop
 8000178:	20000130 	.word	0x20000130
 800017c:	080028ce 	.word	0x080028ce

08000180 <USBD_FS_ProductStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ProductStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8000180:	b510      	push	{r4, lr}
  if(speed == 0)
  {   
    USBD_GetString (USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8000182:	4c04      	ldr	r4, [pc, #16]	; (8000194 <USBD_FS_ProductStrDescriptor+0x14>)
 8000184:	460a      	mov	r2, r1
 8000186:	4804      	ldr	r0, [pc, #16]	; (8000198 <USBD_FS_ProductStrDescriptor+0x18>)
 8000188:	4621      	mov	r1, r4
 800018a:	f000 fc04 	bl	8000996 <USBD_GetString>
  else
  {
    USBD_GetString (USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);    
  }
  return USBD_StrDesc;
}
 800018e:	4620      	mov	r0, r4
 8000190:	bd10      	pop	{r4, pc}
 8000192:	bf00      	nop
 8000194:	20000130 	.word	0x20000130
 8000198:	080028e1 	.word	0x080028e1

0800019c <USBD_FS_SerialStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_SerialStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 800019c:	b510      	push	{r4, lr}
  if(speed  == USBD_SPEED_HIGH)
  {    
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 800019e:	4c04      	ldr	r4, [pc, #16]	; (80001b0 <USBD_FS_SerialStrDescriptor+0x14>)
 80001a0:	460a      	mov	r2, r1
 80001a2:	4804      	ldr	r0, [pc, #16]	; (80001b4 <USBD_FS_SerialStrDescriptor+0x18>)
 80001a4:	4621      	mov	r1, r4
 80001a6:	f000 fbf6 	bl	8000996 <USBD_GetString>
  else
  {
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);    
  }
  return USBD_StrDesc;
}
 80001aa:	4620      	mov	r0, r4
 80001ac:	bd10      	pop	{r4, pc}
 80001ae:	bf00      	nop
 80001b0:	20000130 	.word	0x20000130
 80001b4:	080028f7 	.word	0x080028f7

080001b8 <USBD_FS_ConfigStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ConfigStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 80001b8:	b510      	push	{r4, lr}
  if(speed  == USBD_SPEED_HIGH)
  {  
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80001ba:	4c04      	ldr	r4, [pc, #16]	; (80001cc <USBD_FS_ConfigStrDescriptor+0x14>)
 80001bc:	460a      	mov	r2, r1
 80001be:	4804      	ldr	r0, [pc, #16]	; (80001d0 <USBD_FS_ConfigStrDescriptor+0x18>)
 80001c0:	4621      	mov	r1, r4
 80001c2:	f000 fbe8 	bl	8000996 <USBD_GetString>
  else
  {
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length); 
  }
  return USBD_StrDesc;  
}
 80001c6:	4620      	mov	r0, r4
 80001c8:	bd10      	pop	{r4, pc}
 80001ca:	bf00      	nop
 80001cc:	20000130 	.word	0x20000130
 80001d0:	08002904 	.word	0x08002904

080001d4 <USBD_FS_InterfaceStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_InterfaceStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 80001d4:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80001d6:	4c04      	ldr	r4, [pc, #16]	; (80001e8 <USBD_FS_InterfaceStrDescriptor+0x14>)
 80001d8:	460a      	mov	r2, r1
 80001da:	4804      	ldr	r0, [pc, #16]	; (80001ec <USBD_FS_InterfaceStrDescriptor+0x18>)
 80001dc:	4621      	mov	r1, r4
 80001de:	f000 fbda 	bl	8000996 <USBD_GetString>
  else
  {
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;  
}
 80001e2:	4620      	mov	r0, r4
 80001e4:	bd10      	pop	{r4, pc}
 80001e6:	bf00      	nop
 80001e8:	20000130 	.word	0x20000130
 80001ec:	0800290f 	.word	0x0800290f

080001f0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80001f0:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 80001f2:	4b0d      	ldr	r3, [pc, #52]	; (8000228 <HAL_PCD_MspInit+0x38>)
 80001f4:	6802      	ldr	r2, [r0, #0]
 80001f6:	429a      	cmp	r2, r3
 80001f8:	d112      	bne.n	8000220 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80001fa:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80001fe:	69da      	ldr	r2, [r3, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000200:	2014      	movs	r0, #20
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000202:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000206:	61da      	str	r2, [r3, #28]
 8000208:	69db      	ldr	r3, [r3, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800020a:	2200      	movs	r2, #0
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800020c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000210:	9301      	str	r3, [sp, #4]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000212:	4611      	mov	r1, r2
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000214:	9b01      	ldr	r3, [sp, #4]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000216:	f002 fa2b 	bl	8002670 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800021a:	2014      	movs	r0, #20
 800021c:	f002 fa5c 	bl	80026d8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8000220:	b003      	add	sp, #12
 8000222:	f85d fb04 	ldr.w	pc, [sp], #4
 8000226:	bf00      	nop
 8000228:	40005c00 	.word	0x40005c00

0800022c <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800022c:	f500 717b 	add.w	r1, r0, #1004	; 0x3ec
 8000230:	f8d0 041c 	ldr.w	r0, [r0, #1052]	; 0x41c
 8000234:	f000 bbfe 	b.w	8000a34 <USBD_LL_SetupStage>

08000238 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8000238:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 800023c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000240:	f8d0 041c 	ldr.w	r0, [r0, #1052]	; 0x41c
 8000244:	f000 bc23 	b.w	8000a8e <USBD_LL_DataOutStage>

08000248 <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8000248:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 800024c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800024e:	f8d0 041c 	ldr.w	r0, [r0, #1052]	; 0x41c
 8000252:	f000 bc4d 	b.w	8000af0 <USBD_LL_DataInStage>

08000256 <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8000256:	f8d0 041c 	ldr.w	r0, [r0, #1052]	; 0x41c
 800025a:	f000 bcc8 	b.w	8000bee <USBD_LL_SOF>

0800025e <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 800025e:	b510      	push	{r4, lr}
 8000260:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;    
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);  
 8000262:	2101      	movs	r1, #1
 8000264:	f8d0 041c 	ldr.w	r0, [r0, #1052]	; 0x41c
 8000268:	f000 fcaf 	bl	8000bca <USBD_LL_SetSpeed>
  
  /*Reset Device*/
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800026c:	f8d4 041c 	ldr.w	r0, [r4, #1052]	; 0x41c
}
 8000270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);  
  
  /*Reset Device*/
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8000274:	f000 bc8a 	b.w	8000b8c <USBD_LL_Reset>

08000278 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8000278:	b510      	push	{r4, lr}
 800027a:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800027c:	f8d0 041c 	ldr.w	r0, [r0, #1052]	; 0x41c
 8000280:	f000 fca6 	bl	8000bd0 <USBD_LL_Suspend>
  /*Enter in STOP mode */
  /* USER CODE BEGIN 2 */  
  if (hpcd->Init.low_power_enable)
 8000284:	69a3      	ldr	r3, [r4, #24]
 8000286:	b123      	cbz	r3, 8000292 <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8000288:	4a02      	ldr	r2, [pc, #8]	; (8000294 <HAL_PCD_SuspendCallback+0x1c>)
 800028a:	6913      	ldr	r3, [r2, #16]
 800028c:	f043 0306 	orr.w	r3, r3, #6
 8000290:	6113      	str	r3, [r2, #16]
 8000292:	bd10      	pop	{r4, pc}
 8000294:	e000ed00 	.word	0xe000ed00

08000298 <HAL_PCD_ResumeCallback>:
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8000298:	f8d0 041c 	ldr.w	r0, [r0, #1052]	; 0x41c
 800029c:	f000 bca1 	b.w	8000be2 <USBD_LL_Resume>

080002a0 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Init (USBD_HandleTypeDef *pdev)
{ 
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4604      	mov	r4, r0
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_8;
 80002a4:	4916      	ldr	r1, [pc, #88]	; (8000300 <USBD_LL_Init+0x60>)
  */
USBD_StatusTypeDef  USBD_LL_Init (USBD_HandleTypeDef *pdev)
{ 
  /* Init USB_IP */
  /* Link The driver to the stack */
  hpcd_USB_FS.pData = pdev;
 80002a6:	4817      	ldr	r0, [pc, #92]	; (8000304 <USBD_LL_Init+0x64>)
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_8;
 80002a8:	2302      	movs	r3, #2
 80002aa:	2208      	movs	r2, #8
 80002ac:	f04f 0e03 	mov.w	lr, #3
  */
USBD_StatusTypeDef  USBD_LL_Init (USBD_HandleTypeDef *pdev)
{ 
  /* Init USB_IP */
  /* Link The driver to the stack */
  hpcd_USB_FS.pData = pdev;
 80002b0:	f8c0 441c 	str.w	r4, [r0, #1052]	; 0x41c
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_8;
 80002b4:	e880 400e 	stmia.w	r0, {r1, r2, r3, lr}
USBD_StatusTypeDef  USBD_LL_Init (USBD_HandleTypeDef *pdev)
{ 
  /* Init USB_IP */
  /* Link The driver to the stack */
  hpcd_USB_FS.pData = pdev;
  pdev->pData = &hpcd_USB_FS;
 80002b8:	f8c4 0220 	str.w	r0, [r4, #544]	; 0x220

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_8;
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80002bc:	2300      	movs	r3, #0
 80002be:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80002c0:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80002c2:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80002c4:	f001 fd10 	bl	8001ce8 <HAL_PCD_Init>
 80002c8:	b108      	cbz	r0, 80002ce <USBD_LL_Init+0x2e>
  {
    Error_Handler();
 80002ca:	f000 f98b 	bl	80005e4 <Error_Handler>
  }

  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80002ce:	2200      	movs	r2, #0
 80002d0:	4611      	mov	r1, r2
 80002d2:	2318      	movs	r3, #24
 80002d4:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 80002d8:	f001 fcee 	bl	8001cb8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80002dc:	2358      	movs	r3, #88	; 0x58
 80002de:	2200      	movs	r2, #0
 80002e0:	2180      	movs	r1, #128	; 0x80
 80002e2:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 80002e6:	f001 fce7 	bl	8001cb8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);  
 80002ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002ee:	2200      	movs	r2, #0
 80002f0:	2181      	movs	r1, #129	; 0x81
 80002f2:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 80002f6:	f001 fcdf 	bl	8001cb8 <HAL_PCDEx_PMAConfig>
  return USBD_OK;
}
 80002fa:	2000      	movs	r0, #0
 80002fc:	bd10      	pop	{r4, pc}
 80002fe:	bf00      	nop
 8000300:	40005c00 	.word	0x40005c00
 8000304:	20000330 	.word	0x20000330

08000308 <USBD_LL_Start>:
  * @brief  Starts the Low Level portion of the Device driver. 
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8000308:	b508      	push	{r3, lr}
  HAL_PCD_Start((PCD_HandleTypeDef*)pdev->pData);
 800030a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800030e:	f001 fd55 	bl	8001dbc <HAL_PCD_Start>
  return USBD_OK;
}
 8000312:	2000      	movs	r0, #0
 8000314:	bd08      	pop	{r3, pc}

08000316 <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef  USBD_LL_OpenEP  (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  ep_type,
                                      uint16_t ep_mps)
{
 8000316:	b510      	push	{r4, lr}
 8000318:	461c      	mov	r4, r3
  HAL_PCD_EP_Open((PCD_HandleTypeDef*) pdev->pData,
 800031a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800031e:	4613      	mov	r3, r2
 8000320:	4622      	mov	r2, r4
 8000322:	f001 fd76 	bl	8001e12 <HAL_PCD_EP_Open>
                  ep_addr,
                  ep_mps,
                  ep_type);
  
  return USBD_OK; 
}
 8000326:	2000      	movs	r0, #0
 8000328:	bd10      	pop	{r4, pc}

0800032a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_CloseEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 800032a:	b508      	push	{r3, lr}
  HAL_PCD_EP_Close((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800032c:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8000330:	f001 fd92 	bl	8001e58 <HAL_PCD_EP_Close>
  return USBD_OK;
}
 8000334:	2000      	movs	r0, #0
 8000336:	bd08      	pop	{r3, pc}

08000338 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_StallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8000338:	b508      	push	{r3, lr}
  HAL_PCD_EP_SetStall((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800033a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800033e:	f002 f858 	bl	80023f2 <HAL_PCD_EP_SetStall>
  return USBD_OK;
}
 8000342:	2000      	movs	r0, #0
 8000344:	bd08      	pop	{r3, pc}

08000346 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_ClearStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8000346:	b508      	push	{r3, lr}
  HAL_PCD_EP_ClrStall((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8000348:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800034c:	f002 f87a 	bl	8002444 <HAL_PCD_EP_ClrStall>
  return USBD_OK; 
}
 8000350:	2000      	movs	r0, #0
 8000352:	bd08      	pop	{r3, pc}

08000354 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8000354:	060a      	lsls	r2, r1, #24
  * @param  ep_addr: Endpoint Number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8000356:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
  
  if((ep_addr & 0x80) == 0x80)
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800035a:	bf45      	ittet	mi
 800035c:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
 8000360:	eb03 1341 	addmi.w	r3, r3, r1, lsl #5
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8000364:	eb03 1341 	addpl.w	r3, r3, r1, lsl #5
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8000368:	f893 002a 	ldrbmi.w	r0, [r3, #42]	; 0x2a
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800036c:	bf58      	it	pl
 800036e:	f893 020a 	ldrbpl.w	r0, [r3, #522]	; 0x20a
  }
}
 8000372:	4770      	bx	lr

08000374 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_SetUSBAddress (USBD_HandleTypeDef *pdev, uint8_t dev_addr)   
{
 8000374:	b508      	push	{r3, lr}
  HAL_PCD_SetAddress((PCD_HandleTypeDef*) pdev->pData, dev_addr);
 8000376:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800037a:	f001 fd36 	bl	8001dea <HAL_PCD_SetAddress>
  return USBD_OK; 
}
 800037e:	2000      	movs	r0, #0
 8000380:	bd08      	pop	{r3, pc}

08000382 <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef  USBD_LL_Transmit (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  *pbuf,
                                      uint16_t  size)
{
 8000382:	b508      	push	{r3, lr}
  HAL_PCD_EP_Transmit((PCD_HandleTypeDef*) pdev->pData, ep_addr, pbuf, size);
 8000384:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8000388:	f001 fdab 	bl	8001ee2 <HAL_PCD_EP_Transmit>
  return USBD_OK;
}
 800038c:	2000      	movs	r0, #0
 800038e:	bd08      	pop	{r3, pc}

08000390 <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef  USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                           uint8_t  ep_addr,                                      
                                           uint8_t  *pbuf,
                                           uint16_t  size)
{
 8000390:	b508      	push	{r3, lr}
  HAL_PCD_EP_Receive((PCD_HandleTypeDef*) pdev->pData, ep_addr, pbuf, size);
 8000392:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8000396:	f001 fd80 	bl	8001e9a <HAL_PCD_EP_Receive>
  return USBD_OK;
}
 800039a:	2000      	movs	r0, #0
 800039c:	bd08      	pop	{r3, pc}
	...

080003a0 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 80003a0:	4800      	ldr	r0, [pc, #0]	; (80003a4 <USBD_static_malloc+0x4>)
 80003a2:	4770      	bx	lr
 80003a4:	20000114 	.word	0x20000114

080003a8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  *p pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80003a8:	4770      	bx	lr

080003aa <HAL_PCDEx_SetConnectionState>:
* @param hpcd: PCD handle
* @param state: connection state (0 : disconnected / 1: connected) 
* @retval None
*/
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
{
 80003aa:	4770      	bx	lr

080003ac <MX_USB_DEVICE_Init>:
/* USB Device Core handle declaration */
USBD_HandleTypeDef hUsbDeviceFS;

/* init function */				        
void MX_USB_DEVICE_Init(void)
{
 80003ac:	b510      	push	{r4, lr}
  /* Init Device Library,Add Supported Class and Start the library*/
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 80003ae:	4c07      	ldr	r4, [pc, #28]	; (80003cc <MX_USB_DEVICE_Init+0x20>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	4907      	ldr	r1, [pc, #28]	; (80003d0 <MX_USB_DEVICE_Init+0x24>)
 80003b4:	4620      	mov	r0, r4
 80003b6:	f000 fb0a 	bl	80009ce <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID);
 80003ba:	4620      	mov	r0, r4
 80003bc:	4905      	ldr	r1, [pc, #20]	; (80003d4 <MX_USB_DEVICE_Init+0x28>)
 80003be:	f000 fb1b 	bl	80009f8 <USBD_RegisterClass>

  USBD_Start(&hUsbDeviceFS);
 80003c2:	4620      	mov	r0, r4

}
 80003c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  /* Init Device Library,Add Supported Class and Start the library*/
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID);

  USBD_Start(&hUsbDeviceFS);
 80003c8:	f000 bb1d 	b.w	8000a06 <USBD_Start>
 80003cc:	20000750 	.word	0x20000750
 80003d0:	20000000 	.word	0x20000000
 80003d4:	20000034 	.word	0x20000034

080003d8 <NMI_Handler>:
 80003d8:	4770      	bx	lr

080003da <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80003da:	e7fe      	b.n	80003da <HardFault_Handler>

080003dc <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80003dc:	e7fe      	b.n	80003dc <MemManage_Handler>

080003de <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80003de:	e7fe      	b.n	80003de <BusFault_Handler>

080003e0 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80003e0:	e7fe      	b.n	80003e0 <UsageFault_Handler>

080003e2 <SVC_Handler>:
 80003e2:	4770      	bx	lr

080003e4 <DebugMon_Handler>:
 80003e4:	4770      	bx	lr

080003e6 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80003e6:	4770      	bx	lr

080003e8 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80003e8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003ea:	f002 f9cd 	bl	8002788 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  HAL_SYSTICK_IRQHandler();
 80003f2:	f002 b9a0 	b.w	8002736 <HAL_SYSTICK_IRQHandler>
	...

080003f8 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80003f8:	4801      	ldr	r0, [pc, #4]	; (8000400 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 80003fa:	f001 bd92 	b.w	8001f22 <HAL_PCD_IRQHandler>
 80003fe:	bf00      	nop
 8000400:	20000330 	.word	0x20000330

08000404 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000404:	4b20      	ldr	r3, [pc, #128]	; (8000488 <HAL_MspInit+0x84>)

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000406:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000408:	699a      	ldr	r2, [r3, #24]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800040a:	2003      	movs	r0, #3
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800040c:	f042 0201 	orr.w	r2, r2, #1
 8000410:	619a      	str	r2, [r3, #24]
 8000412:	699b      	ldr	r3, [r3, #24]
 8000414:	f003 0301 	and.w	r3, r3, #1
 8000418:	9301      	str	r3, [sp, #4]
 800041a:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800041c:	f002 f916 	bl	800264c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000420:	2200      	movs	r2, #0
 8000422:	4611      	mov	r1, r2
 8000424:	f06f 000b 	mvn.w	r0, #11
 8000428:	f002 f922 	bl	8002670 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800042c:	2200      	movs	r2, #0
 800042e:	4611      	mov	r1, r2
 8000430:	f06f 000a 	mvn.w	r0, #10
 8000434:	f002 f91c 	bl	8002670 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000438:	2200      	movs	r2, #0
 800043a:	4611      	mov	r1, r2
 800043c:	f06f 0009 	mvn.w	r0, #9
 8000440:	f002 f916 	bl	8002670 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8000444:	2200      	movs	r2, #0
 8000446:	4611      	mov	r1, r2
 8000448:	f06f 0004 	mvn.w	r0, #4
 800044c:	f002 f910 	bl	8002670 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8000450:	2200      	movs	r2, #0
 8000452:	4611      	mov	r1, r2
 8000454:	f06f 0003 	mvn.w	r0, #3
 8000458:	f002 f90a 	bl	8002670 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800045c:	2200      	movs	r2, #0
 800045e:	4611      	mov	r1, r2
 8000460:	f06f 0001 	mvn.w	r0, #1
 8000464:	f002 f904 	bl	8002670 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000468:	2200      	movs	r2, #0
 800046a:	4611      	mov	r1, r2
 800046c:	f04f 30ff 	mov.w	r0, #4294967295
 8000470:	f002 f8fe 	bl	8002670 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000474:	4a05      	ldr	r2, [pc, #20]	; (800048c <HAL_MspInit+0x88>)
 8000476:	6853      	ldr	r3, [r2, #4]
 8000478:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800047c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000480:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000482:	b003      	add	sp, #12
 8000484:	f85d fb04 	ldr.w	pc, [sp], #4
 8000488:	40021000 	.word	0x40021000
 800048c:	40010000 	.word	0x40010000

08000490 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8000490:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000492:	f44f 3380 	mov.w	r3, #65536	; 0x10000
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8000496:	b095      	sub	sp, #84	; 0x54

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000498:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800049a:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800049c:	2200      	movs	r2, #0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800049e:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004a0:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004a2:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80004a4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004a8:	940a      	str	r4, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80004aa:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004ac:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80004ae:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004b0:	f001 f8a2 	bl	80015f8 <HAL_RCC_OscConfig>
 80004b4:	b100      	cbz	r0, 80004b8 <SystemClock_Config+0x28>
 80004b6:	e7fe      	b.n	80004b6 <SystemClock_Config+0x26>
  {
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004b8:	230f      	movs	r3, #15
 80004ba:	9305      	str	r3, [sp, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004bc:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004be:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004c2:	4621      	mov	r1, r4
 80004c4:	a805      	add	r0, sp, #20
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004c6:	9506      	str	r5, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004c8:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80004ca:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004cc:	f001 fb3c 	bl	8001b48 <HAL_RCC_ClockConfig>
 80004d0:	b100      	cbz	r0, 80004d4 <SystemClock_Config+0x44>
 80004d2:	e7fe      	b.n	80004d2 <SystemClock_Config+0x42>
  {
    Error_Handler();
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80004d4:	2310      	movs	r3, #16
 80004d6:	9301      	str	r3, [sp, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004d8:	a801      	add	r0, sp, #4
  {
    Error_Handler();
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80004da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80004de:	9304      	str	r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004e0:	f001 f800 	bl	80014e4 <HAL_RCCEx_PeriphCLKConfig>
 80004e4:	4604      	mov	r4, r0
 80004e6:	b100      	cbz	r0, 80004ea <SystemClock_Config+0x5a>
 80004e8:	e7fe      	b.n	80004e8 <SystemClock_Config+0x58>
  {
    Error_Handler();
  }

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80004ea:	f001 fbdf 	bl	8001cac <HAL_RCC_GetHCLKFreq>
 80004ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004f2:	fbb0 f0f3 	udiv	r0, r0, r3
 80004f6:	f002 f8fb 	bl	80026f0 <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80004fa:	2004      	movs	r0, #4
 80004fc:	f002 f90e 	bl	800271c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000500:	4622      	mov	r2, r4
 8000502:	4621      	mov	r1, r4
 8000504:	f04f 30ff 	mov.w	r0, #4294967295
 8000508:	f002 f8b2 	bl	8002670 <HAL_NVIC_SetPriority>
}
 800050c:	b015      	add	sp, #84	; 0x54
 800050e:	bd30      	pop	{r4, r5, pc}

08000510 <main>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 8000510:	b500      	push	{lr}
 8000512:	b089      	sub	sp, #36	; 0x24
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000514:	f002 f926 	bl	8002764 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000518:	f7ff ffba 	bl	8000490 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800051c:	4b2c      	ldr	r3, [pc, #176]	; (80005d0 <main+0xc0>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800051e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000522:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000524:	482b      	ldr	r0, [pc, #172]	; (80005d4 <main+0xc4>)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000526:	f042 0210 	orr.w	r2, r2, #16
 800052a:	619a      	str	r2, [r3, #24]
 800052c:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800052e:	2400      	movs	r4, #0
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000530:	f002 0210 	and.w	r2, r2, #16
 8000534:	9200      	str	r2, [sp, #0]
 8000536:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000538:	699a      	ldr	r2, [r3, #24]
 800053a:	f042 0220 	orr.w	r2, r2, #32
 800053e:	619a      	str	r2, [r3, #24]
 8000540:	699a      	ldr	r2, [r3, #24]
 8000542:	f002 0220 	and.w	r2, r2, #32
 8000546:	9201      	str	r2, [sp, #4]
 8000548:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800054a:	699a      	ldr	r2, [r3, #24]
 800054c:	f042 0208 	orr.w	r2, r2, #8
 8000550:	619a      	str	r2, [r3, #24]
 8000552:	699a      	ldr	r2, [r3, #24]
 8000554:	f002 0208 	and.w	r2, r2, #8
 8000558:	9202      	str	r2, [sp, #8]
 800055a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800055c:	699a      	ldr	r2, [r3, #24]
 800055e:	f042 0204 	orr.w	r2, r2, #4
 8000562:	619a      	str	r2, [r3, #24]
 8000564:	699b      	ldr	r3, [r3, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000566:	2200      	movs	r2, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000568:	f003 0304 	and.w	r3, r3, #4
 800056c:	9303      	str	r3, [sp, #12]
 800056e:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000570:	f002 f864 	bl	800263c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000574:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000578:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800057a:	2301      	movs	r3, #1
 800057c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800057e:	a904      	add	r1, sp, #16
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000580:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000582:	4814      	ldr	r0, [pc, #80]	; (80005d4 <main+0xc4>)
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000584:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000586:	f001 ff81 	bl	800248c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 800058a:	f640 4307 	movw	r3, #3079	; 0xc07
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800058e:	a904      	add	r1, sp, #16
 8000590:	4811      	ldr	r0, [pc, #68]	; (80005d8 <main+0xc8>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 8000592:	9304      	str	r3, [sp, #16]
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000594:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000596:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000598:	f001 ff78 	bl	800248c <HAL_GPIO_Init>
  /* Configure the system clock */
  SystemClock_Config();

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USB_DEVICE_Init();
 800059c:	f7ff ff06 	bl	80003ac <MX_USB_DEVICE_Init>

  /* USER CODE BEGIN 2 */
  buffer[0]=0x00;
 80005a0:	4b0e      	ldr	r3, [pc, #56]	; (80005dc <main+0xcc>)
  buffer[1]=0x00;
  buffer[2]=0x04;
 80005a2:	2204      	movs	r2, #4
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USB_DEVICE_Init();

  /* USER CODE BEGIN 2 */
  buffer[0]=0x00;
 80005a4:	701c      	strb	r4, [r3, #0]
  buffer[1]=0x00;
 80005a6:	705c      	strb	r4, [r3, #1]
  buffer[2]=0x04;
 80005a8:	709a      	strb	r2, [r3, #2]
  buffer[3]=0x00;
 80005aa:	70dc      	strb	r4, [r3, #3]
  buffer[4]=0x00;
 80005ac:	711c      	strb	r4, [r3, #4]
  buffer[5]=0x00;
 80005ae:	715c      	strb	r4, [r3, #5]
  buffer[6]=0x00;
 80005b0:	719c      	strb	r4, [r3, #6]
  buffer[7]=0x00;
 80005b2:	71dc      	strb	r4, [r3, #7]
  /* USER CODE BEGIN WHILE */
	while (1) {
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80005b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005b8:	4806      	ldr	r0, [pc, #24]	; (80005d4 <main+0xc4>)
 80005ba:	f002 f843 	bl	8002644 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 80005be:	2064      	movs	r0, #100	; 0x64
 80005c0:	f002 f8f0 	bl	80027a4 <HAL_Delay>
		USBD_HID_SendReport(&hUsbDeviceFS,buffer,8);
 80005c4:	2208      	movs	r2, #8
 80005c6:	4905      	ldr	r1, [pc, #20]	; (80005dc <main+0xcc>)
 80005c8:	4805      	ldr	r0, [pc, #20]	; (80005e0 <main+0xd0>)
 80005ca:	f000 fba9 	bl	8000d20 <USBD_HID_SendReport>
 80005ce:	e7f1      	b.n	80005b4 <main+0xa4>
 80005d0:	40021000 	.word	0x40021000
 80005d4:	40011000 	.word	0x40011000
 80005d8:	40010c00 	.word	0x40010c00
 80005dc:	20000974 	.word	0x20000974
 80005e0:	20000750 	.word	0x20000750

080005e4 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 80005e4:	e7fe      	b.n	80005e4 <Error_Handler>

080005e6 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 80005e6:	4613      	mov	r3, r2
 80005e8:	b510      	push	{r4, lr}
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 80005ea:	2202      	movs	r2, #2
 80005ec:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 80005f0:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 80005f2:	460a      	mov	r2, r1
                               uint16_t len)
{
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 80005f4:	61c3      	str	r3, [r0, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 80005f6:	2100      	movs	r1, #0
 80005f8:	f7ff fec3 	bl	8000382 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 80005fc:	2000      	movs	r0, #0
 80005fe:	bd10      	pop	{r4, pc}

08000600 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8000600:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8000602:	4613      	mov	r3, r2
 8000604:	460a      	mov	r2, r1
 8000606:	2100      	movs	r1, #0
 8000608:	f7ff febb 	bl	8000382 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 800060c:	2000      	movs	r0, #0
 800060e:	bd08      	pop	{r3, pc}

08000610 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8000610:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 8000612:	4613      	mov	r3, r2
 8000614:	460a      	mov	r2, r1
 8000616:	2100      	movs	r1, #0
 8000618:	f7ff feba 	bl	8000390 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 800061c:	2000      	movs	r0, #0
 800061e:	bd08      	pop	{r3, pc}

08000620 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8000620:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8000622:	2304      	movs	r3, #4
 8000624:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8000628:	2300      	movs	r3, #0
 800062a:	461a      	mov	r2, r3
 800062c:	4619      	mov	r1, r3
 800062e:	f7ff fea8 	bl	8000382 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8000632:	2000      	movs	r0, #0
 8000634:	bd08      	pop	{r3, pc}

08000636 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8000636:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8000638:	2305      	movs	r3, #5
 800063a:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 800063e:	2300      	movs	r3, #0
 8000640:	461a      	mov	r2, r3
 8000642:	4619      	mov	r1, r3
 8000644:	f7ff fea4 	bl	8000390 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 8000648:	2000      	movs	r0, #0
 800064a:	bd08      	pop	{r3, pc}

0800064c <USBD_ParseSetupRequest>:
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
  req->bmRequest     = *(uint8_t *)  (pdata);
 800064c:	780b      	ldrb	r3, [r1, #0]
 800064e:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8000650:	784b      	ldrb	r3, [r1, #1]
 8000652:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8000654:	78ca      	ldrb	r2, [r1, #3]
 8000656:	788b      	ldrb	r3, [r1, #2]
 8000658:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800065c:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800065e:	794a      	ldrb	r2, [r1, #5]
 8000660:	790b      	ldrb	r3, [r1, #4]
 8000662:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8000666:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8000668:	79ca      	ldrb	r2, [r1, #7]
 800066a:	798b      	ldrb	r3, [r1, #6]
 800066c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8000670:	80c3      	strh	r3, [r0, #6]
 8000672:	4770      	bx	lr

08000674 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8000674:	b510      	push	{r4, lr}
 8000676:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 8000678:	2180      	movs	r1, #128	; 0x80
 800067a:	f7ff fe5d 	bl	8000338 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 800067e:	4620      	mov	r0, r4
}
 8000680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
  USBD_LL_StallEP(pdev , 0);
 8000684:	2100      	movs	r1, #0
 8000686:	f7ff be57 	b.w	8000338 <USBD_LL_StallEP>
	...

0800068c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800068c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  USBD_StatusTypeDef ret = USBD_OK;  
  
  switch (req->bRequest) 
 800068e:	784b      	ldrb	r3, [r1, #1]
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8000690:	4604      	mov	r4, r0
 8000692:	460d      	mov	r5, r1
  USBD_StatusTypeDef ret = USBD_OK;  
  
  switch (req->bRequest) 
 8000694:	2b09      	cmp	r3, #9
 8000696:	f200 80f9 	bhi.w	800088c <USBD_StdDevReq+0x200>
 800069a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800069e:	00cb      	.short	0x00cb
 80006a0:	00f700e2 	.word	0x00f700e2
 80006a4:	00f700de 	.word	0x00f700de
 80006a8:	000a0075 	.word	0x000a0075
 80006ac:	00bb00f7 	.word	0x00bb00f7
 80006b0:	0091      	.short	0x0091
{
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 80006b2:	884b      	ldrh	r3, [r1, #2]
 80006b4:	0a1a      	lsrs	r2, r3, #8
 80006b6:	3a01      	subs	r2, #1
 80006b8:	2a06      	cmp	r2, #6
 80006ba:	f200 80e7 	bhi.w	800088c <USBD_StdDevReq+0x200>
 80006be:	e8df f012 	tbh	[pc, r2, lsl #1]
 80006c2:	0007      	.short	0x0007
 80006c4:	0017000b 	.word	0x0017000b
 80006c8:	00e500e5 	.word	0x00e500e5
 80006cc:	0047003c 	.word	0x0047003c
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif    
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80006d0:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	e017      	b.n	8000708 <USBD_StdDevReq+0x7c>
    break;
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 80006d8:	7c02      	ldrb	r2, [r0, #16]
 80006da:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80006de:	b90a      	cbnz	r2, 80006e4 <USBD_StdDevReq+0x58>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80006e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006e2:	e000      	b.n	80006e6 <USBD_StdDevReq+0x5a>
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80006e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006e6:	f10d 0006 	add.w	r0, sp, #6
 80006ea:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80006ec:	2302      	movs	r3, #2
 80006ee:	e03a      	b.n	8000766 <USBD_StdDevReq+0xda>
    }
    break;
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	2b05      	cmp	r3, #5
 80006f4:	f200 80ca 	bhi.w	800088c <USBD_StdDevReq+0x200>
 80006f8:	e8df f003 	tbb	[pc, r3]
 80006fc:	130f0b03 	.word	0x130f0b03
 8000700:	1b17      	.short	0x1b17
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8000702:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8000706:	685b      	ldr	r3, [r3, #4]
 8000708:	f10d 0106 	add.w	r1, sp, #6
 800070c:	7c20      	ldrb	r0, [r4, #16]
 800070e:	4798      	blx	r3
 8000710:	e02a      	b.n	8000768 <USBD_StdDevReq+0xdc>
      break;
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8000712:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8000716:	689b      	ldr	r3, [r3, #8]
 8000718:	e7f6      	b.n	8000708 <USBD_StdDevReq+0x7c>
      break;
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800071a:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800071e:	68db      	ldr	r3, [r3, #12]
 8000720:	e7f2      	b.n	8000708 <USBD_StdDevReq+0x7c>
      break;
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8000722:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8000726:	691b      	ldr	r3, [r3, #16]
 8000728:	e7ee      	b.n	8000708 <USBD_StdDevReq+0x7c>
      break;
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800072a:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800072e:	695b      	ldr	r3, [r3, #20]
 8000730:	e7ea      	b.n	8000708 <USBD_StdDevReq+0x7c>
      break;
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8000732:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8000736:	699b      	ldr	r3, [r3, #24]
 8000738:	e7e6      	b.n	8000708 <USBD_StdDevReq+0x7c>
#endif   
    }
    break;
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800073a:	7c03      	ldrb	r3, [r0, #16]
 800073c:	2b00      	cmp	r3, #0
 800073e:	f040 80a5 	bne.w	800088c <USBD_StdDevReq+0x200>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8000742:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8000746:	f10d 0006 	add.w	r0, sp, #6
 800074a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800074c:	4798      	blx	r3
 800074e:	e00b      	b.n	8000768 <USBD_StdDevReq+0xdc>
      USBD_CtlError(pdev , req);
      return;
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8000750:	7c03      	ldrb	r3, [r0, #16]
 8000752:	2b00      	cmp	r3, #0
 8000754:	f040 809a 	bne.w	800088c <USBD_StdDevReq+0x200>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8000758:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800075c:	f10d 0006 	add.w	r0, sp, #6
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8000764:	2307      	movs	r3, #7
 8000766:	7043      	strb	r3, [r0, #1]
  default: 
     USBD_CtlError(pdev , req);
    return;
  }
  
  if((len != 0)&& (req->wLength != 0))
 8000768:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800076c:	2a00      	cmp	r2, #0
 800076e:	f000 8091 	beq.w	8000894 <USBD_StdDevReq+0x208>
 8000772:	88eb      	ldrh	r3, [r5, #6]
 8000774:	2b00      	cmp	r3, #0
 8000776:	f000 808d 	beq.w	8000894 <USBD_StdDevReq+0x208>
  {
    
    len = MIN(len , req->wLength);
 800077a:	429a      	cmp	r2, r3
 800077c:	bf28      	it	cs
 800077e:	461a      	movcs	r2, r3
    
    USBD_CtlSendData (pdev, 
 8000780:	4601      	mov	r1, r0
  }
  
  if((len != 0)&& (req->wLength != 0))
  {
    
    len = MIN(len , req->wLength);
 8000782:	f8ad 2006 	strh.w	r2, [sp, #6]
 8000786:	e064      	b.n	8000852 <USBD_StdDevReq+0x1c6>
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8000788:	888b      	ldrh	r3, [r1, #4]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d17e      	bne.n	800088c <USBD_StdDevReq+0x200>
 800078e:	88cb      	ldrh	r3, [r1, #6]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d17b      	bne.n	800088c <USBD_StdDevReq+0x200>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8000794:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8000798:	788e      	ldrb	r6, [r1, #2]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800079a:	2b03      	cmp	r3, #3
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 800079c:	f006 067f 	and.w	r6, r6, #127	; 0x7f
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80007a0:	d074      	beq.n	800088c <USBD_StdDevReq+0x200>
    {
      USBD_CtlError(pdev , req);
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 80007a2:	f880 61fe 	strb.w	r6, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 80007a6:	4631      	mov	r1, r6
 80007a8:	f7ff fde4 	bl	8000374 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 80007ac:	4620      	mov	r0, r4
 80007ae:	f7ff ff37 	bl	8000620 <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 80007b2:	b10e      	cbz	r6, 80007b8 <USBD_StdDevReq+0x12c>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 80007b4:	2302      	movs	r3, #2
 80007b6:	e000      	b.n	80007ba <USBD_StdDevReq+0x12e>
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 80007b8:	2301      	movs	r3, #1
 80007ba:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
 80007be:	e069      	b.n	8000894 <USBD_StdDevReq+0x208>
                           USBD_SetupReqTypedef *req)
{
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 80007c0:	7889      	ldrb	r1, [r1, #2]
 80007c2:	4e36      	ldr	r6, [pc, #216]	; (800089c <USBD_StdDevReq+0x210>)
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 80007c4:	2901      	cmp	r1, #1
                           USBD_SetupReqTypedef *req)
{
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 80007c6:	7031      	strb	r1, [r6, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 80007c8:	d860      	bhi.n	800088c <USBD_StdDevReq+0x200>
  {            
     USBD_CtlError(pdev , req);                              
  } 
  else 
  {
    switch (pdev->dev_state) 
 80007ca:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80007ce:	2b02      	cmp	r3, #2
 80007d0:	d002      	beq.n	80007d8 <USBD_StdDevReq+0x14c>
 80007d2:	2b03      	cmp	r3, #3
 80007d4:	d008      	beq.n	80007e8 <USBD_StdDevReq+0x15c>
 80007d6:	e059      	b.n	800088c <USBD_StdDevReq+0x200>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 80007d8:	2900      	cmp	r1, #0
 80007da:	d053      	beq.n	8000884 <USBD_StdDevReq+0x1f8>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 80007dc:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80007de:	2303      	movs	r3, #3
    switch (pdev->dev_state) 
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 80007e0:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80007e2:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
 80007e6:	e00f      	b.n	8000808 <USBD_StdDevReq+0x17c>
         USBD_CtlSendStatus(pdev);
      }
      break;
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 80007e8:	b931      	cbnz	r1, 80007f8 <USBD_StdDevReq+0x16c>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80007ea:	2302      	movs	r3, #2
 80007ec:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 80007f0:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 80007f2:	f000 f918 	bl	8000a26 <USBD_ClrClassConfig>
 80007f6:	e045      	b.n	8000884 <USBD_StdDevReq+0x1f8>
        USBD_CtlSendStatus(pdev);
        
      } 
      else  if (cfgidx != pdev->dev_config) 
 80007f8:	6841      	ldr	r1, [r0, #4]
 80007fa:	2901      	cmp	r1, #1
 80007fc:	d042      	beq.n	8000884 <USBD_StdDevReq+0x1f8>
      {
        /* Clear old configuration */
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 80007fe:	b2c9      	uxtb	r1, r1
 8000800:	f000 f911 	bl	8000a26 <USBD_ClrClassConfig>
        
        /* set new configuration */
        pdev->dev_config = cfgidx;
 8000804:	7831      	ldrb	r1, [r6, #0]
 8000806:	6061      	str	r1, [r4, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8000808:	4620      	mov	r0, r4
 800080a:	f000 f901 	bl	8000a10 <USBD_SetClassConfig>
 800080e:	2802      	cmp	r0, #2
 8000810:	d138      	bne.n	8000884 <USBD_StdDevReq+0x1f8>
 8000812:	e03b      	b.n	800088c <USBD_StdDevReq+0x200>
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{

  if (req->wLength != 1) 
 8000814:	88ca      	ldrh	r2, [r1, #6]
 8000816:	2a01      	cmp	r2, #1
 8000818:	d138      	bne.n	800088c <USBD_StdDevReq+0x200>
  {                   
     USBD_CtlError(pdev , req);
  }
  else 
  {
    switch (pdev->dev_state )  
 800081a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800081e:	2b02      	cmp	r3, #2
 8000820:	d003      	beq.n	800082a <USBD_StdDevReq+0x19e>
 8000822:	2b03      	cmp	r3, #3
 8000824:	d132      	bne.n	800088c <USBD_StdDevReq+0x200>
                        1);
      break;
      
    case USBD_STATE_CONFIGURED:   
      
      USBD_CtlSendData (pdev, 
 8000826:	1d01      	adds	r1, r0, #4
 8000828:	e013      	b.n	8000852 <USBD_StdDevReq+0x1c6>
  else 
  {
    switch (pdev->dev_state )  
    {
    case USBD_STATE_ADDRESSED:                     
      pdev->dev_default_config = 0;
 800082a:	4601      	mov	r1, r0
 800082c:	2300      	movs	r3, #0
 800082e:	f841 3f08 	str.w	r3, [r1, #8]!
 8000832:	e00e      	b.n	8000852 <USBD_StdDevReq+0x1c6>
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
  
    
  switch (pdev->dev_state) 
 8000834:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8000838:	3b02      	subs	r3, #2
 800083a:	2b01      	cmp	r3, #1
 800083c:	d826      	bhi.n	800088c <USBD_StdDevReq+0x200>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 800083e:	2301      	movs	r3, #1
 8000840:	60c3      	str	r3, [r0, #12]
#else
    pdev->dev_config_status = 0;                                   
#endif
                      
    if (pdev->dev_remote_wakeup) 
 8000842:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8000846:	b10b      	cbz	r3, 800084c <USBD_StdDevReq+0x1c0>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8000848:	2303      	movs	r3, #3
 800084a:	60c3      	str	r3, [r0, #12]
    }
    
    USBD_CtlSendData (pdev, 
 800084c:	2202      	movs	r2, #2
 800084e:	f104 010c 	add.w	r1, r4, #12
 8000852:	4620      	mov	r0, r4
 8000854:	f7ff fec7 	bl	80005e6 <USBD_CtlSendData>
 8000858:	e01c      	b.n	8000894 <USBD_StdDevReq+0x208>
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800085a:	884b      	ldrh	r3, [r1, #2]
 800085c:	2b01      	cmp	r3, #1
 800085e:	d119      	bne.n	8000894 <USBD_StdDevReq+0x208>
 8000860:	e008      	b.n	8000874 <USBD_StdDevReq+0x1e8>
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
  switch (pdev->dev_state)
 8000862:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8000866:	3b02      	subs	r3, #2
 8000868:	2b01      	cmp	r3, #1
 800086a:	d80f      	bhi.n	800088c <USBD_StdDevReq+0x200>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 800086c:	884b      	ldrh	r3, [r1, #2]
 800086e:	2b01      	cmp	r3, #1
 8000870:	d110      	bne.n	8000894 <USBD_StdDevReq+0x208>
    {
      pdev->dev_remote_wakeup = 0; 
 8000872:	2300      	movs	r3, #0
 8000874:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8000878:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800087c:	4629      	mov	r1, r5
 800087e:	689b      	ldr	r3, [r3, #8]
 8000880:	4620      	mov	r0, r4
 8000882:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8000884:	4620      	mov	r0, r4
 8000886:	f7ff fecb 	bl	8000620 <USBD_CtlSendStatus>
 800088a:	e003      	b.n	8000894 <USBD_StdDevReq+0x208>
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
    break;
    
  default:  
    USBD_CtlError(pdev , req);
 800088c:	4629      	mov	r1, r5
 800088e:	4620      	mov	r0, r4
 8000890:	f7ff fef0 	bl	8000674 <USBD_CtlError>
    break;
  }
  
  return ret;
}
 8000894:	2000      	movs	r0, #0
 8000896:	b002      	add	sp, #8
 8000898:	bd70      	pop	{r4, r5, r6, pc}
 800089a:	bf00      	nop
 800089c:	20000128 	.word	0x20000128

080008a0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80008a0:	b538      	push	{r3, r4, r5, lr}
  USBD_StatusTypeDef ret = USBD_OK; 
  
  switch (pdev->dev_state) 
 80008a2:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80008a6:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret = USBD_OK; 
  
  switch (pdev->dev_state) 
 80008a8:	2b03      	cmp	r3, #3
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80008aa:	460d      	mov	r5, r1
  USBD_StatusTypeDef ret = USBD_OK; 
  
  switch (pdev->dev_state) 
 80008ac:	d10c      	bne.n	80008c8 <USBD_StdItfReq+0x28>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 80008ae:	790b      	ldrb	r3, [r1, #4]
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	d809      	bhi.n	80008c8 <USBD_StdItfReq+0x28>
    {
      pdev->pClass->Setup (pdev, req); 
 80008b4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80008b8:	689b      	ldr	r3, [r3, #8]
 80008ba:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 80008bc:	88eb      	ldrh	r3, [r5, #6]
 80008be:	b92b      	cbnz	r3, 80008cc <USBD_StdItfReq+0x2c>
      {
         USBD_CtlSendStatus(pdev);
 80008c0:	4620      	mov	r0, r4
 80008c2:	f7ff fead 	bl	8000620 <USBD_CtlSendStatus>
 80008c6:	e001      	b.n	80008cc <USBD_StdItfReq+0x2c>
       USBD_CtlError(pdev , req);
    }
    break;
    
  default:
     USBD_CtlError(pdev , req);
 80008c8:	f7ff fed4 	bl	8000674 <USBD_CtlError>
    break;
  }
  return USBD_OK;
}
 80008cc:	2000      	movs	r0, #0
 80008ce:	bd38      	pop	{r3, r4, r5, pc}

080008d0 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80008d0:	b570      	push	{r4, r5, r6, lr}
  USBD_StatusTypeDef ret = USBD_OK; 
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 80008d2:	780a      	ldrb	r2, [r1, #0]
{
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 80008d4:	888e      	ldrh	r6, [r1, #4]
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 80008d6:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80008da:	2a20      	cmp	r2, #32
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80008dc:	4604      	mov	r4, r0
 80008de:	460d      	mov	r5, r1
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 80008e0:	b2f3      	uxtb	r3, r6
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 80008e2:	d104      	bne.n	80008ee <USBD_StdEPReq+0x1e>
  {
    pdev->pClass->Setup (pdev, req);
 80008e4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80008e8:	689b      	ldr	r3, [r3, #8]
 80008ea:	4798      	blx	r3
    
    return USBD_OK;
 80008ec:	e051      	b.n	8000992 <USBD_StdEPReq+0xc2>
  }
  
  switch (req->bRequest) 
 80008ee:	784a      	ldrb	r2, [r1, #1]
 80008f0:	2a01      	cmp	r2, #1
 80008f2:	d010      	beq.n	8000916 <USBD_StdEPReq+0x46>
 80008f4:	d326      	bcc.n	8000944 <USBD_StdEPReq+0x74>
 80008f6:	2a03      	cmp	r2, #3
 80008f8:	d14b      	bne.n	8000992 <USBD_StdEPReq+0xc2>
  {
    
  case USB_REQ_SET_FEATURE :
    
    switch (pdev->dev_state) 
 80008fa:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80008fe:	2a02      	cmp	r2, #2
 8000900:	d027      	beq.n	8000952 <USBD_StdEPReq+0x82>
 8000902:	2a03      	cmp	r2, #3
 8000904:	d143      	bne.n	800098e <USBD_StdEPReq+0xbe>
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
      
    case USBD_STATE_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 8000906:	884a      	ldrh	r2, [r1, #2]
 8000908:	b992      	cbnz	r2, 8000930 <USBD_StdEPReq+0x60>
      {
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800090a:	065e      	lsls	r6, r3, #25
 800090c:	d010      	beq.n	8000930 <USBD_StdEPReq+0x60>
        { 
          USBD_LL_StallEP(pdev , ep_addr);
 800090e:	4619      	mov	r1, r3
 8000910:	f7ff fd12 	bl	8000338 <USBD_LL_StallEP>
 8000914:	e00c      	b.n	8000930 <USBD_StdEPReq+0x60>
    }
    break;
    
  case USB_REQ_CLEAR_FEATURE :
    
    switch (pdev->dev_state) 
 8000916:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800091a:	2a02      	cmp	r2, #2
 800091c:	d019      	beq.n	8000952 <USBD_StdEPReq+0x82>
 800091e:	2a03      	cmp	r2, #3
 8000920:	d135      	bne.n	800098e <USBD_StdEPReq+0xbe>
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
      
    case USBD_STATE_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 8000922:	884a      	ldrh	r2, [r1, #2]
 8000924:	bbaa      	cbnz	r2, 8000992 <USBD_StdEPReq+0xc2>
      {
        if ((ep_addr & 0x7F) != 0x00) 
 8000926:	0659      	lsls	r1, r3, #25
 8000928:	d008      	beq.n	800093c <USBD_StdEPReq+0x6c>
        {        
          USBD_LL_ClearStallEP(pdev , ep_addr);
 800092a:	4619      	mov	r1, r3
 800092c:	f7ff fd0b 	bl	8000346 <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 8000930:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8000934:	4629      	mov	r1, r5
 8000936:	689b      	ldr	r3, [r3, #8]
 8000938:	4620      	mov	r0, r4
 800093a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800093c:	4620      	mov	r0, r4
 800093e:	f7ff fe6f 	bl	8000620 <USBD_CtlSendStatus>
 8000942:	e026      	b.n	8000992 <USBD_StdEPReq+0xc2>
      break;    
    }
    break;
    
  case USB_REQ_GET_STATUS:                  
    switch (pdev->dev_state) 
 8000944:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8000948:	2a02      	cmp	r2, #2
 800094a:	d002      	beq.n	8000952 <USBD_StdEPReq+0x82>
 800094c:	2a03      	cmp	r2, #3
 800094e:	d006      	beq.n	800095e <USBD_StdEPReq+0x8e>
 8000950:	e01d      	b.n	800098e <USBD_StdEPReq+0xbe>
    {
    case USBD_STATE_ADDRESSED:          
      if ((ep_addr & 0x7F) != 0x00) 
 8000952:	065a      	lsls	r2, r3, #25
 8000954:	d01d      	beq.n	8000992 <USBD_StdEPReq+0xc2>
      {
        USBD_LL_StallEP(pdev , ep_addr);
 8000956:	4619      	mov	r1, r3
 8000958:	f7ff fcee 	bl	8000338 <USBD_LL_StallEP>
 800095c:	e019      	b.n	8000992 <USBD_StdEPReq+0xc2>
 800095e:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      }
      break;	
      
    case USBD_STATE_CONFIGURED:
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8000962:	f016 0f80 	tst.w	r6, #128	; 0x80
 8000966:	eb00 1505 	add.w	r5, r0, r5, lsl #4
                                         &pdev->ep_out[ep_addr & 0x7F];
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 800096a:	4619      	mov	r1, r3
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
      
    case USBD_STATE_CONFIGURED:
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 800096c:	bf14      	ite	ne
 800096e:	3514      	addne	r5, #20
 8000970:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
                                         &pdev->ep_out[ep_addr & 0x7F];
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8000974:	f7ff fcee 	bl	8000354 <USBD_LL_IsStallEP>
 8000978:	b110      	cbz	r0, 8000980 <USBD_StdEPReq+0xb0>
      {
        pep->status = 0x0001;     
 800097a:	2301      	movs	r3, #1
 800097c:	602b      	str	r3, [r5, #0]
 800097e:	e000      	b.n	8000982 <USBD_StdEPReq+0xb2>
      }
      else
      {
        pep->status = 0x0000;  
 8000980:	6028      	str	r0, [r5, #0]
      }
      
      USBD_CtlSendData (pdev,
 8000982:	2202      	movs	r2, #2
 8000984:	4629      	mov	r1, r5
 8000986:	4620      	mov	r0, r4
 8000988:	f7ff fe2d 	bl	80005e6 <USBD_CtlSendData>
                        (uint8_t *)&pep->status,
                        2);
      break;
 800098c:	e001      	b.n	8000992 <USBD_StdEPReq+0xc2>
      
    default:                         
      USBD_CtlError(pdev , req);
 800098e:	f7ff fe71 	bl	8000674 <USBD_CtlError>
    
  default:
    break;
  }
  return ret;
}
 8000992:	2000      	movs	r0, #0
 8000994:	bd70      	pop	{r4, r5, r6, pc}

08000996 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8000996:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 8000998:	b1c0      	cbz	r0, 80009cc <USBD_GetString+0x36>
 800099a:	4605      	mov	r5, r0
 800099c:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 800099e:	f815 4b01 	ldrb.w	r4, [r5], #1
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	2c00      	cmp	r4, #0
 80009a6:	d1f9      	bne.n	800099c <USBD_GetString+0x6>
{
  uint8_t idx = 0;
  
  if (desc != NULL) 
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 80009a8:	005b      	lsls	r3, r3, #1
 80009aa:	3302      	adds	r3, #2
 80009ac:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 80009ae:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 80009b0:	2303      	movs	r3, #3
 80009b2:	704b      	strb	r3, [r1, #1]
 80009b4:	3801      	subs	r0, #1
 80009b6:	2302      	movs	r3, #2
    
    while (*desc != '\0') 
 80009b8:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80009bc:	b135      	cbz	r5, 80009cc <USBD_GetString+0x36>
    {
      unicode[idx++] = *desc++;
 80009be:	1c5a      	adds	r2, r3, #1
 80009c0:	54cd      	strb	r5, [r1, r3]
 80009c2:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0x00;
 80009c4:	3302      	adds	r3, #2
 80009c6:	b2db      	uxtb	r3, r3
 80009c8:	548c      	strb	r4, [r1, r2]
 80009ca:	e7f5      	b.n	80009b8 <USBD_GetString+0x22>
 80009cc:	bd30      	pop	{r4, r5, pc}

080009ce <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80009ce:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80009d0:	b180      	cbz	r0, 80009f4 <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80009d2:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80009d6:	b113      	cbz	r3, 80009de <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80009de:	b109      	cbz	r1, 80009e4 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 80009e0:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80009e4:	2301      	movs	r3, #1
 80009e6:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  pdev->id = id;
 80009ea:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80009ec:	f7ff fc58 	bl	80002a0 <USBD_LL_Init>
  
  return USBD_OK; 
 80009f0:	2000      	movs	r0, #0
 80009f2:	bd08      	pop	{r3, pc}
{
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
 80009f4:	2002      	movs	r0, #2
  pdev->id = id;
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
  
  return USBD_OK; 
}
 80009f6:	bd08      	pop	{r3, pc}

080009f8 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 80009f8:	b119      	cbz	r1, 8000a02 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80009fa:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 80009fe:	2000      	movs	r0, #0
 8000a00:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8000a02:	2002      	movs	r0, #2
  }
  
  return status;
}
 8000a04:	4770      	bx	lr

08000a06 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8000a06:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8000a08:	f7ff fc7e 	bl	8000308 <USBD_LL_Start>
  
  return USBD_OK;  
}
 8000a0c:	2000      	movs	r0, #0
 8000a0e:	bd08      	pop	{r3, pc}

08000a10 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8000a10:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 8000a12:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8000a16:	b90b      	cbnz	r3, 8000a1c <USBD_SetClassConfig+0xc>
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8000a18:	2002      	movs	r0, #2
 8000a1a:	bd08      	pop	{r3, pc}
  
  if(pdev->pClass != NULL)
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4798      	blx	r3
 8000a20:	2800      	cmp	r0, #0
 8000a22:	d1f9      	bne.n	8000a18 <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 8000a24:	bd08      	pop	{r3, pc}

08000a26 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8000a26:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8000a28:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8000a2c:	685b      	ldr	r3, [r3, #4]
 8000a2e:	4798      	blx	r3
  return USBD_OK;
}
 8000a30:	2000      	movs	r0, #0
 8000a32:	bd08      	pop	{r3, pc}

08000a34 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8000a34:	b538      	push	{r3, r4, r5, lr}
 8000a36:	4604      	mov	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8000a38:	f500 7502 	add.w	r5, r0, #520	; 0x208
 8000a3c:	4628      	mov	r0, r5
 8000a3e:	f7ff fe05 	bl	800064c <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8000a42:	2301      	movs	r3, #1
 8000a44:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 8000a48:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
{

  USBD_ParseSetupRequest(&pdev->request, psetup);
  
  pdev->ep0_state = USBD_EP0_SETUP;
  pdev->ep0_data_len = pdev->request.wLength;
 8000a4c:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 8000a50:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 8000a54:	f001 031f 	and.w	r3, r1, #31
 8000a58:	2b01      	cmp	r3, #1
 8000a5a:	d00c      	beq.n	8000a76 <USBD_LL_SetupStage+0x42>
 8000a5c:	d306      	bcc.n	8000a6c <USBD_LL_SetupStage+0x38>
 8000a5e:	2b02      	cmp	r3, #2
 8000a60:	d10e      	bne.n	8000a80 <USBD_LL_SetupStage+0x4c>
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
    break;
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 8000a62:	4629      	mov	r1, r5
 8000a64:	4620      	mov	r0, r4
 8000a66:	f7ff ff33 	bl	80008d0 <USBD_StdEPReq>
    break;
 8000a6a:	e00e      	b.n	8000a8a <USBD_LL_SetupStage+0x56>
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 8000a6c:	4629      	mov	r1, r5
 8000a6e:	4620      	mov	r0, r4
 8000a70:	f7ff fe0c 	bl	800068c <USBD_StdDevReq>
    break;
 8000a74:	e009      	b.n	8000a8a <USBD_LL_SetupStage+0x56>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 8000a76:	4629      	mov	r1, r5
 8000a78:	4620      	mov	r0, r4
 8000a7a:	f7ff ff11 	bl	80008a0 <USBD_StdItfReq>
    break;
 8000a7e:	e004      	b.n	8000a8a <USBD_LL_SetupStage+0x56>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8000a80:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8000a84:	4620      	mov	r0, r4
 8000a86:	f7ff fc57 	bl	8000338 <USBD_LL_StallEP>
    break;
  }  
  return USBD_OK;  
}
 8000a8a:	2000      	movs	r0, #0
 8000a8c:	bd38      	pop	{r3, r4, r5, pc}

08000a8e <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8000a8e:	b538      	push	{r3, r4, r5, lr}
 8000a90:	4604      	mov	r4, r0
 8000a92:	4615      	mov	r5, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8000a94:	bb09      	cbnz	r1, 8000ada <USBD_LL_DataOutStage+0x4c>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8000a96:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 8000a9a:	2b03      	cmp	r3, #3
 8000a9c:	d126      	bne.n	8000aec <USBD_LL_DataOutStage+0x5e>
    {
      if(pep->rem_length > pep->maxpacket)
 8000a9e:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
 8000aa2:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 8000aa6:	4291      	cmp	r1, r2
 8000aa8:	d90a      	bls.n	8000ac0 <USBD_LL_DataOutStage+0x32>
      {
        pep->rem_length -=  pep->maxpacket;
 8000aaa:	1a8b      	subs	r3, r1, r2
       
        USBD_CtlContinueRx (pdev, 
 8000aac:	429a      	cmp	r2, r3
 8000aae:	bf28      	it	cs
 8000ab0:	461a      	movcs	r2, r3
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
    {
      if(pep->rem_length > pep->maxpacket)
      {
        pep->rem_length -=  pep->maxpacket;
 8000ab2:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
       
        USBD_CtlContinueRx (pdev, 
 8000ab6:	b292      	uxth	r2, r2
 8000ab8:	4629      	mov	r1, r5
 8000aba:	f7ff fda9 	bl	8000610 <USBD_CtlContinueRx>
 8000abe:	e015      	b.n	8000aec <USBD_LL_DataOutStage+0x5e>
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8000ac0:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8000ac4:	691b      	ldr	r3, [r3, #16]
 8000ac6:	b123      	cbz	r3, 8000ad2 <USBD_LL_DataOutStage+0x44>
 8000ac8:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8000acc:	2a03      	cmp	r2, #3
 8000ace:	d100      	bne.n	8000ad2 <USBD_LL_DataOutStage+0x44>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
        {
          pdev->pClass->EP0_RxReady(pdev); 
 8000ad0:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8000ad2:	4620      	mov	r0, r4
 8000ad4:	f7ff fda4 	bl	8000620 <USBD_CtlSendStatus>
 8000ad8:	e008      	b.n	8000aec <USBD_LL_DataOutStage+0x5e>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 8000ada:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8000ade:	699b      	ldr	r3, [r3, #24]
 8000ae0:	b123      	cbz	r3, 8000aec <USBD_LL_DataOutStage+0x5e>
 8000ae2:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8000ae6:	2a03      	cmp	r2, #3
 8000ae8:	d100      	bne.n	8000aec <USBD_LL_DataOutStage+0x5e>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
 8000aea:	4798      	blx	r3
  }  
  return USBD_OK;
}
 8000aec:	2000      	movs	r0, #0
 8000aee:	bd38      	pop	{r3, r4, r5, pc}

08000af0 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8000af0:	b570      	push	{r4, r5, r6, lr}
 8000af2:	4613      	mov	r3, r2
 8000af4:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8000af6:	460e      	mov	r6, r1
 8000af8:	2900      	cmp	r1, #0
 8000afa:	d13c      	bne.n	8000b76 <USBD_LL_DataInStage+0x86>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8000afc:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 8000b00:	2a02      	cmp	r2, #2
 8000b02:	d130      	bne.n	8000b66 <USBD_LL_DataInStage+0x76>
    {
      if(pep->rem_length > pep->maxpacket)
 8000b04:	69c5      	ldr	r5, [r0, #28]
 8000b06:	6a02      	ldr	r2, [r0, #32]
 8000b08:	4295      	cmp	r5, r2
 8000b0a:	d907      	bls.n	8000b1c <USBD_LL_DataInStage+0x2c>
      {
        pep->rem_length -=  pep->maxpacket;
 8000b0c:	1aaa      	subs	r2, r5, r2
 8000b0e:	61c2      	str	r2, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 8000b10:	4619      	mov	r1, r3
 8000b12:	b292      	uxth	r2, r2
 8000b14:	f7ff fd74 	bl	8000600 <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8000b18:	4633      	mov	r3, r6
 8000b1a:	e011      	b.n	8000b40 <USBD_LL_DataInStage+0x50>
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 8000b1c:	6983      	ldr	r3, [r0, #24]
 8000b1e:	fbb3 f5f2 	udiv	r5, r3, r2
 8000b22:	fb02 3515 	mls	r5, r2, r5, r3
 8000b26:	b98d      	cbnz	r5, 8000b4c <USBD_LL_DataInStage+0x5c>
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	d80f      	bhi.n	8000b4c <USBD_LL_DataInStage+0x5c>
           (pep->total_length >= pep->maxpacket) &&
 8000b2c:	f8d0 21f8 	ldr.w	r2, [r0, #504]	; 0x1f8
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d20b      	bcs.n	8000b4c <USBD_LL_DataInStage+0x5c>
             (pep->total_length < pdev->ep0_data_len ))
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8000b34:	462a      	mov	r2, r5
 8000b36:	f7ff fd63 	bl	8000600 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8000b3a:	462b      	mov	r3, r5
           (pep->total_length >= pep->maxpacket) &&
             (pep->total_length < pdev->ep0_data_len ))
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
          pdev->ep0_data_len = 0;
 8000b3c:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8000b40:	461a      	mov	r2, r3
 8000b42:	4619      	mov	r1, r3
 8000b44:	4620      	mov	r0, r4
 8000b46:	f7ff fc23 	bl	8000390 <USBD_LL_PrepareReceive>
 8000b4a:	e00c      	b.n	8000b66 <USBD_LL_DataInStage+0x76>
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8000b4c:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8000b50:	68db      	ldr	r3, [r3, #12]
 8000b52:	b12b      	cbz	r3, 8000b60 <USBD_LL_DataInStage+0x70>
 8000b54:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 8000b58:	2a03      	cmp	r2, #3
 8000b5a:	d101      	bne.n	8000b60 <USBD_LL_DataInStage+0x70>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
          {
            pdev->pClass->EP0_TxSent(pdev); 
 8000b5c:	4620      	mov	r0, r4
 8000b5e:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 8000b60:	4620      	mov	r0, r4
 8000b62:	f7ff fd68 	bl	8000636 <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8000b66:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8000b6a:	2b01      	cmp	r3, #1
 8000b6c:	d10c      	bne.n	8000b88 <USBD_LL_DataInStage+0x98>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
 8000b74:	e008      	b.n	8000b88 <USBD_LL_DataInStage+0x98>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 8000b76:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8000b7a:	695b      	ldr	r3, [r3, #20]
 8000b7c:	b123      	cbz	r3, 8000b88 <USBD_LL_DataInStage+0x98>
 8000b7e:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8000b82:	2a03      	cmp	r2, #3
 8000b84:	d100      	bne.n	8000b88 <USBD_LL_DataInStage+0x98>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
 8000b86:	4798      	blx	r3
  }  
  return USBD_OK;
}
 8000b88:	2000      	movs	r0, #0
 8000b8a:	bd70      	pop	{r4, r5, r6, pc}

08000b8c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8000b8c:	b538      	push	{r3, r4, r5, lr}
 8000b8e:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8000b90:	2200      	movs	r2, #0
 8000b92:	4611      	mov	r1, r2
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8000b94:	2540      	movs	r5, #64	; 0x40
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8000b96:	2340      	movs	r3, #64	; 0x40
 8000b98:	f7ff fbbd 	bl	8000316 <USBD_LL_OpenEP>
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8000b9c:	462b      	mov	r3, r5
  USBD_LL_OpenEP(pdev,
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8000b9e:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2180      	movs	r1, #128	; 0x80
 8000ba6:	4620      	mov	r0, r4
 8000ba8:	f7ff fbb5 	bl	8000316 <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8000bac:	2301      	movs	r3, #1
 8000bae:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8000bb2:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  USBD_LL_OpenEP(pdev,
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8000bb6:	6225      	str	r5, [r4, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  
  if (pdev->pClassData) 
 8000bb8:	b12b      	cbz	r3, 8000bc6 <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8000bba:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8000bbe:	7921      	ldrb	r1, [r4, #4]
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	4620      	mov	r0, r4
 8000bc4:	4798      	blx	r3
 
  
  return USBD_OK;
}
 8000bc6:	2000      	movs	r0, #0
 8000bc8:	bd38      	pop	{r3, r4, r5, pc}

08000bca <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8000bca:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8000bcc:	2000      	movs	r0, #0
 8000bce:	4770      	bx	lr

08000bd0 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8000bd0:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8000bd4:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8000bd8:	2304      	movs	r3, #4
 8000bda:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8000bde:	2000      	movs	r0, #0
 8000be0:	4770      	bx	lr

08000be2 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 8000be2:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 8000be6:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8000bea:	2000      	movs	r0, #0
 8000bec:	4770      	bx	lr

08000bee <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8000bee:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8000bf0:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8000bf4:	2a03      	cmp	r2, #3
 8000bf6:	d104      	bne.n	8000c02 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 8000bf8:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8000bfc:	69db      	ldr	r3, [r3, #28]
 8000bfe:	b103      	cbz	r3, 8000c02 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8000c00:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8000c02:	2000      	movs	r0, #0
 8000c04:	bd08      	pop	{r3, pc}
	...

08000c08 <USBD_HID_GetCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_HID_CfgDesc);
 8000c08:	2322      	movs	r3, #34	; 0x22
 8000c0a:	8003      	strh	r3, [r0, #0]
  return USBD_HID_CfgDesc;
}
 8000c0c:	4800      	ldr	r0, [pc, #0]	; (8000c10 <USBD_HID_GetCfgDesc+0x8>)
 8000c0e:	4770      	bx	lr
 8000c10:	200000d0 	.word	0x200000d0

08000c14 <USBD_HID_DataIn>:
                              uint8_t epnum)
{
  
  /* Ensure that the FIFO is empty before a new transfer, this condition could 
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8000c14:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
 8000c18:	2000      	movs	r0, #0
 8000c1a:	7318      	strb	r0, [r3, #12]
  return USBD_OK;
}
 8000c1c:	4770      	bx	lr
	...

08000c20 <USBD_HID_GetDeviceQualifierDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc (uint16_t *length)
{
  *length = sizeof (USBD_HID_DeviceQualifierDesc);
 8000c20:	230a      	movs	r3, #10
 8000c22:	8003      	strh	r3, [r0, #0]
  return USBD_HID_DeviceQualifierDesc;
}
 8000c24:	4800      	ldr	r0, [pc, #0]	; (8000c28 <USBD_HID_GetDeviceQualifierDesc+0x8>)
 8000c26:	4770      	bx	lr
 8000c28:	200000c4 	.word	0x200000c4

08000c2c <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 8000c2c:	b538      	push	{r3, r4, r5, lr}
 8000c2e:	780c      	ldrb	r4, [r1, #0]
 8000c30:	4605      	mov	r5, r0
  uint16_t len = 0;
  uint8_t  *pbuf = NULL;
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef*) pdev->pClassData;
  
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8000c32:	f014 0460 	ands.w	r4, r4, #96	; 0x60
static uint8_t  USBD_HID_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
  uint16_t len = 0;
  uint8_t  *pbuf = NULL;
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef*) pdev->pClassData;
 8000c36:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8000c3a:	d021      	beq.n	8000c80 <USBD_HID_Setup+0x54>
 8000c3c:	2c20      	cmp	r4, #32
 8000c3e:	d145      	bne.n	8000ccc <USBD_HID_Setup+0xa0>
  {
  case USB_REQ_TYPE_CLASS :  
    switch (req->bRequest)
 8000c40:	784a      	ldrb	r2, [r1, #1]
 8000c42:	3a02      	subs	r2, #2
 8000c44:	2a09      	cmp	r2, #9
 8000c46:	d816      	bhi.n	8000c76 <USBD_HID_Setup+0x4a>
 8000c48:	e8df f002 	tbb	[pc, r2]
 8000c4c:	1515080f 	.word	0x1515080f
 8000c50:	15151515 	.word	0x15151515
 8000c54:	050b      	.short	0x050b
    {
      
      
    case HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 8000c56:	788a      	ldrb	r2, [r1, #2]
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	e037      	b.n	8000ccc <USBD_HID_Setup+0xa0>
      break;
      
    case HID_REQ_GET_PROTOCOL:
      USBD_CtlSendData (pdev, 
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	4619      	mov	r1, r3
 8000c60:	e005      	b.n	8000c6e <USBD_HID_Setup+0x42>
                        (uint8_t *)&hhid->Protocol,
                        1);    
      break;
      
    case HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8000c62:	884a      	ldrh	r2, [r1, #2]
 8000c64:	0a12      	lsrs	r2, r2, #8
 8000c66:	605a      	str	r2, [r3, #4]
 8000c68:	e030      	b.n	8000ccc <USBD_HID_Setup+0xa0>
      break;
      
    case HID_REQ_GET_IDLE:
      USBD_CtlSendData (pdev, 
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	1d19      	adds	r1, r3, #4
 8000c6e:	4628      	mov	r0, r5
 8000c70:	f7ff fcb9 	bl	80005e6 <USBD_CtlSendData>
 8000c74:	e02a      	b.n	8000ccc <USBD_HID_Setup+0xa0>
                        (uint8_t *)&hhid->IdleState,
                        1);        
      break;      
      
    default:
      USBD_CtlError (pdev, req);
 8000c76:	4628      	mov	r0, r5
 8000c78:	f7ff fcfc 	bl	8000674 <USBD_CtlError>
      return USBD_FAIL; 
 8000c7c:	2402      	movs	r4, #2
 8000c7e:	e026      	b.n	8000cce <USBD_HID_Setup+0xa2>
    }
    break;
    
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8000c80:	784a      	ldrb	r2, [r1, #1]
 8000c82:	2a0a      	cmp	r2, #10
 8000c84:	d019      	beq.n	8000cba <USBD_HID_Setup+0x8e>
 8000c86:	2a0b      	cmp	r2, #11
 8000c88:	d01d      	beq.n	8000cc6 <USBD_HID_Setup+0x9a>
 8000c8a:	2a06      	cmp	r2, #6
 8000c8c:	d11f      	bne.n	8000cce <USBD_HID_Setup+0xa2>
    {
    case USB_REQ_GET_DESCRIPTOR: 
      if( req->wValue >> 8 == HID_REPORT_DESC)
 8000c8e:	884b      	ldrh	r3, [r1, #2]
 8000c90:	0a1b      	lsrs	r3, r3, #8
 8000c92:	2b22      	cmp	r3, #34	; 0x22
 8000c94:	d105      	bne.n	8000ca2 <USBD_HID_Setup+0x76>
      {
        len = MIN(HID_MOUSE_REPORT_DESC_SIZE , req->wLength);
 8000c96:	88ca      	ldrh	r2, [r1, #6]
        pbuf = HID_MOUSE_ReportDesc;
 8000c98:	490e      	ldr	r1, [pc, #56]	; (8000cd4 <USBD_HID_Setup+0xa8>)
    switch (req->bRequest)
    {
    case USB_REQ_GET_DESCRIPTOR: 
      if( req->wValue >> 8 == HID_REPORT_DESC)
      {
        len = MIN(HID_MOUSE_REPORT_DESC_SIZE , req->wLength);
 8000c9a:	2a4a      	cmp	r2, #74	; 0x4a
 8000c9c:	bf28      	it	cs
 8000c9e:	224a      	movcs	r2, #74	; 0x4a
 8000ca0:	e009      	b.n	8000cb6 <USBD_HID_Setup+0x8a>
        pbuf = HID_MOUSE_ReportDesc;
      }
      else if( req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8000ca2:	2b21      	cmp	r3, #33	; 0x21
 8000ca4:	d105      	bne.n	8000cb2 <USBD_HID_Setup+0x86>
      {
        pbuf = USBD_HID_Desc;   
        len = MIN(USB_HID_DESC_SIZ , req->wLength);
 8000ca6:	88ca      	ldrh	r2, [r1, #6]
        len = MIN(HID_MOUSE_REPORT_DESC_SIZE , req->wLength);
        pbuf = HID_MOUSE_ReportDesc;
      }
      else if( req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
      {
        pbuf = USBD_HID_Desc;   
 8000ca8:	490b      	ldr	r1, [pc, #44]	; (8000cd8 <USBD_HID_Setup+0xac>)
        len = MIN(USB_HID_DESC_SIZ , req->wLength);
 8000caa:	2a09      	cmp	r2, #9
 8000cac:	bf28      	it	cs
 8000cae:	2209      	movcs	r2, #9
 8000cb0:	e001      	b.n	8000cb6 <USBD_HID_Setup+0x8a>
  */
static uint8_t  USBD_HID_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
  uint16_t len = 0;
  uint8_t  *pbuf = NULL;
 8000cb2:	4621      	mov	r1, r4
  * @retval status
  */
static uint8_t  USBD_HID_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
  uint16_t len = 0;
 8000cb4:	4622      	mov	r2, r4
      {
        pbuf = USBD_HID_Desc;   
        len = MIN(USB_HID_DESC_SIZ , req->wLength);
      }
      
      USBD_CtlSendData (pdev, 
 8000cb6:	4628      	mov	r0, r5
 8000cb8:	e002      	b.n	8000cc0 <USBD_HID_Setup+0x94>
                        len);
      
      break;
      
    case USB_REQ_GET_INTERFACE :
      USBD_CtlSendData (pdev,
 8000cba:	2201      	movs	r2, #1
 8000cbc:	f103 0108 	add.w	r1, r3, #8
 8000cc0:	f7ff fc91 	bl	80005e6 <USBD_CtlSendData>
                        (uint8_t *)&hhid->AltSetting,
                        1);
      break;
 8000cc4:	e003      	b.n	8000cce <USBD_HID_Setup+0xa2>
      
    case USB_REQ_SET_INTERFACE :
      hhid->AltSetting = (uint8_t)(req->wValue);
 8000cc6:	788a      	ldrb	r2, [r1, #2]
 8000cc8:	609a      	str	r2, [r3, #8]
      break;
 8000cca:	e000      	b.n	8000cce <USBD_HID_Setup+0xa2>
    }
  }
  return USBD_OK;
 8000ccc:	2400      	movs	r4, #0
}
 8000cce:	4620      	mov	r0, r4
 8000cd0:	bd38      	pop	{r3, r4, r5, pc}
 8000cd2:	bf00      	nop
 8000cd4:	2000006c 	.word	0x2000006c
 8000cd8:	200000b8 	.word	0x200000b8

08000cdc <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 8000cdc:	b510      	push	{r4, lr}
 8000cde:	4604      	mov	r4, r0
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev,
 8000ce0:	2181      	movs	r1, #129	; 0x81
 8000ce2:	f7ff fb22 	bl	800032a <USBD_LL_CloseEP>
                  HID_EPIN_ADDR);
  
  /* FRee allocated memory */
  if(pdev->pClassData != NULL)
 8000ce6:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8000cea:	b120      	cbz	r0, 8000cf6 <USBD_HID_DeInit+0x1a>
  {
    USBD_free(pdev->pClassData);
 8000cec:	f7ff fb5c 	bl	80003a8 <USBD_static_free>
    pdev->pClassData = NULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
  } 
  
  return USBD_OK;
}
 8000cf6:	2000      	movs	r0, #0
 8000cf8:	bd10      	pop	{r4, pc}

08000cfa <USBD_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 8000cfa:	b510      	push	{r4, lr}
  uint8_t ret = 0;
  
  /* Open EP IN */
  USBD_LL_OpenEP(pdev,
 8000cfc:	2304      	movs	r3, #4
 8000cfe:	2203      	movs	r2, #3
 8000d00:	2181      	movs	r1, #129	; 0x81
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 8000d02:	4604      	mov	r4, r0
  uint8_t ret = 0;
  
  /* Open EP IN */
  USBD_LL_OpenEP(pdev,
 8000d04:	f7ff fb07 	bl	8000316 <USBD_LL_OpenEP>
                 HID_EPIN_ADDR,
                 USBD_EP_TYPE_INTR,
                 HID_EPIN_SIZE);  
  
  pdev->pClassData = USBD_malloc(sizeof (USBD_HID_HandleTypeDef));
 8000d08:	2010      	movs	r0, #16
 8000d0a:	f7ff fb49 	bl	80003a0 <USBD_static_malloc>
 8000d0e:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  
  if(pdev->pClassData == NULL)
 8000d12:	b118      	cbz	r0, 8000d1c <USBD_HID_Init+0x22>
  {
    ret = 1; 
  }
  else
  {
    ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8000d14:	2300      	movs	r3, #0
 8000d16:	7303      	strb	r3, [r0, #12]
  * @retval status
  */
static uint8_t  USBD_HID_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
  uint8_t ret = 0;
 8000d18:	4618      	mov	r0, r3
 8000d1a:	bd10      	pop	{r4, pc}
  
  pdev->pClassData = USBD_malloc(sizeof (USBD_HID_HandleTypeDef));
  
  if(pdev->pClassData == NULL)
  {
    ret = 1; 
 8000d1c:	2001      	movs	r0, #1
  else
  {
    ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
  }
  return ret;
}
 8000d1e:	bd10      	pop	{r4, pc}

08000d20 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport     (USBD_HandleTypeDef  *pdev, 
                                 uint8_t *report,
                                 uint16_t len)
{
 8000d20:	b510      	push	{r4, lr}
 8000d22:	4613      	mov	r3, r2
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef*)pdev->pClassData;
  
  if (pdev->dev_state == USBD_STATE_CONFIGURED )
 8000d24:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8000d28:	2a03      	cmp	r2, #3
 8000d2a:	d109      	bne.n	8000d40 <USBD_HID_SendReport+0x20>
  */
uint8_t USBD_HID_SendReport     (USBD_HandleTypeDef  *pdev, 
                                 uint8_t *report,
                                 uint16_t len)
{
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef*)pdev->pClassData;
 8000d2c:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  if (pdev->dev_state == USBD_STATE_CONFIGURED )
  {
    if(hhid->state == HID_IDLE)
 8000d30:	7b22      	ldrb	r2, [r4, #12]
 8000d32:	b92a      	cbnz	r2, 8000d40 <USBD_HID_SendReport+0x20>
    {
      hhid->state = HID_BUSY;
 8000d34:	2201      	movs	r2, #1
 8000d36:	7322      	strb	r2, [r4, #12]
      USBD_LL_Transmit (pdev, 
 8000d38:	460a      	mov	r2, r1
 8000d3a:	2181      	movs	r1, #129	; 0x81
 8000d3c:	f7ff fb21 	bl	8000382 <USBD_LL_Transmit>
                        report,
                        len);
    }
  }
  return USBD_OK;
}
 8000d40:	2000      	movs	r0, #0
 8000d42:	bd10      	pop	{r4, pc}

08000d44 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8000d44:	b084      	sub	sp, #16
 8000d46:	a801      	add	r0, sp, #4
 8000d48:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8000d4c:	b004      	add	sp, #16
 8000d4e:	2000      	movs	r0, #0
 8000d50:	4770      	bx	lr

08000d52 <USB_EnableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8000d52:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8000d56:	b29b      	uxth	r3, r3
 8000d58:	f443 433d 	orr.w	r3, r3, #48384	; 0xbd00
 8000d5c:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 8000d60:	2000      	movs	r0, #0
 8000d62:	4770      	bx	lr

08000d64 <USB_DisableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8000d64:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8000d68:	f423 5374 	bic.w	r3, r3, #15616	; 0x3d00
 8000d6c:	045b      	lsls	r3, r3, #17
 8000d6e:	0c5b      	lsrs	r3, r3, #17
 8000d70:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 8000d74:	2000      	movs	r0, #0
 8000d76:	4770      	bx	lr

08000d78 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8000d78:	2000      	movs	r0, #0
 8000d7a:	4770      	bx	lr

08000d7c <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{    
 8000d7c:	b084      	sub	sp, #16
 8000d7e:	b510      	push	{r4, lr}
 8000d80:	ac03      	add	r4, sp, #12
 8000d82:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  
  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
    
  return HAL_OK;
}
 8000d86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  */
HAL_StatusTypeDef USB_DevInit (USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{    
  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8000d90:	2300      	movs	r3, #0
 8000d92:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
    
  return HAL_OK;
}
 8000d96:	b004      	add	sp, #16
  
  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 
  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8000d98:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  
  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8000d9c:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
    
  return HAL_OK;
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	4770      	bx	lr

08000da4 <USB_ActivateEndpoint>:
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  /* initialize Endpoint */
  switch (ep->type)
 8000da4:	78cb      	ldrb	r3, [r1, #3]
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8000da6:	b530      	push	{r4, r5, lr}
 8000da8:	780a      	ldrb	r2, [r1, #0]
  /* initialize Endpoint */
  switch (ep->type)
 8000daa:	2b03      	cmp	r3, #3
 8000dac:	d82b      	bhi.n	8000e06 <USB_ActivateEndpoint+0x62>
 8000dae:	e8df f003 	tbb	[pc, r3]
 8000db2:	1f02      	.short	0x1f02
 8000db4:	150c      	.short	0x150c
  {
  case EP_TYPE_CTRL:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_CONTROL);
 8000db6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8000dba:	b29b      	uxth	r3, r3
 8000dbc:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8000dc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000dc4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dc8:	e01b      	b.n	8000e02 <USB_ActivateEndpoint+0x5e>
    break;
  case EP_TYPE_BULK:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_BULK);
 8000dca:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8000dce:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8000dd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000dd6:	041b      	lsls	r3, r3, #16
 8000dd8:	0c1b      	lsrs	r3, r3, #16
 8000dda:	e012      	b.n	8000e02 <USB_ActivateEndpoint+0x5e>
    break;
  case EP_TYPE_INTR:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
 8000ddc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8000de0:	b29b      	uxth	r3, r3
 8000de2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8000de6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000dea:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8000dee:	e008      	b.n	8000e02 <USB_ActivateEndpoint+0x5e>
    break;
  case EP_TYPE_ISOC:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 8000df0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8000df4:	b29b      	uxth	r3, r3
 8000df6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8000dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000dfe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e02:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    break;
  default:
      break;
  } 
  
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8000e06:	780c      	ldrb	r4, [r1, #0]
 8000e08:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8000e0c:	f444 4200 	orr.w	r2, r4, #32768	; 0x8000
 8000e10:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000e14:	051b      	lsls	r3, r3, #20
 8000e16:	0d1b      	lsrs	r3, r3, #20
 8000e18:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
  
  if (ep->doublebuffer == 0) 
 8000e22:	7a8b      	ldrb	r3, [r1, #10]
 8000e24:	780d      	ldrb	r5, [r1, #0]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d174      	bne.n	8000f14 <USB_ActivateEndpoint+0x170>
  {
    if (ep->is_in)
 8000e2a:	784a      	ldrb	r2, [r1, #1]
 8000e2c:	888b      	ldrh	r3, [r1, #4]
 8000e2e:	b33a      	cbz	r2, 8000e80 <USB_ActivateEndpoint+0xdc>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8000e30:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8000e34:	085b      	lsrs	r3, r3, #1
 8000e36:	b292      	uxth	r2, r2
 8000e38:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8000e42:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8000e46:	780a      	ldrb	r2, [r1, #0]
 8000e48:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8000e4c:	065b      	lsls	r3, r3, #25
 8000e4e:	d50b      	bpl.n	8000e68 <USB_ActivateEndpoint+0xc4>
 8000e50:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8000e54:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000e58:	051b      	lsls	r3, r3, #20
 8000e5a:	0d1b      	lsrs	r3, r3, #20
 8000e5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e60:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000e64:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK); 
 8000e68:	780a      	ldrb	r2, [r1, #0]
 8000e6a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8000e6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000e72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000e76:	041b      	lsls	r3, r3, #16
 8000e78:	0c1b      	lsrs	r3, r3, #16
 8000e7a:	f083 0320 	eor.w	r3, r3, #32
 8000e7e:	e0fb      	b.n	8001078 <USB_ActivateEndpoint+0x2d4>
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8000e80:	f8b0 4050 	ldrh.w	r4, [r0, #80]	; 0x50
 8000e84:	085b      	lsrs	r3, r3, #1
 8000e86:	b2a4      	uxth	r4, r4
 8000e88:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8000e8c:	3404      	adds	r4, #4
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	f500 6280 	add.w	r2, r0, #1024	; 0x400
 8000e94:	f842 3014 	str.w	r3, [r2, r4, lsl #1]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8000e98:	f8b0 4050 	ldrh.w	r4, [r0, #80]	; 0x50
 8000e9c:	780b      	ldrb	r3, [r1, #0]
 8000e9e:	690d      	ldr	r5, [r1, #16]
 8000ea0:	b2a4      	uxth	r4, r4
 8000ea2:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 8000ea6:	2d3e      	cmp	r5, #62	; 0x3e
 8000ea8:	f104 0406 	add.w	r4, r4, #6
 8000eac:	d90b      	bls.n	8000ec6 <USB_ActivateEndpoint+0x122>
 8000eae:	f3c5 134f 	ubfx	r3, r5, #5, #16
 8000eb2:	06ed      	lsls	r5, r5, #27
 8000eb4:	bf04      	itt	eq
 8000eb6:	f103 33ff 	addeq.w	r3, r3, #4294967295
 8000eba:	b29b      	uxtheq	r3, r3
 8000ebc:	ea6f 63c3 	mvn.w	r3, r3, lsl #27
 8000ec0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000ec4:	e006      	b.n	8000ed4 <USB_ActivateEndpoint+0x130>
 8000ec6:	f3c5 034f 	ubfx	r3, r5, #1, #16
 8000eca:	07ed      	lsls	r5, r5, #31
 8000ecc:	bf44      	itt	mi
 8000ece:	3301      	addmi	r3, #1
 8000ed0:	b29b      	uxthmi	r3, r3
 8000ed2:	029b      	lsls	r3, r3, #10
 8000ed4:	b29b      	uxth	r3, r3
 8000ed6:	f842 3014 	str.w	r3, [r2, r4, lsl #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8000eda:	780a      	ldrb	r2, [r1, #0]
 8000edc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8000ee0:	045c      	lsls	r4, r3, #17
 8000ee2:	d50b      	bpl.n	8000efc <USB_ActivateEndpoint+0x158>
 8000ee4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8000ee8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000eec:	051b      	lsls	r3, r3, #20
 8000eee:	0d1b      	lsrs	r3, r3, #20
 8000ef0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ef4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ef8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8000efc:	780a      	ldrb	r2, [r1, #0]
 8000efe:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8000f02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000f0a:	041b      	lsls	r3, r3, #16
 8000f0c:	0c1b      	lsrs	r3, r3, #16
 8000f0e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8000f12:	e0b1      	b.n	8001078 <USB_ActivateEndpoint+0x2d4>
  }
  /*Double Buffer*/
  else
  {
    /*Set the endpoint as double buffered*/
    PCD_SET_EP_DBUF(USBx, ep->num);
 8000f14:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 8000f18:	f500 6480 	add.w	r4, r0, #1024	; 0x400
 8000f1c:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8000f20:	051b      	lsls	r3, r3, #20
 8000f22:	0d1b      	lsrs	r3, r3, #20
 8000f24:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8000f28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f2c:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
    /*Set buffer address for double buffered mode*/
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 8000f30:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000f34:	780a      	ldrb	r2, [r1, #0]
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000f3c:	88ca      	ldrh	r2, [r1, #6]
 8000f3e:	0852      	lsrs	r2, r2, #1
 8000f40:	0052      	lsls	r2, r2, #1
 8000f42:	f844 2013 	str.w	r2, [r4, r3, lsl #1]
 8000f46:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000f4a:	780a      	ldrb	r2, [r1, #0]
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000f52:	890a      	ldrh	r2, [r1, #8]
 8000f54:	3304      	adds	r3, #4
 8000f56:	0852      	lsrs	r2, r2, #1
 8000f58:	0052      	lsls	r2, r2, #1
 8000f5a:	f844 2013 	str.w	r2, [r4, r3, lsl #1]
    
    if (ep->is_in==0)
 8000f5e:	784b      	ldrb	r3, [r1, #1]
 8000f60:	780a      	ldrb	r2, [r1, #0]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d146      	bne.n	8000ff4 <USB_ActivateEndpoint+0x250>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8000f66:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8000f6a:	045b      	lsls	r3, r3, #17
 8000f6c:	d50b      	bpl.n	8000f86 <USB_ActivateEndpoint+0x1e2>
 8000f6e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8000f72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000f76:	051b      	lsls	r3, r3, #20
 8000f78:	0d1b      	lsrs	r3, r3, #20
 8000f7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f82:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8000f86:	780a      	ldrb	r2, [r1, #0]
 8000f88:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8000f8c:	065d      	lsls	r5, r3, #25
 8000f8e:	d50b      	bpl.n	8000fa8 <USB_ActivateEndpoint+0x204>
 8000f90:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8000f94:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000f98:	051b      	lsls	r3, r3, #20
 8000f9a:	0d1b      	lsrs	r3, r3, #20
 8000f9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fa0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000fa4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8000fa8:	780a      	ldrb	r2, [r1, #0]
 8000faa:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8000fae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000fb2:	051b      	lsls	r3, r3, #20
 8000fb4:	0d1b      	lsrs	r3, r3, #20
 8000fb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000fbe:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8000fc2:	780a      	ldrb	r2, [r1, #0]
 8000fc4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8000fc8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000fcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000fd0:	041b      	lsls	r3, r3, #16
 8000fd2:	0c1b      	lsrs	r3, r3, #16
 8000fd4:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8000fd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fe0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8000fe4:	780a      	ldrb	r2, [r1, #0]
 8000fe6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8000fea:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000fee:	051b      	lsls	r3, r3, #20
 8000ff0:	0d1b      	lsrs	r3, r3, #20
 8000ff2:	e041      	b.n	8001078 <USB_ActivateEndpoint+0x2d4>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8000ff4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8000ff8:	045c      	lsls	r4, r3, #17
 8000ffa:	d50b      	bpl.n	8001014 <USB_ActivateEndpoint+0x270>
 8000ffc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001000:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001004:	051b      	lsls	r3, r3, #20
 8001006:	0d1b      	lsrs	r3, r3, #20
 8001008:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800100c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001010:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001014:	780a      	ldrb	r2, [r1, #0]
 8001016:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800101a:	065b      	lsls	r3, r3, #25
 800101c:	d50b      	bpl.n	8001036 <USB_ActivateEndpoint+0x292>
 800101e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001022:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001026:	051b      	lsls	r3, r3, #20
 8001028:	0d1b      	lsrs	r3, r3, #20
 800102a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800102e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001032:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8001036:	780a      	ldrb	r2, [r1, #0]
 8001038:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800103c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001040:	051b      	lsls	r3, r3, #20
 8001042:	0d1b      	lsrs	r3, r3, #20
 8001044:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001048:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800104c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001050:	780a      	ldrb	r2, [r1, #0]
 8001052:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001056:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800105a:	051b      	lsls	r3, r3, #20
 800105c:	0d1b      	lsrs	r3, r3, #20
 800105e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001062:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001066:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800106a:	780a      	ldrb	r2, [r1, #0]
 800106c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001070:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001074:	049b      	lsls	r3, r3, #18
 8001076:	0c9b      	lsrs	r3, r3, #18
 8001078:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800107c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001080:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }
  
  return HAL_OK;
}
 8001084:	2000      	movs	r0, #0
 8001086:	bd30      	pop	{r4, r5, pc}

08001088 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8001088:	b510      	push	{r4, lr}
  if (ep->doublebuffer == 0) 
 800108a:	7a8c      	ldrb	r4, [r1, #10]
 800108c:	784a      	ldrb	r2, [r1, #1]
 800108e:	780b      	ldrb	r3, [r1, #0]
 8001090:	bb1c      	cbnz	r4, 80010da <USB_DeactivateEndpoint+0x52>
  {
    if (ep->is_in)
 8001092:	b182      	cbz	r2, 80010b6 <USB_DeactivateEndpoint+0x2e>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001094:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001098:	0652      	lsls	r2, r2, #25
 800109a:	d55b      	bpl.n	8001154 <USB_DeactivateEndpoint+0xcc>
 800109c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80010a0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80010a4:	0512      	lsls	r2, r2, #20
 80010a6:	0d12      	lsrs	r2, r2, #20
 80010a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80010ac:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80010b0:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
 80010b4:	e04e      	b.n	8001154 <USB_DeactivateEndpoint+0xcc>
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS); 
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80010b6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80010ba:	0454      	lsls	r4, r2, #17
 80010bc:	f140 808d 	bpl.w	80011da <USB_DeactivateEndpoint+0x152>
 80010c0:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80010c4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80010c8:	0512      	lsls	r2, r2, #20
 80010ca:	0d12      	lsrs	r2, r2, #20
 80010cc:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80010d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80010d4:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
 80010d8:	e07f      	b.n	80011da <USB_DeactivateEndpoint+0x152>
    }
  }
  /*Double Buffer*/
  else
  { 
    if (ep->is_in==0)
 80010da:	2a00      	cmp	r2, #0
 80010dc:	d142      	bne.n	8001164 <USB_DeactivateEndpoint+0xdc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80010de:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80010e2:	0452      	lsls	r2, r2, #17
 80010e4:	d50b      	bpl.n	80010fe <USB_DeactivateEndpoint+0x76>
 80010e6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80010ea:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80010ee:	0512      	lsls	r2, r2, #20
 80010f0:	0d12      	lsrs	r2, r2, #20
 80010f2:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80010f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80010fa:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80010fe:	780a      	ldrb	r2, [r1, #0]
 8001100:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001104:	065c      	lsls	r4, r3, #25
 8001106:	d50b      	bpl.n	8001120 <USB_DeactivateEndpoint+0x98>
 8001108:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800110c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001110:	051b      	lsls	r3, r3, #20
 8001112:	0d1b      	lsrs	r3, r3, #20
 8001114:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001118:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800111c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8001120:	780a      	ldrb	r2, [r1, #0]
 8001122:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001126:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800112a:	051b      	lsls	r3, r3, #20
 800112c:	0d1b      	lsrs	r3, r3, #20
 800112e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001132:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001136:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800113a:	780a      	ldrb	r2, [r1, #0]
 800113c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001140:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001144:	049b      	lsls	r3, r3, #18
 8001146:	0c9b      	lsrs	r3, r3, #18
 8001148:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800114c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001150:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001154:	780a      	ldrb	r2, [r1, #0]
 8001156:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800115a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800115e:	051b      	lsls	r3, r3, #20
 8001160:	0d1b      	lsrs	r3, r3, #20
 8001162:	e041      	b.n	80011e8 <USB_DeactivateEndpoint+0x160>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001164:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001168:	0452      	lsls	r2, r2, #17
 800116a:	d50b      	bpl.n	8001184 <USB_DeactivateEndpoint+0xfc>
 800116c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001170:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001174:	0512      	lsls	r2, r2, #20
 8001176:	0d12      	lsrs	r2, r2, #20
 8001178:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800117c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001180:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001184:	780a      	ldrb	r2, [r1, #0]
 8001186:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800118a:	065b      	lsls	r3, r3, #25
 800118c:	d50b      	bpl.n	80011a6 <USB_DeactivateEndpoint+0x11e>
 800118e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001192:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001196:	051b      	lsls	r3, r3, #20
 8001198:	0d1b      	lsrs	r3, r3, #20
 800119a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800119e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80011a2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 80011a6:	780a      	ldrb	r2, [r1, #0]
 80011a8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80011ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80011b0:	051b      	lsls	r3, r3, #20
 80011b2:	0d1b      	lsrs	r3, r3, #20
 80011b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011bc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80011c0:	780a      	ldrb	r2, [r1, #0]
 80011c2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80011c6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80011ca:	051b      	lsls	r3, r3, #20
 80011cc:	0d1b      	lsrs	r3, r3, #20
 80011ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011d6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80011da:	780a      	ldrb	r2, [r1, #0]
 80011dc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80011e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80011e4:	049b      	lsls	r3, r3, #18
 80011e6:	0c9b      	lsrs	r3, r3, #18
 80011e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011f0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }
  
  return HAL_OK;
}
 80011f4:	2000      	movs	r0, #0
 80011f6:	bd10      	pop	{r4, pc}

080011f8 <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
  if (ep->num == 0)
 80011f8:	780a      	ldrb	r2, [r1, #0]
 80011fa:	b97a      	cbnz	r2, 800121c <USB_EPSetStall+0x24>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(USBx, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 80011fc:	8803      	ldrh	r3, [r0, #0]
 80011fe:	b29b      	uxth	r3, r3
 8001200:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001204:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001208:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800120c:	f083 0310 	eor.w	r3, r3, #16
 8001210:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001214:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001218:	8003      	strh	r3, [r0, #0]
 800121a:	e01c      	b.n	8001256 <USB_EPSetStall+0x5e>
  }
  else
  {
    if (ep->is_in)
 800121c:	784b      	ldrb	r3, [r1, #1]
 800121e:	b153      	cbz	r3, 8001236 <USB_EPSetStall+0x3e>
    {
      PCD_SET_EP_TX_STATUS(USBx, ep->num , USB_EP_TX_STALL); 
 8001220:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001224:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001228:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800122c:	041b      	lsls	r3, r3, #16
 800122e:	0c1b      	lsrs	r3, r3, #16
 8001230:	f083 0310 	eor.w	r3, r3, #16
 8001234:	e009      	b.n	800124a <USB_EPSetStall+0x52>
    }
    else
    {
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
 8001236:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800123a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800123e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001242:	041b      	lsls	r3, r3, #16
 8001244:	0c1b      	lsrs	r3, r3, #16
 8001246:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800124a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800124e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001252:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }
  return HAL_OK;
}
 8001256:	2000      	movs	r0, #0
 8001258:	4770      	bx	lr

0800125a <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in)
 800125a:	784b      	ldrb	r3, [r1, #1]
 800125c:	780a      	ldrb	r2, [r1, #0]
 800125e:	b1db      	cbz	r3, 8001298 <USB_EPClearStall+0x3e>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001260:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001264:	065b      	lsls	r3, r3, #25
 8001266:	d50b      	bpl.n	8001280 <USB_EPClearStall+0x26>
 8001268:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800126c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001270:	051b      	lsls	r3, r3, #20
 8001272:	0d1b      	lsrs	r3, r3, #20
 8001274:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001278:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800127c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8001280:	780a      	ldrb	r2, [r1, #0]
 8001282:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001286:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800128a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800128e:	041b      	lsls	r3, r3, #16
 8001290:	0c1b      	lsrs	r3, r3, #16
 8001292:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8001296:	e01a      	b.n	80012ce <USB_EPClearStall+0x74>
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001298:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800129c:	045b      	lsls	r3, r3, #17
 800129e:	d50b      	bpl.n	80012b8 <USB_EPClearStall+0x5e>
 80012a0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80012a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80012a8:	051b      	lsls	r3, r3, #20
 80012aa:	0d1b      	lsrs	r3, r3, #20
 80012ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012b4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80012b8:	780a      	ldrb	r2, [r1, #0]
 80012ba:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80012be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80012c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80012c6:	041b      	lsls	r3, r3, #16
 80012c8:	0c1b      	lsrs	r3, r3, #16
 80012ca:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80012ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012d6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }
  return HAL_OK;
}
 80012da:	2000      	movs	r0, #0
 80012dc:	4770      	bx	lr

080012de <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_TypeDef *USBx, uint8_t address)
{
  if(address == 0) 
 80012de:	b911      	cbnz	r1, 80012e6 <USB_SetDevAddress+0x8>
  {
   /* set device address and enable function */
   USBx->DADDR = USB_DADDR_EF;
 80012e0:	2380      	movs	r3, #128	; 0x80
 80012e2:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }
  
  return HAL_OK;
}
 80012e6:	2000      	movs	r0, #0
 80012e8:	4770      	bx	lr

080012ea <USB_DevConnect>:
 80012ea:	2000      	movs	r0, #0
 80012ec:	4770      	bx	lr

080012ee <USB_DevDisconnect>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80012ee:	2000      	movs	r0, #0
 80012f0:	4770      	bx	lr

080012f2 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_TypeDef *USBx)
{
  uint32_t tmpreg = 0;
  
  tmpreg = USBx->ISTR;
 80012f2:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 80012f6:	b280      	uxth	r0, r0
 80012f8:	4770      	bx	lr

080012fa <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80012fa:	2000      	movs	r0, #0
 80012fc:	4770      	bx	lr

080012fe <USB_WritePMA>:
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 80012fe:	3301      	adds	r3, #1
  uint32_t index = 0, temp1 = 0, temp2 = 0;
  uint16_t *pdwVal = NULL;
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8001300:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8001304:	b510      	push	{r4, lr}
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 8001306:	105b      	asrs	r3, r3, #1
  uint32_t index = 0, temp1 = 0, temp2 = 0;
  uint16_t *pdwVal = NULL;
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8001308:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (index = nbytes; index != 0; index--)
 800130c:	2400      	movs	r4, #0
 800130e:	42a3      	cmp	r3, r4
 8001310:	d005      	beq.n	800131e <USB_WritePMA+0x20>
 8001312:	f831 0b02 	ldrh.w	r0, [r1], #2
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
 8001316:	f822 0024 	strh.w	r0, [r2, r4, lsl #2]
 800131a:	3401      	adds	r4, #1
 800131c:	e7f7      	b.n	800130e <USB_WritePMA+0x10>
    pdwVal++;
    pbUsrBuf++;
  }
}
 800131e:	bd10      	pop	{r4, pc}

08001320 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
 8001320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001322:	4604      	mov	r4, r0
  uint16_t pmabuffer = 0;
  uint32_t len = ep->xfer_len;
  
  /* IN endpoint */
  if (ep->is_in == 1)
 8001324:	7848      	ldrb	r0, [r1, #1]
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
 8001326:	460e      	mov	r6, r1
  uint16_t pmabuffer = 0;
  uint32_t len = ep->xfer_len;
  
  /* IN endpoint */
  if (ep->is_in == 1)
 8001328:	2801      	cmp	r0, #1
 800132a:	698b      	ldr	r3, [r1, #24]
 800132c:	690a      	ldr	r2, [r1, #16]
 800132e:	7a8f      	ldrb	r7, [r1, #10]
 8001330:	d157      	bne.n	80013e2 <USB_EPStartXfer+0xc2>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8001332:	461d      	mov	r5, r3
 8001334:	4293      	cmp	r3, r2
    {
      len=ep->maxpacket;
      ep->xfer_len-=len; 
 8001336:	bf83      	ittte	hi
 8001338:	1a9d      	subhi	r5, r3, r2
 800133a:	618d      	strhi	r5, [r1, #24]
 800133c:	4615      	movhi	r5, r2
    }
    else
    {  
      len=ep->xfer_len;
      ep->xfer_len =0;
 800133e:	2300      	movls	r3, #0
 8001340:	bf98      	it	ls
 8001342:	618b      	strls	r3, [r1, #24]
 8001344:	b2ab      	uxth	r3, r5
    }
    
    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0) 
 8001346:	b97f      	cbnz	r7, 8001368 <USB_EPStartXfer+0x48>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, len);
 8001348:	888a      	ldrh	r2, [r1, #4]
 800134a:	4620      	mov	r0, r4
 800134c:	6949      	ldr	r1, [r1, #20]
 800134e:	f7ff ffd6 	bl	80012fe <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8001352:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 8001356:	7832      	ldrb	r2, [r6, #0]
 8001358:	b29b      	uxth	r3, r3
 800135a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800135e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8001362:	f8c3 5404 	str.w	r5, [r3, #1028]	; 0x404
 8001366:	e030      	b.n	80013ca <USB_EPStartXfer+0xaa>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 8001368:	780a      	ldrb	r2, [r1, #0]
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
        pmabuffer = ep->pmaaddr0;
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 800136a:	4620      	mov	r0, r4
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
    }
    else
    {
      /* Write the data to the USB endpoint */
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 800136c:	f834 1022 	ldrh.w	r1, [r4, r2, lsl #2]
 8001370:	00d2      	lsls	r2, r2, #3
 8001372:	f011 0f40 	tst.w	r1, #64	; 0x40
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8001376:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 800137a:	b289      	uxth	r1, r1
 800137c:	440a      	add	r2, r1
 800137e:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8001382:	f8c2 5404 	str.w	r5, [r2, #1028]	; 0x404
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
        pmabuffer = ep->pmaaddr0;
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 8001386:	6971      	ldr	r1, [r6, #20]
      /* Write the data to the USB endpoint */
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
        pmabuffer = ep->pmaaddr1;
 8001388:	bf14      	ite	ne
 800138a:	8932      	ldrhne	r2, [r6, #8]
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
        pmabuffer = ep->pmaaddr0;
 800138c:	88f2      	ldrheq	r2, [r6, #6]
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 800138e:	f7ff ffb6 	bl	80012fe <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8001392:	7873      	ldrb	r3, [r6, #1]
 8001394:	7832      	ldrb	r2, [r6, #0]
 8001396:	b953      	cbnz	r3, 80013ae <USB_EPStartXfer+0x8e>
 8001398:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 800139c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80013a0:	051b      	lsls	r3, r3, #20
 80013a2:	0d1b      	lsrs	r3, r3, #20
 80013a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013a8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80013ac:	e00b      	b.n	80013c6 <USB_EPStartXfer+0xa6>
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d10b      	bne.n	80013ca <USB_EPStartXfer+0xaa>
 80013b2:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 80013b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80013ba:	051b      	lsls	r3, r3, #20
 80013bc:	0d1b      	lsrs	r3, r3, #20
 80013be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013c6:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
    }
    
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80013ca:	7832      	ldrb	r2, [r6, #0]
 80013cc:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 80013d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80013d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80013d8:	041b      	lsls	r3, r3, #16
 80013da:	0c1b      	lsrs	r3, r3, #16
 80013dc:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 80013e0:	e066      	b.n	80014b0 <USB_EPStartXfer+0x190>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80013e2:	4293      	cmp	r3, r2
    {
      len=ep->maxpacket;
      ep->xfer_len-=len; 
 80013e4:	bf8b      	itete	hi
 80013e6:	1a9b      	subhi	r3, r3, r2
    }
    else
    {
      len=ep->xfer_len;
      ep->xfer_len =0;
 80013e8:	2200      	movls	r2, #0
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
    {
      len=ep->maxpacket;
      ep->xfer_len-=len; 
 80013ea:	618b      	strhi	r3, [r1, #24]
    }
    else
    {
      len=ep->xfer_len;
      ep->xfer_len =0;
 80013ec:	618a      	strls	r2, [r1, #24]
 80013ee:	bf88      	it	hi
 80013f0:	4613      	movhi	r3, r2
 80013f2:	7809      	ldrb	r1, [r1, #0]
    }
    
    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0) 
 80013f4:	b327      	cbz	r7, 8001440 <USB_EPStartXfer+0x120>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80013f6:	bb00      	cbnz	r0, 800143a <USB_EPStartXfer+0x11a>
 80013f8:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 80013fc:	2b3e      	cmp	r3, #62	; 0x3e
 80013fe:	b292      	uxth	r2, r2
 8001400:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8001404:	f101 0102 	add.w	r1, r1, #2
 8001408:	f504 6080 	add.w	r0, r4, #1024	; 0x400
 800140c:	d90b      	bls.n	8001426 <USB_EPStartXfer+0x106>
 800140e:	f3c3 124f 	ubfx	r2, r3, #5, #16
 8001412:	06dd      	lsls	r5, r3, #27
 8001414:	bf04      	itt	eq
 8001416:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800141a:	b292      	uxtheq	r2, r2
 800141c:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8001420:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8001424:	e006      	b.n	8001434 <USB_EPStartXfer+0x114>
 8001426:	f3c3 024f 	ubfx	r2, r3, #1, #16
 800142a:	07df      	lsls	r7, r3, #31
 800142c:	bf44      	itt	mi
 800142e:	3201      	addmi	r2, #1
 8001430:	b292      	uxthmi	r2, r2
 8001432:	0292      	lsls	r2, r2, #10
 8001434:	b292      	uxth	r2, r2
 8001436:	f840 2011 	str.w	r2, [r0, r1, lsl #1]
 800143a:	7872      	ldrb	r2, [r6, #1]
 800143c:	7831      	ldrb	r1, [r6, #0]
 800143e:	bb0a      	cbnz	r2, 8001484 <USB_EPStartXfer+0x164>
 8001440:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 8001444:	2b3e      	cmp	r3, #62	; 0x3e
 8001446:	b292      	uxth	r2, r2
 8001448:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 800144c:	f101 0106 	add.w	r1, r1, #6
 8001450:	f504 6080 	add.w	r0, r4, #1024	; 0x400
 8001454:	d90b      	bls.n	800146e <USB_EPStartXfer+0x14e>
 8001456:	f3c3 124f 	ubfx	r2, r3, #5, #16
 800145a:	06dd      	lsls	r5, r3, #27
 800145c:	bf04      	itt	eq
 800145e:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8001462:	b292      	uxtheq	r2, r2
 8001464:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8001468:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800146c:	e006      	b.n	800147c <USB_EPStartXfer+0x15c>
 800146e:	f3c3 024f 	ubfx	r2, r3, #1, #16
 8001472:	07db      	lsls	r3, r3, #31
 8001474:	bf44      	itt	mi
 8001476:	3201      	addmi	r2, #1
 8001478:	b292      	uxthmi	r2, r2
 800147a:	0292      	lsls	r2, r2, #10
 800147c:	b292      	uxth	r2, r2
 800147e:	f840 2011 	str.w	r2, [r0, r1, lsl #1]
 8001482:	e00a      	b.n	800149a <USB_EPStartXfer+0x17a>
 8001484:	2a01      	cmp	r2, #1
 8001486:	d108      	bne.n	800149a <USB_EPStartXfer+0x17a>
 8001488:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 800148c:	b292      	uxth	r2, r2
 800148e:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8001492:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8001496:	f8c1 3404 	str.w	r3, [r1, #1028]	; 0x404
    }
    
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800149a:	7832      	ldrb	r2, [r6, #0]
 800149c:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 80014a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80014a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80014a8:	041b      	lsls	r3, r3, #16
 80014aa:	0c1b      	lsrs	r3, r3, #16
 80014ac:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80014b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014b8:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
  }
  
  return HAL_OK;
}
 80014bc:	2000      	movs	r0, #0
 80014be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080014c0 <USB_ReadPMA>:
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 80014c0:	3301      	adds	r3, #1
  uint32_t index = 0;
  uint32_t *pdwVal = NULL;
  
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 80014c2:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80014c6:	b510      	push	{r4, lr}
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 80014c8:	105b      	asrs	r3, r3, #1
  uint32_t index = 0;
  uint32_t *pdwVal = NULL;
  
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 80014ca:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (index = nbytes; index != 0; index--)
 80014ce:	2400      	movs	r4, #0
 80014d0:	42a3      	cmp	r3, r4
 80014d2:	d005      	beq.n	80014e0 <USB_ReadPMA+0x20>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 80014d4:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 80014d8:	f821 0014 	strh.w	r0, [r1, r4, lsl #1]
 80014dc:	3401      	adds	r4, #1
 80014de:	e7f7      	b.n	80014d0 <USB_ReadPMA+0x10>
    pbUsrBuf++;
  }
}
 80014e0:	bd10      	pop	{r4, pc}
	...

080014e4 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80014e4:	6803      	ldr	r3, [r0, #0]
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80014e6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80014ea:	07dc      	lsls	r4, r3, #31
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80014ec:	4605      	mov	r5, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80014ee:	d564      	bpl.n	80015ba <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80014f0:	4c3e      	ldr	r4, [pc, #248]	; (80015ec <HAL_RCCEx_PeriphCLKConfig+0x108>)
    
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 80014f2:	4e3f      	ldr	r6, [pc, #252]	; (80015f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80014f4:	69e3      	ldr	r3, [r4, #28]
 80014f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014fa:	61e3      	str	r3, [r4, #28]
 80014fc:	69e3      	ldr	r3, [r4, #28]
 80014fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001502:	9301      	str	r3, [sp, #4]
 8001504:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8001506:	6833      	ldr	r3, [r6, #0]
 8001508:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800150c:	6033      	str	r3, [r6, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800150e:	f001 f943 	bl	8002798 <HAL_GetTick>
 8001512:	4607      	mov	r7, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001514:	6833      	ldr	r3, [r6, #0]
 8001516:	05d8      	lsls	r0, r3, #23
 8001518:	d406      	bmi.n	8001528 <HAL_RCCEx_PeriphCLKConfig+0x44>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800151a:	f001 f93d 	bl	8002798 <HAL_GetTick>
 800151e:	1bc0      	subs	r0, r0, r7
 8001520:	2864      	cmp	r0, #100	; 0x64
 8001522:	d9f7      	bls.n	8001514 <HAL_RCCEx_PeriphCLKConfig+0x30>
      {
        return HAL_TIMEOUT;
 8001524:	2003      	movs	r0, #3
 8001526:	e05d      	b.n	80015e4 <HAL_RCCEx_PeriphCLKConfig+0x100>
      }      
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001528:	6a23      	ldr	r3, [r4, #32]
 800152a:	4830      	ldr	r0, [pc, #192]	; (80015ec <HAL_RCCEx_PeriphCLKConfig+0x108>)
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800152c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001530:	d106      	bne.n	8001540 <HAL_RCCEx_PeriphCLKConfig+0x5c>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001532:	6a23      	ldr	r3, [r4, #32]
 8001534:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001538:	686b      	ldr	r3, [r5, #4]
 800153a:	4313      	orrs	r3, r2
 800153c:	6223      	str	r3, [r4, #32]
 800153e:	e03c      	b.n	80015ba <HAL_RCCEx_PeriphCLKConfig+0xd6>
      }      
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001540:	686a      	ldr	r2, [r5, #4]
 8001542:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001546:	4293      	cmp	r3, r2
 8001548:	d0f3      	beq.n	8001532 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800154a:	6a01      	ldr	r1, [r0, #32]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800154c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001550:	f421 7740 	bic.w	r7, r1, #768	; 0x300
 8001554:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001558:	fab2 f282 	clz	r2, r2
 800155c:	4e25      	ldr	r6, [pc, #148]	; (80015f4 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 800155e:	f04f 0e01 	mov.w	lr, #1
 8001562:	f846 e022 	str.w	lr, [r6, r2, lsl #2]
 8001566:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 800156a:	fab3 f383 	clz	r3, r3
 800156e:	2200      	movs	r2, #0
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001570:	07c9      	lsls	r1, r1, #31
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001572:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001576:	6207      	str	r7, [r0, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001578:	d5db      	bpl.n	8001532 <HAL_RCCEx_PeriphCLKConfig+0x4e>
      {
        /* Get timeout */
        tickstart = HAL_GetTick();
 800157a:	f001 f90d 	bl	8002798 <HAL_GetTick>
 800157e:	2602      	movs	r6, #2
 8001580:	4680      	mov	r8, r0
 8001582:	4637      	mov	r7, r6
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001584:	f241 3988 	movw	r9, #5000	; 0x1388
 8001588:	fa96 f3a6 	rbit	r3, r6
 800158c:	fa96 f3a6 	rbit	r3, r6
      {
        /* Get timeout */
        tickstart = HAL_GetTick();
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001590:	b10b      	cbz	r3, 8001596 <HAL_RCCEx_PeriphCLKConfig+0xb2>
 8001592:	6a22      	ldr	r2, [r4, #32]
 8001594:	e000      	b.n	8001598 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8001596:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001598:	fa97 f3a7 	rbit	r3, r7
 800159c:	fab3 f383 	clz	r3, r3
 80015a0:	f003 031f 	and.w	r3, r3, #31
 80015a4:	fa22 f303 	lsr.w	r3, r2, r3
 80015a8:	07da      	lsls	r2, r3, #31
 80015aa:	d4c2      	bmi.n	8001532 <HAL_RCCEx_PeriphCLKConfig+0x4e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015ac:	f001 f8f4 	bl	8002798 <HAL_GetTick>
 80015b0:	ebc8 0000 	rsb	r0, r8, r0
 80015b4:	4548      	cmp	r0, r9
 80015b6:	d9e7      	bls.n	8001588 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80015b8:	e7b4      	b.n	8001524 <HAL_RCCEx_PeriphCLKConfig+0x40>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80015ba:	6828      	ldr	r0, [r5, #0]
 80015bc:	0783      	lsls	r3, r0, #30
 80015be:	d506      	bpl.n	80015ce <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80015c0:	490a      	ldr	r1, [pc, #40]	; (80015ec <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80015c2:	684b      	ldr	r3, [r1, #4]
 80015c4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80015c8:	68ab      	ldr	r3, [r5, #8]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80015ce:	f010 0010 	ands.w	r0, r0, #16
 80015d2:	d007      	beq.n	80015e4 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80015d4:	4905      	ldr	r1, [pc, #20]	; (80015ec <HAL_RCCEx_PeriphCLKConfig+0x108>)
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80015d6:	2000      	movs	r0, #0
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80015d8:	684b      	ldr	r3, [r1, #4]
 80015da:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80015de:	68eb      	ldr	r3, [r5, #12]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
}
 80015e4:	b003      	add	sp, #12
 80015e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80015ea:	bf00      	nop
 80015ec:	40021000 	.word	0x40021000
 80015f0:	40007000 	.word	0x40007000
 80015f4:	42420400 	.word	0x42420400

080015f8 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015f8:	6803      	ldr	r3, [r0, #0]
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015fa:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015fe:	07dc      	lsls	r4, r3, #31
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001600:	4605      	mov	r5, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001602:	d403      	bmi.n	800160c <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001604:	682b      	ldr	r3, [r5, #0]
 8001606:	0798      	lsls	r0, r3, #30
 8001608:	d473      	bmi.n	80016f2 <HAL_RCC_OscConfig+0xfa>
 800160a:	e0f2      	b.n	80017f2 <HAL_RCC_OscConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800160c:	4cb9      	ldr	r4, [pc, #740]	; (80018f4 <HAL_RCC_OscConfig+0x2fc>)
 800160e:	6863      	ldr	r3, [r4, #4]
 8001610:	f003 030c 	and.w	r3, r3, #12
 8001614:	2b04      	cmp	r3, #4
 8001616:	d007      	beq.n	8001628 <HAL_RCC_OscConfig+0x30>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001618:	6863      	ldr	r3, [r4, #4]
 800161a:	f003 030c 	and.w	r3, r3, #12
 800161e:	2b08      	cmp	r3, #8
 8001620:	d116      	bne.n	8001650 <HAL_RCC_OscConfig+0x58>
 8001622:	6863      	ldr	r3, [r4, #4]
 8001624:	03d9      	lsls	r1, r3, #15
 8001626:	d513      	bpl.n	8001650 <HAL_RCC_OscConfig+0x58>
 8001628:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800162c:	fa93 f2a3 	rbit	r2, r3
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001630:	6822      	ldr	r2, [r4, #0]
 8001632:	fa93 f3a3 	rbit	r3, r3
 8001636:	fab3 f383 	clz	r3, r3
 800163a:	f003 031f 	and.w	r3, r3, #31
 800163e:	fa22 f303 	lsr.w	r3, r2, r3
 8001642:	07da      	lsls	r2, r3, #31
 8001644:	d5de      	bpl.n	8001604 <HAL_RCC_OscConfig+0xc>
 8001646:	686b      	ldr	r3, [r5, #4]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d1db      	bne.n	8001604 <HAL_RCC_OscConfig+0xc>
      {
        return HAL_ERROR;
 800164c:	2001      	movs	r0, #1
 800164e:	e22d      	b.n	8001aac <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001650:	686b      	ldr	r3, [r5, #4]
 8001652:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001656:	d015      	beq.n	8001684 <HAL_RCC_OscConfig+0x8c>
 8001658:	b96b      	cbnz	r3, 8001676 <HAL_RCC_OscConfig+0x7e>
 800165a:	6823      	ldr	r3, [r4, #0]
 800165c:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8001660:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001664:	6023      	str	r3, [r4, #0]
 8001666:	6823      	ldr	r3, [r4, #0]
 8001668:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800166c:	6023      	str	r3, [r4, #0]
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800166e:	f001 f893 	bl	8002798 <HAL_GetTick>
 8001672:	4607      	mov	r7, r0
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001674:	e02f      	b.n	80016d6 <HAL_RCC_OscConfig+0xde>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001676:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800167a:	6823      	ldr	r3, [r4, #0]
 800167c:	d106      	bne.n	800168c <HAL_RCC_OscConfig+0x94>
 800167e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001682:	6023      	str	r3, [r4, #0]
 8001684:	6823      	ldr	r3, [r4, #0]
 8001686:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800168a:	e005      	b.n	8001698 <HAL_RCC_OscConfig+0xa0>
 800168c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001690:	6023      	str	r3, [r4, #0]
 8001692:	6823      	ldr	r3, [r4, #0]
 8001694:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001698:	6023      	str	r3, [r4, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800169a:	f001 f87d 	bl	8002798 <HAL_GetTick>
 800169e:	4607      	mov	r7, r0
 80016a0:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 80016a4:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016a8:	6822      	ldr	r2, [r4, #0]
 80016aa:	fa96 f3a6 	rbit	r3, r6
 80016ae:	fab3 f383 	clz	r3, r3
 80016b2:	f003 031f 	and.w	r3, r3, #31
 80016b6:	fa22 f303 	lsr.w	r3, r2, r3
 80016ba:	07db      	lsls	r3, r3, #31
 80016bc:	d4a2      	bmi.n	8001604 <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016be:	f001 f86b 	bl	8002798 <HAL_GetTick>
 80016c2:	1bc0      	subs	r0, r0, r7
 80016c4:	2864      	cmp	r0, #100	; 0x64
 80016c6:	d9ed      	bls.n	80016a4 <HAL_RCC_OscConfig+0xac>
          {
            return HAL_TIMEOUT;
 80016c8:	2003      	movs	r0, #3
 80016ca:	e1ef      	b.n	8001aac <HAL_RCC_OscConfig+0x4b4>
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016cc:	f001 f864 	bl	8002798 <HAL_GetTick>
 80016d0:	1bc0      	subs	r0, r0, r7
 80016d2:	2864      	cmp	r0, #100	; 0x64
 80016d4:	d8f8      	bhi.n	80016c8 <HAL_RCC_OscConfig+0xd0>
 80016d6:	fa96 f3a6 	rbit	r3, r6
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016da:	6822      	ldr	r2, [r4, #0]
 80016dc:	fa96 f3a6 	rbit	r3, r6
 80016e0:	fab3 f383 	clz	r3, r3
 80016e4:	f003 031f 	and.w	r3, r3, #31
 80016e8:	fa22 f303 	lsr.w	r3, r2, r3
 80016ec:	07d8      	lsls	r0, r3, #31
 80016ee:	d4ed      	bmi.n	80016cc <HAL_RCC_OscConfig+0xd4>
 80016f0:	e788      	b.n	8001604 <HAL_RCC_OscConfig+0xc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80016f2:	4c80      	ldr	r4, [pc, #512]	; (80018f4 <HAL_RCC_OscConfig+0x2fc>)
 80016f4:	6863      	ldr	r3, [r4, #4]
 80016f6:	f013 0f0c 	tst.w	r3, #12
 80016fa:	d007      	beq.n	800170c <HAL_RCC_OscConfig+0x114>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80016fc:	6863      	ldr	r3, [r4, #4]
 80016fe:	f003 030c 	and.w	r3, r3, #12
 8001702:	2b08      	cmp	r3, #8
 8001704:	d121      	bne.n	800174a <HAL_RCC_OscConfig+0x152>
 8001706:	6863      	ldr	r3, [r4, #4]
 8001708:	03d9      	lsls	r1, r3, #15
 800170a:	d41e      	bmi.n	800174a <HAL_RCC_OscConfig+0x152>
 800170c:	2302      	movs	r3, #2
 800170e:	fa93 f2a3 	rbit	r2, r3
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001712:	6822      	ldr	r2, [r4, #0]
 8001714:	fa93 f3a3 	rbit	r3, r3
 8001718:	fab3 f383 	clz	r3, r3
 800171c:	f003 031f 	and.w	r3, r3, #31
 8001720:	fa22 f303 	lsr.w	r3, r2, r3
 8001724:	07da      	lsls	r2, r3, #31
 8001726:	d502      	bpl.n	800172e <HAL_RCC_OscConfig+0x136>
 8001728:	692b      	ldr	r3, [r5, #16]
 800172a:	2b01      	cmp	r3, #1
 800172c:	d18e      	bne.n	800164c <HAL_RCC_OscConfig+0x54>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800172e:	6823      	ldr	r3, [r4, #0]
 8001730:	22f8      	movs	r2, #248	; 0xf8
 8001732:	fa92 f2a2 	rbit	r2, r2
 8001736:	fab2 f282 	clz	r2, r2
 800173a:	6969      	ldr	r1, [r5, #20]
 800173c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001740:	fa01 f202 	lsl.w	r2, r1, r2
 8001744:	4313      	orrs	r3, r2
 8001746:	6023      	str	r3, [r4, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001748:	e053      	b.n	80017f2 <HAL_RCC_OscConfig+0x1fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800174a:	692a      	ldr	r2, [r5, #16]
 800174c:	2301      	movs	r3, #1
 800174e:	b37a      	cbz	r2, 80017b0 <HAL_RCC_OscConfig+0x1b8>
 8001750:	fa93 f2a3 	rbit	r2, r3
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001754:	fab2 f282 	clz	r2, r2
 8001758:	0092      	lsls	r2, r2, #2
 800175a:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
 800175e:	f502 0284 	add.w	r2, r2, #4325376	; 0x420000
 8001762:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001764:	f001 f818 	bl	8002798 <HAL_GetTick>
 8001768:	4607      	mov	r7, r0
 800176a:	2602      	movs	r6, #2
 800176c:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001770:	4860      	ldr	r0, [pc, #384]	; (80018f4 <HAL_RCC_OscConfig+0x2fc>)
 8001772:	6822      	ldr	r2, [r4, #0]
 8001774:	fa96 f3a6 	rbit	r3, r6
 8001778:	fab3 f383 	clz	r3, r3
 800177c:	f003 031f 	and.w	r3, r3, #31
 8001780:	fa22 f303 	lsr.w	r3, r2, r3
 8001784:	07db      	lsls	r3, r3, #31
 8001786:	d405      	bmi.n	8001794 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001788:	f001 f806 	bl	8002798 <HAL_GetTick>
 800178c:	1bc0      	subs	r0, r0, r7
 800178e:	2802      	cmp	r0, #2
 8001790:	d9ec      	bls.n	800176c <HAL_RCC_OscConfig+0x174>
 8001792:	e799      	b.n	80016c8 <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001794:	6803      	ldr	r3, [r0, #0]
 8001796:	22f8      	movs	r2, #248	; 0xf8
 8001798:	fa92 f2a2 	rbit	r2, r2
 800179c:	fab2 f282 	clz	r2, r2
 80017a0:	6969      	ldr	r1, [r5, #20]
 80017a2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80017a6:	fa01 f202 	lsl.w	r2, r1, r2
 80017aa:	4313      	orrs	r3, r2
 80017ac:	6003      	str	r3, [r0, #0]
 80017ae:	e020      	b.n	80017f2 <HAL_RCC_OscConfig+0x1fa>
 80017b0:	fa93 f3a3 	rbit	r3, r3
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017b4:	fab3 f383 	clz	r3, r3
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80017be:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80017c2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c4:	f000 ffe8 	bl	8002798 <HAL_GetTick>
 80017c8:	4607      	mov	r7, r0
 80017ca:	2602      	movs	r6, #2
 80017cc:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017d0:	6822      	ldr	r2, [r4, #0]
 80017d2:	fa96 f3a6 	rbit	r3, r6
 80017d6:	fab3 f383 	clz	r3, r3
 80017da:	f003 031f 	and.w	r3, r3, #31
 80017de:	fa22 f303 	lsr.w	r3, r2, r3
 80017e2:	07d9      	lsls	r1, r3, #31
 80017e4:	d505      	bpl.n	80017f2 <HAL_RCC_OscConfig+0x1fa>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017e6:	f000 ffd7 	bl	8002798 <HAL_GetTick>
 80017ea:	1bc0      	subs	r0, r0, r7
 80017ec:	2802      	cmp	r0, #2
 80017ee:	d9ed      	bls.n	80017cc <HAL_RCC_OscConfig+0x1d4>
 80017f0:	e76a      	b.n	80016c8 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017f2:	682b      	ldr	r3, [r5, #0]
 80017f4:	071a      	lsls	r2, r3, #28
 80017f6:	d546      	bpl.n	8001886 <HAL_RCC_OscConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017f8:	69aa      	ldr	r2, [r5, #24]
 80017fa:	4c3e      	ldr	r4, [pc, #248]	; (80018f4 <HAL_RCC_OscConfig+0x2fc>)
 80017fc:	2301      	movs	r3, #1
 80017fe:	493e      	ldr	r1, [pc, #248]	; (80018f8 <HAL_RCC_OscConfig+0x300>)
 8001800:	b312      	cbz	r2, 8001848 <HAL_RCC_OscConfig+0x250>
 8001802:	fa93 f2a3 	rbit	r2, r3
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001806:	fab2 f282 	clz	r2, r2
 800180a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800180e:	f000 ffc3 	bl	8002798 <HAL_GetTick>
 8001812:	4607      	mov	r7, r0
 8001814:	2602      	movs	r6, #2
 8001816:	fa96 f3a6 	rbit	r3, r6
 800181a:	fa96 f3a6 	rbit	r3, r6
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800181e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001820:	fa96 f3a6 	rbit	r3, r6
 8001824:	fab3 f383 	clz	r3, r3
 8001828:	f003 031f 	and.w	r3, r3, #31
 800182c:	fa22 f303 	lsr.w	r3, r2, r3
 8001830:	07db      	lsls	r3, r3, #31
 8001832:	d405      	bmi.n	8001840 <HAL_RCC_OscConfig+0x248>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001834:	f000 ffb0 	bl	8002798 <HAL_GetTick>
 8001838:	1bc0      	subs	r0, r0, r7
 800183a:	2802      	cmp	r0, #2
 800183c:	d9eb      	bls.n	8001816 <HAL_RCC_OscConfig+0x21e>
 800183e:	e743      	b.n	80016c8 <HAL_RCC_OscConfig+0xd0>
          return HAL_TIMEOUT;
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      HAL_Delay(1);
 8001840:	2001      	movs	r0, #1
 8001842:	f000 ffaf 	bl	80027a4 <HAL_Delay>
 8001846:	e01e      	b.n	8001886 <HAL_RCC_OscConfig+0x28e>
 8001848:	fa93 f3a3 	rbit	r3, r3
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800184c:	fab3 f383 	clz	r3, r3
 8001850:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001854:	f000 ffa0 	bl	8002798 <HAL_GetTick>
 8001858:	4607      	mov	r7, r0
 800185a:	2602      	movs	r6, #2
 800185c:	fa96 f3a6 	rbit	r3, r6
 8001860:	fa96 f3a6 	rbit	r3, r6
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001864:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001866:	fa96 f3a6 	rbit	r3, r6
 800186a:	fab3 f383 	clz	r3, r3
 800186e:	f003 031f 	and.w	r3, r3, #31
 8001872:	fa22 f303 	lsr.w	r3, r2, r3
 8001876:	07d8      	lsls	r0, r3, #31
 8001878:	d505      	bpl.n	8001886 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800187a:	f000 ff8d 	bl	8002798 <HAL_GetTick>
 800187e:	1bc0      	subs	r0, r0, r7
 8001880:	2802      	cmp	r0, #2
 8001882:	d9eb      	bls.n	800185c <HAL_RCC_OscConfig+0x264>
 8001884:	e720      	b.n	80016c8 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001886:	682b      	ldr	r3, [r5, #0]
 8001888:	0759      	lsls	r1, r3, #29
 800188a:	d404      	bmi.n	8001896 <HAL_RCC_OscConfig+0x29e>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800188c:	69ea      	ldr	r2, [r5, #28]
 800188e:	2a00      	cmp	r2, #0
 8001890:	f040 8081 	bne.w	8001996 <HAL_RCC_OscConfig+0x39e>
 8001894:	e0d8      	b.n	8001a48 <HAL_RCC_OscConfig+0x450>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001896:	4c17      	ldr	r4, [pc, #92]	; (80018f4 <HAL_RCC_OscConfig+0x2fc>)
    
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001898:	4e18      	ldr	r6, [pc, #96]	; (80018fc <HAL_RCC_OscConfig+0x304>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800189a:	69e3      	ldr	r3, [r4, #28]
 800189c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018a0:	61e3      	str	r3, [r4, #28]
 80018a2:	69e3      	ldr	r3, [r4, #28]
 80018a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a8:	9301      	str	r3, [sp, #4]
 80018aa:	9b01      	ldr	r3, [sp, #4]
    
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018ac:	6833      	ldr	r3, [r6, #0]
 80018ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018b2:	6033      	str	r3, [r6, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018b4:	f000 ff70 	bl	8002798 <HAL_GetTick>
 80018b8:	4607      	mov	r7, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80018ba:	6833      	ldr	r3, [r6, #0]
 80018bc:	05da      	lsls	r2, r3, #23
 80018be:	d405      	bmi.n	80018cc <HAL_RCC_OscConfig+0x2d4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018c0:	f000 ff6a 	bl	8002798 <HAL_GetTick>
 80018c4:	1bc0      	subs	r0, r0, r7
 80018c6:	2864      	cmp	r0, #100	; 0x64
 80018c8:	d9f7      	bls.n	80018ba <HAL_RCC_OscConfig+0x2c2>
 80018ca:	e6fd      	b.n	80016c8 <HAL_RCC_OscConfig+0xd0>
          return HAL_TIMEOUT;
        }
      }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018cc:	68eb      	ldr	r3, [r5, #12]
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d01c      	beq.n	800190c <HAL_RCC_OscConfig+0x314>
 80018d2:	b9ab      	cbnz	r3, 8001900 <HAL_RCC_OscConfig+0x308>
 80018d4:	6a23      	ldr	r3, [r4, #32]
 80018d6:	2602      	movs	r6, #2
 80018d8:	f023 0301 	bic.w	r3, r3, #1
 80018dc:	6223      	str	r3, [r4, #32]
 80018de:	6a23      	ldr	r3, [r4, #32]
 80018e0:	4637      	mov	r7, r6
 80018e2:	f023 0304 	bic.w	r3, r3, #4
 80018e6:	6223      	str	r3, [r4, #32]
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018e8:	f000 ff56 	bl	8002798 <HAL_GetTick>
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018ec:	f241 3988 	movw	r9, #5000	; 0x1388
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018f0:	4680      	mov	r8, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018f2:	e048      	b.n	8001986 <HAL_RCC_OscConfig+0x38e>
 80018f4:	40021000 	.word	0x40021000
 80018f8:	42420480 	.word	0x42420480
 80018fc:	40007000 	.word	0x40007000
          return HAL_TIMEOUT;
        }
      }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001900:	2b05      	cmp	r3, #5
 8001902:	6a23      	ldr	r3, [r4, #32]
 8001904:	d106      	bne.n	8001914 <HAL_RCC_OscConfig+0x31c>
 8001906:	f043 0304 	orr.w	r3, r3, #4
 800190a:	6223      	str	r3, [r4, #32]
 800190c:	6a23      	ldr	r3, [r4, #32]
 800190e:	f043 0301 	orr.w	r3, r3, #1
 8001912:	e005      	b.n	8001920 <HAL_RCC_OscConfig+0x328>
 8001914:	f023 0301 	bic.w	r3, r3, #1
 8001918:	6223      	str	r3, [r4, #32]
 800191a:	6a23      	ldr	r3, [r4, #32]
 800191c:	f023 0304 	bic.w	r3, r3, #4
 8001920:	6223      	str	r3, [r4, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001922:	f000 ff39 	bl	8002798 <HAL_GetTick>
 8001926:	2602      	movs	r6, #2
 8001928:	4681      	mov	r9, r0
 800192a:	46b0      	mov	r8, r6
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800192c:	f241 3788 	movw	r7, #5000	; 0x1388
 8001930:	fa96 f3a6 	rbit	r3, r6
 8001934:	fa96 f3a6 	rbit	r3, r6
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001938:	b10b      	cbz	r3, 800193e <HAL_RCC_OscConfig+0x346>
 800193a:	6a22      	ldr	r2, [r4, #32]
 800193c:	e000      	b.n	8001940 <HAL_RCC_OscConfig+0x348>
 800193e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001940:	fa98 f3a8 	rbit	r3, r8
 8001944:	fab3 f383 	clz	r3, r3
 8001948:	f003 031f 	and.w	r3, r3, #31
 800194c:	fa22 f303 	lsr.w	r3, r2, r3
 8001950:	07db      	lsls	r3, r3, #31
 8001952:	d49b      	bmi.n	800188c <HAL_RCC_OscConfig+0x294>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001954:	f000 ff20 	bl	8002798 <HAL_GetTick>
 8001958:	ebc9 0000 	rsb	r0, r9, r0
 800195c:	42b8      	cmp	r0, r7
 800195e:	d9e7      	bls.n	8001930 <HAL_RCC_OscConfig+0x338>
 8001960:	e6b2      	b.n	80016c8 <HAL_RCC_OscConfig+0xd0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001962:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001964:	fa97 f3a7 	rbit	r3, r7
 8001968:	fab3 f383 	clz	r3, r3
 800196c:	f003 031f 	and.w	r3, r3, #31
 8001970:	fa22 f303 	lsr.w	r3, r2, r3
 8001974:	07d8      	lsls	r0, r3, #31
 8001976:	d589      	bpl.n	800188c <HAL_RCC_OscConfig+0x294>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001978:	f000 ff0e 	bl	8002798 <HAL_GetTick>
 800197c:	ebc8 0000 	rsb	r0, r8, r0
 8001980:	4548      	cmp	r0, r9
 8001982:	f63f aea1 	bhi.w	80016c8 <HAL_RCC_OscConfig+0xd0>
 8001986:	fa96 f3a6 	rbit	r3, r6
 800198a:	fa96 f3a6 	rbit	r3, r6
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800198e:	2b00      	cmp	r3, #0
 8001990:	d0e7      	beq.n	8001962 <HAL_RCC_OscConfig+0x36a>
 8001992:	6a22      	ldr	r2, [r4, #32]
 8001994:	e7e6      	b.n	8001964 <HAL_RCC_OscConfig+0x36c>
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001996:	4c47      	ldr	r4, [pc, #284]	; (8001ab4 <HAL_RCC_OscConfig+0x4bc>)
 8001998:	6863      	ldr	r3, [r4, #4]
 800199a:	f003 030c 	and.w	r3, r3, #12
 800199e:	2b08      	cmp	r3, #8
 80019a0:	f43f ae54 	beq.w	800164c <HAL_RCC_OscConfig+0x54>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019a4:	2a02      	cmp	r2, #2
 80019a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80019aa:	d15c      	bne.n	8001a66 <HAL_RCC_OscConfig+0x46e>
 80019ac:	fa93 f3a3 	rbit	r3, r3
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019b0:	fab3 f383 	clz	r3, r3
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80019ba:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c2:	f000 fee9 	bl	8002798 <HAL_GetTick>
 80019c6:	4680      	mov	r8, r0
 80019c8:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 80019cc:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019d0:	4f38      	ldr	r7, [pc, #224]	; (8001ab4 <HAL_RCC_OscConfig+0x4bc>)
 80019d2:	6822      	ldr	r2, [r4, #0]
 80019d4:	fa96 f3a6 	rbit	r3, r6
 80019d8:	fab3 f383 	clz	r3, r3
 80019dc:	f003 031f 	and.w	r3, r3, #31
 80019e0:	fa22 f303 	lsr.w	r3, r2, r3
 80019e4:	07d9      	lsls	r1, r3, #31
 80019e6:	d431      	bmi.n	8001a4c <HAL_RCC_OscConfig+0x454>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80019e8:	6a2e      	ldr	r6, [r5, #32]
 80019ea:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
 80019ee:	d105      	bne.n	80019fc <HAL_RCC_OscConfig+0x404>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80019f0:	6879      	ldr	r1, [r7, #4]
 80019f2:	f421 3000 	bic.w	r0, r1, #131072	; 0x20000
 80019f6:	68a9      	ldr	r1, [r5, #8]
 80019f8:	4301      	orrs	r1, r0
 80019fa:	6079      	str	r1, [r7, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019fc:	6863      	ldr	r3, [r4, #4]
 80019fe:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001a00:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8001a04:	4332      	orrs	r2, r6
 8001a06:	4313      	orrs	r3, r2
 8001a08:	6063      	str	r3, [r4, #4]
 8001a0a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a0e:	fa93 f3a3 	rbit	r3, r3
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a12:	fab3 f383 	clz	r3, r3
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001a1c:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001a20:	2201      	movs	r2, #1
 8001a22:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a24:	f000 feb8 	bl	8002798 <HAL_GetTick>
 8001a28:	4606      	mov	r6, r0
 8001a2a:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8001a2e:	fa95 f3a5 	rbit	r3, r5
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a32:	6822      	ldr	r2, [r4, #0]
 8001a34:	fa95 f3a5 	rbit	r3, r5
 8001a38:	fab3 f383 	clz	r3, r3
 8001a3c:	f003 031f 	and.w	r3, r3, #31
 8001a40:	fa22 f303 	lsr.w	r3, r2, r3
 8001a44:	07da      	lsls	r2, r3, #31
 8001a46:	d508      	bpl.n	8001a5a <HAL_RCC_OscConfig+0x462>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001a48:	2000      	movs	r0, #0
 8001a4a:	e02f      	b.n	8001aac <HAL_RCC_OscConfig+0x4b4>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a4c:	f000 fea4 	bl	8002798 <HAL_GetTick>
 8001a50:	ebc8 0000 	rsb	r0, r8, r0
 8001a54:	2802      	cmp	r0, #2
 8001a56:	d9b9      	bls.n	80019cc <HAL_RCC_OscConfig+0x3d4>
 8001a58:	e636      	b.n	80016c8 <HAL_RCC_OscConfig+0xd0>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a5a:	f000 fe9d 	bl	8002798 <HAL_GetTick>
 8001a5e:	1b80      	subs	r0, r0, r6
 8001a60:	2802      	cmp	r0, #2
 8001a62:	d9e4      	bls.n	8001a2e <HAL_RCC_OscConfig+0x436>
 8001a64:	e630      	b.n	80016c8 <HAL_RCC_OscConfig+0xd0>
 8001a66:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a6a:	fab3 f383 	clz	r3, r3
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001a74:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a7c:	f000 fe8c 	bl	8002798 <HAL_GetTick>
 8001a80:	4606      	mov	r6, r0
 8001a82:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8001a86:	fa95 f3a5 	rbit	r3, r5
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a8a:	6822      	ldr	r2, [r4, #0]
 8001a8c:	fa95 f3a5 	rbit	r3, r5
 8001a90:	fab3 f383 	clz	r3, r3
 8001a94:	f003 031f 	and.w	r3, r3, #31
 8001a98:	fa22 f303 	lsr.w	r3, r2, r3
 8001a9c:	07db      	lsls	r3, r3, #31
 8001a9e:	d5d3      	bpl.n	8001a48 <HAL_RCC_OscConfig+0x450>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aa0:	f000 fe7a 	bl	8002798 <HAL_GetTick>
 8001aa4:	1b80      	subs	r0, r0, r6
 8001aa6:	2802      	cmp	r0, #2
 8001aa8:	d9ed      	bls.n	8001a86 <HAL_RCC_OscConfig+0x48e>
 8001aaa:	e60d      	b.n	80016c8 <HAL_RCC_OscConfig+0xd0>
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 8001aac:	b003      	add	sp, #12
 8001aae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40021000 	.word	0x40021000

08001ab8 <HAL_RCC_GetSysClockFreq>:
{
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001ab8:	4b1f      	ldr	r3, [pc, #124]	; (8001b38 <HAL_RCC_GetSysClockFreq+0x80>)
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001aba:	b570      	push	{r4, r5, r6, lr}
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001abc:	f103 0510 	add.w	r5, r3, #16
 8001ac0:	462e      	mov	r6, r5
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ac2:	b086      	sub	sp, #24
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001ac4:	ac02      	add	r4, sp, #8
 8001ac6:	4622      	mov	r2, r4
 8001ac8:	6818      	ldr	r0, [r3, #0]
 8001aca:	6859      	ldr	r1, [r3, #4]
 8001acc:	3308      	adds	r3, #8
 8001ace:	c203      	stmia	r2!, {r0, r1}
 8001ad0:	42ab      	cmp	r3, r5
 8001ad2:	4614      	mov	r4, r2
 8001ad4:	d1f7      	bne.n	8001ac6 <HAL_RCC_GetSysClockFreq+0xe>
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 8001ad6:	8833      	ldrh	r3, [r6, #0]
  uint32_t sysclockfreq = 0;
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0, pll2mul = 0;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 8001ad8:	4c18      	ldr	r4, [pc, #96]	; (8001b3c <HAL_RCC_GetSysClockFreq+0x84>)
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 8001ada:	f8ad 3004 	strh.w	r3, [sp, #4]
  uint32_t sysclockfreq = 0;
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0, pll2mul = 0;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 8001ade:	6860      	ldr	r0, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ae0:	f000 030c 	and.w	r3, r0, #12
 8001ae4:	2b08      	cmp	r3, #8
 8001ae6:	d124      	bne.n	8001b32 <HAL_RCC_GetSysClockFreq+0x7a>
 8001ae8:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8001aec:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> POSITION_VAL(RCC_CFGR_PLLMULL)];
 8001af0:	fab3 f383 	clz	r3, r3
 8001af4:	f400 1270 	and.w	r2, r0, #3932160	; 0x3c0000
 8001af8:	fa22 f303 	lsr.w	r3, r2, r3
 8001afc:	aa06      	add	r2, sp, #24
 8001afe:	4413      	add	r3, r2
 8001b00:	f813 1c10 	ldrb.w	r1, [r3, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b04:	03c3      	lsls	r3, r0, #15
 8001b06:	d511      	bpl.n	8001b2c <HAL_RCC_GetSysClockFreq+0x74>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> POSITION_VAL(RCC_CFGR2_PREDIV1)];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> POSITION_VAL(RCC_CFGR_PLLXTPRE)];
 8001b08:	6862      	ldr	r2, [r4, #4]
 8001b0a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b0e:	fa93 f3a3 	rbit	r3, r3
 8001b12:	fab3 f083 	clz	r0, r3
 8001b16:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8001b1a:	40c3      	lsrs	r3, r0
 8001b1c:	aa06      	add	r2, sp, #24
 8001b1e:	4413      	add	r3, r2
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 8001b20:	f813 0c14 	ldrb.w	r0, [r3, #-20]
 8001b24:	4b06      	ldr	r3, [pc, #24]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x88>)
 8001b26:	fbb3 f0f0 	udiv	r0, r3, r0
 8001b2a:	e000      	b.n	8001b2e <HAL_RCC_GetSysClockFreq+0x76>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b2c:	4805      	ldr	r0, [pc, #20]	; (8001b44 <HAL_RCC_GetSysClockFreq+0x8c>)
 8001b2e:	4348      	muls	r0, r1
 8001b30:	e000      	b.n	8001b34 <HAL_RCC_GetSysClockFreq+0x7c>
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b32:	4803      	ldr	r0, [pc, #12]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x88>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001b34:	b006      	add	sp, #24
 8001b36:	bd70      	pop	{r4, r5, r6, pc}
 8001b38:	080028bc 	.word	0x080028bc
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	007a1200 	.word	0x007a1200
 8001b44:	003d0900 	.word	0x003d0900

08001b48 <HAL_RCC_ClockConfig>:
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001b48:	4a54      	ldr	r2, [pc, #336]	; (8001c9c <HAL_RCC_ClockConfig+0x154>)
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001b4e:	6813      	ldr	r3, [r2, #0]
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b50:	4606      	mov	r6, r0
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001b52:	f003 0307 	and.w	r3, r3, #7
 8001b56:	428b      	cmp	r3, r1
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b58:	460d      	mov	r5, r1
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001b5a:	d30a      	bcc.n	8001b72 <HAL_RCC_ClockConfig+0x2a>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b5c:	6831      	ldr	r1, [r6, #0]
 8001b5e:	078c      	lsls	r4, r1, #30
 8001b60:	d514      	bpl.n	8001b8c <HAL_RCC_ClockConfig+0x44>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b62:	484f      	ldr	r0, [pc, #316]	; (8001ca0 <HAL_RCC_ClockConfig+0x158>)
 8001b64:	6843      	ldr	r3, [r0, #4]
 8001b66:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b6a:	68b3      	ldr	r3, [r6, #8]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	6043      	str	r3, [r0, #4]
 8001b70:	e00c      	b.n	8001b8c <HAL_RCC_ClockConfig+0x44>
#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b72:	6813      	ldr	r3, [r2, #0]
 8001b74:	f023 0307 	bic.w	r3, r3, #7
 8001b78:	430b      	orrs	r3, r1
 8001b7a:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b7c:	6813      	ldr	r3, [r2, #0]
 8001b7e:	f003 0307 	and.w	r3, r3, #7
 8001b82:	4299      	cmp	r1, r3
 8001b84:	d0ea      	beq.n	8001b5c <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 8001b86:	2001      	movs	r0, #1
 8001b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b8c:	07c8      	lsls	r0, r1, #31
 8001b8e:	d406      	bmi.n	8001b9e <HAL_RCC_ClockConfig+0x56>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001b90:	4a42      	ldr	r2, [pc, #264]	; (8001c9c <HAL_RCC_ClockConfig+0x154>)
 8001b92:	6813      	ldr	r3, [r2, #0]
 8001b94:	f003 0307 	and.w	r3, r3, #7
 8001b98:	429d      	cmp	r5, r3
 8001b9a:	d34a      	bcc.n	8001c32 <HAL_RCC_ClockConfig+0xea>
 8001b9c:	e053      	b.n	8001c46 <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b9e:	6872      	ldr	r2, [r6, #4]
 8001ba0:	4c3f      	ldr	r4, [pc, #252]	; (8001ca0 <HAL_RCC_ClockConfig+0x158>)
 8001ba2:	2a01      	cmp	r2, #1
 8001ba4:	d102      	bne.n	8001bac <HAL_RCC_ClockConfig+0x64>
 8001ba6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001baa:	e004      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bac:	2a02      	cmp	r2, #2
 8001bae:	bf0c      	ite	eq
 8001bb0:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8001bb4:	2302      	movne	r3, #2
 8001bb6:	fa93 f1a3 	rbit	r1, r3
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bba:	6821      	ldr	r1, [r4, #0]
 8001bbc:	fa93 f3a3 	rbit	r3, r3
 8001bc0:	fab3 f383 	clz	r3, r3
 8001bc4:	f003 031f 	and.w	r3, r3, #31
 8001bc8:	fa21 f303 	lsr.w	r3, r1, r3
 8001bcc:	07d9      	lsls	r1, r3, #31
 8001bce:	d5da      	bpl.n	8001b86 <HAL_RCC_ClockConfig+0x3e>
      {
        return HAL_ERROR;
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bd0:	6863      	ldr	r3, [r4, #4]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bd2:	f241 3888 	movw	r8, #5000	; 0x1388
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
      {
        return HAL_ERROR;
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bd6:	f023 0303 	bic.w	r3, r3, #3
 8001bda:	431a      	orrs	r2, r3
 8001bdc:	6062      	str	r2, [r4, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bde:	f000 fddb 	bl	8002798 <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001be2:	6873      	ldr	r3, [r6, #4]
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001be4:	4607      	mov	r7, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d10c      	bne.n	8001c04 <HAL_RCC_ClockConfig+0xbc>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bea:	6863      	ldr	r3, [r4, #4]
 8001bec:	f003 030c 	and.w	r3, r3, #12
 8001bf0:	2b04      	cmp	r3, #4
 8001bf2:	d0cd      	beq.n	8001b90 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bf4:	f000 fdd0 	bl	8002798 <HAL_GetTick>
 8001bf8:	1bc0      	subs	r0, r0, r7
 8001bfa:	4540      	cmp	r0, r8
 8001bfc:	d9f5      	bls.n	8001bea <HAL_RCC_ClockConfig+0xa2>
        {
          return HAL_TIMEOUT;
 8001bfe:	2003      	movs	r0, #3
 8001c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d10f      	bne.n	8001c28 <HAL_RCC_ClockConfig+0xe0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c08:	6863      	ldr	r3, [r4, #4]
 8001c0a:	f003 030c 	and.w	r3, r3, #12
 8001c0e:	2b08      	cmp	r3, #8
 8001c10:	d0be      	beq.n	8001b90 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c12:	f000 fdc1 	bl	8002798 <HAL_GetTick>
 8001c16:	1bc0      	subs	r0, r0, r7
 8001c18:	4540      	cmp	r0, r8
 8001c1a:	d9f5      	bls.n	8001c08 <HAL_RCC_ClockConfig+0xc0>
 8001c1c:	e7ef      	b.n	8001bfe <HAL_RCC_ClockConfig+0xb6>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c1e:	f000 fdbb 	bl	8002798 <HAL_GetTick>
 8001c22:	1bc0      	subs	r0, r0, r7
 8001c24:	4540      	cmp	r0, r8
 8001c26:	d8ea      	bhi.n	8001bfe <HAL_RCC_ClockConfig+0xb6>
        }
      }
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c28:	6863      	ldr	r3, [r4, #4]
 8001c2a:	f013 0f0c 	tst.w	r3, #12
 8001c2e:	d1f6      	bne.n	8001c1e <HAL_RCC_ClockConfig+0xd6>
 8001c30:	e7ae      	b.n	8001b90 <HAL_RCC_ClockConfig+0x48>
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c32:	6813      	ldr	r3, [r2, #0]
 8001c34:	f023 0307 	bic.w	r3, r3, #7
 8001c38:	432b      	orrs	r3, r5
 8001c3a:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c3c:	6813      	ldr	r3, [r2, #0]
 8001c3e:	f003 0307 	and.w	r3, r3, #7
 8001c42:	429d      	cmp	r5, r3
 8001c44:	d19f      	bne.n	8001b86 <HAL_RCC_ClockConfig+0x3e>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c46:	6831      	ldr	r1, [r6, #0]
 8001c48:	4c15      	ldr	r4, [pc, #84]	; (8001ca0 <HAL_RCC_ClockConfig+0x158>)
 8001c4a:	f011 0f04 	tst.w	r1, #4
 8001c4e:	d005      	beq.n	8001c5c <HAL_RCC_ClockConfig+0x114>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c50:	6863      	ldr	r3, [r4, #4]
 8001c52:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c56:	68f3      	ldr	r3, [r6, #12]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	6063      	str	r3, [r4, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c5c:	070b      	lsls	r3, r1, #28
 8001c5e:	d506      	bpl.n	8001c6e <HAL_RCC_ClockConfig+0x126>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c60:	6863      	ldr	r3, [r4, #4]
 8001c62:	6932      	ldr	r2, [r6, #16]
 8001c64:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001c68:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001c6c:	6063      	str	r3, [r4, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001c6e:	f7ff ff23 	bl	8001ab8 <HAL_RCC_GetSysClockFreq>
 8001c72:	6863      	ldr	r3, [r4, #4]
 8001c74:	22f0      	movs	r2, #240	; 0xf0
 8001c76:	fa92 f2a2 	rbit	r2, r2
 8001c7a:	fab2 f282 	clz	r2, r2
 8001c7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c82:	40d3      	lsrs	r3, r2
 8001c84:	4a07      	ldr	r2, [pc, #28]	; (8001ca4 <HAL_RCC_ClockConfig+0x15c>)
 8001c86:	5cd3      	ldrb	r3, [r2, r3]
 8001c88:	40d8      	lsrs	r0, r3
 8001c8a:	4b07      	ldr	r3, [pc, #28]	; (8001ca8 <HAL_RCC_ClockConfig+0x160>)
 8001c8c:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001c8e:	2000      	movs	r0, #0
 8001c90:	f000 fd55 	bl	800273e <HAL_InitTick>
  
  return HAL_OK;
 8001c94:	2000      	movs	r0, #0
}
 8001c96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40022000 	.word	0x40022000
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	0800291d 	.word	0x0800291d
 8001ca8:	200000f4 	.word	0x200000f4

08001cac <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001cac:	4b01      	ldr	r3, [pc, #4]	; (8001cb4 <HAL_RCC_GetHCLKFreq+0x8>)
 8001cae:	6818      	ldr	r0, [r3, #0]
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	200000f4 	.word	0x200000f4

08001cb8 <HAL_PCDEx_PMAConfig>:

{
  PCD_EPTypeDef *ep = NULL;
  
  /* initialize ep structure*/
  if ((0x80 & ep_addr) == 0x80)
 8001cb8:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001cbc:	bf1b      	ittet	ne
 8001cbe:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8001cc2:	eb00 1041 	addne.w	r0, r0, r1, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001cc6:	eb00 1041 	addeq.w	r0, r0, r1, lsl #5
  PCD_EPTypeDef *ep = NULL;
  
  /* initialize ep structure*/
  if ((0x80 & ep_addr) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001cca:	3028      	addne	r0, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001ccc:	bf08      	it	eq
 8001cce:	f500 7002 	addeq.w	r0, r0, #520	; 0x208
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8001cd2:	b912      	cbnz	r2, 8001cda <HAL_PCDEx_PMAConfig+0x22>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0;
 8001cd4:	7282      	strb	r2, [r0, #10]
    /*Configure te PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 8001cd6:	8083      	strh	r3, [r0, #4]
 8001cd8:	e004      	b.n	8001ce4 <HAL_PCDEx_PMAConfig+0x2c>
  }
  else /*USB_DBL_BUF*/
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1;
 8001cda:	2201      	movs	r2, #1
    /*Configure the PMA*/
    ep->pmaaddr0 =  pmaadress & 0xFFFF;
 8001cdc:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000) >> 16;
 8001cde:	0c1b      	lsrs	r3, r3, #16
    ep->pmaadress = (uint16_t)pmaadress;
  }
  else /*USB_DBL_BUF*/
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1;
 8001ce0:	7282      	strb	r2, [r0, #10]
    /*Configure the PMA*/
    ep->pmaaddr0 =  pmaadress & 0xFFFF;
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000) >> 16;
 8001ce2:	8103      	strh	r3, [r0, #8]
  }
  
  return HAL_OK; 
}
 8001ce4:	2000      	movs	r0, #0
 8001ce6:	4770      	bx	lr

08001ce8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t index = 0;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8001cec:	4604      	mov	r4, r0
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001cee:	b086      	sub	sp, #24
  uint32_t index = 0;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8001cf0:	2800      	cmp	r0, #0
 8001cf2:	d05f      	beq.n	8001db4 <HAL_PCD_Init+0xcc>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 8001cf4:	f890 33e9 	ldrb.w	r3, [r0, #1001]	; 0x3e9
 8001cf8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001cfc:	b91b      	cbnz	r3, 8001d06 <HAL_PCD_Init+0x1e>
  {  
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001cfe:	f880 23e8 	strb.w	r2, [r0, #1000]	; 0x3e8

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d02:	f7fe fa75 	bl	80001f0 <HAL_PCD_MspInit>
  }
  
  hpcd->State = HAL_PCD_STATE_BUSY;
  
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d06:	4625      	mov	r5, r4
  
  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 8001d08:	466e      	mov	r6, sp

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
  }
  
  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d0a:	2303      	movs	r3, #3
  
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d0c:	f855 0b10 	ldr.w	r0, [r5], #16

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
  }
  
  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d10:	f884 33e9 	strb.w	r3, [r4, #1001]	; 0x3e9
  
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d14:	f7ff f826 	bl	8000d64 <USB_DisableGlobalInt>
  
  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 8001d18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d1a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001d1c:	682b      	ldr	r3, [r5, #0]
 8001d1e:	1d27      	adds	r7, r4, #4
 8001d20:	6033      	str	r3, [r6, #0]
 8001d22:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8001d26:	6820      	ldr	r0, [r4, #0]
 8001d28:	f7ff f80c 	bl	8000d44 <USB_CoreInit>
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	6820      	ldr	r0, [r4, #0]
 8001d30:	f7ff f822 	bl	8000d78 <USB_SetCurrentMode>
 
  /* Init endpoints structures */
  for (index = 0; index < 15 ; index++)
 8001d34:	2100      	movs	r1, #0
 8001d36:	4623      	mov	r3, r4
  
  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 8001d38:	4622      	mov	r2, r4
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1;
    hpcd->IN_ep[index].num = index;
    hpcd->IN_ep[index].tx_fifo_num = index;
    /* Control until ep is actvated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 8001d3a:	4608      	mov	r0, r1
 8001d3c:	f104 0510 	add.w	r5, r4, #16
 
  /* Init endpoints structures */
  for (index = 0; index < 15 ; index++)
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1;
 8001d40:	2601      	movs	r6, #1
    hpcd->IN_ep[index].num = index;
 8001d42:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
    hpcd->IN_ep[index].tx_fifo_num = index;
 8001d46:	8691      	strh	r1, [r2, #52]	; 0x34
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 
  /* Init endpoints structures */
  for (index = 0; index < 15 ; index++)
 8001d48:	3101      	adds	r1, #1
 8001d4a:	290f      	cmp	r1, #15
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1;
 8001d4c:	f882 6029 	strb.w	r6, [r2, #41]	; 0x29
    hpcd->IN_ep[index].num = index;
    hpcd->IN_ep[index].tx_fifo_num = index;
    /* Control until ep is actvated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 8001d50:	f882 002b 	strb.w	r0, [r2, #43]	; 0x2b
    hpcd->IN_ep[index].maxpacket =  0;
 8001d54:	6390      	str	r0, [r2, #56]	; 0x38
    hpcd->IN_ep[index].xfer_buff = 0;
 8001d56:	63d0      	str	r0, [r2, #60]	; 0x3c
    hpcd->IN_ep[index].xfer_len = 0;
 8001d58:	6410      	str	r0, [r2, #64]	; 0x40
 8001d5a:	f102 0220 	add.w	r2, r2, #32
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 
  /* Init endpoints structures */
  for (index = 0; index < 15 ; index++)
 8001d5e:	d1f0      	bne.n	8001d42 <HAL_PCD_Init+0x5a>
 8001d60:	2200      	movs	r2, #0
    hpcd->IN_ep[index].xfer_len = 0;
  }
  
  for (index = 0; index < 15 ; index++)
  {
    hpcd->OUT_ep[index].is_in = 0;
 8001d62:	4611      	mov	r1, r2
    hpcd->OUT_ep[index].num = index;
 8001d64:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
    hpcd->IN_ep[index].tx_fifo_num = index;
 8001d68:	869a      	strh	r2, [r3, #52]	; 0x34
    hpcd->IN_ep[index].maxpacket =  0;
    hpcd->IN_ep[index].xfer_buff = 0;
    hpcd->IN_ep[index].xfer_len = 0;
  }
  
  for (index = 0; index < 15 ; index++)
 8001d6a:	3201      	adds	r2, #1
 8001d6c:	2a0f      	cmp	r2, #15
  {
    hpcd->OUT_ep[index].is_in = 0;
 8001d6e:	f883 1209 	strb.w	r1, [r3, #521]	; 0x209
    hpcd->OUT_ep[index].num = index;
    hpcd->IN_ep[index].tx_fifo_num = index;
    /* Control until ep is activated */
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 8001d72:	f883 120b 	strb.w	r1, [r3, #523]	; 0x20b
    hpcd->OUT_ep[index].maxpacket = 0;
 8001d76:	f8c3 1218 	str.w	r1, [r3, #536]	; 0x218
    hpcd->OUT_ep[index].xfer_buff = 0;
 8001d7a:	f8c3 121c 	str.w	r1, [r3, #540]	; 0x21c
    hpcd->OUT_ep[index].xfer_len = 0;
 8001d7e:	f8c3 1220 	str.w	r1, [r3, #544]	; 0x220
    hpcd->IN_ep[index].xfer_len = 0;
  }
  
  for (index = 0; index < 15 ; index++)
  {
    hpcd->OUT_ep[index].is_in = 0;
 8001d82:	f04f 0800 	mov.w	r8, #0
 8001d86:	f103 0320 	add.w	r3, r3, #32
    hpcd->IN_ep[index].maxpacket =  0;
    hpcd->IN_ep[index].xfer_buff = 0;
    hpcd->IN_ep[index].xfer_len = 0;
  }
  
  for (index = 0; index < 15 ; index++)
 8001d8a:	d1eb      	bne.n	8001d64 <HAL_PCD_Init+0x7c>
    hpcd->OUT_ep[index].xfer_buff = 0;
    hpcd->OUT_ep[index].xfer_len = 0;
  }
  
  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
 8001d8c:	466e      	mov	r6, sp
 8001d8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d90:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001d92:	682b      	ldr	r3, [r5, #0]
 8001d94:	6033      	str	r3, [r6, #0]
 8001d96:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8001d9a:	6820      	ldr	r0, [r4, #0]
 8001d9c:	f7fe ffee 	bl	8000d7c <USB_DevInit>
  
  hpcd->USB_Address = 0;
  hpcd->State= HAL_PCD_STATE_READY;
 8001da0:	2301      	movs	r3, #1
  }
  
  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
  
  hpcd->USB_Address = 0;
 8001da2:	f884 8024 	strb.w	r8, [r4, #36]	; 0x24
  hpcd->State= HAL_PCD_STATE_READY;
  
  USB_DevDisconnect (hpcd->Instance);  
 8001da6:	6820      	ldr	r0, [r4, #0]
  
  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
  
  hpcd->USB_Address = 0;
  hpcd->State= HAL_PCD_STATE_READY;
 8001da8:	f884 33e9 	strb.w	r3, [r4, #1001]	; 0x3e9
  
  USB_DevDisconnect (hpcd->Instance);  
 8001dac:	f7ff fa9f 	bl	80012ee <USB_DevDisconnect>
  return HAL_OK;
 8001db0:	4640      	mov	r0, r8
 8001db2:	e000      	b.n	8001db6 <HAL_PCD_Init+0xce>
  uint32_t index = 0;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
  {
    return HAL_ERROR;
 8001db4:	2001      	movs	r0, #1
  hpcd->USB_Address = 0;
  hpcd->State= HAL_PCD_STATE_READY;
  
  USB_DevDisconnect (hpcd->Instance);  
  return HAL_OK;
}
 8001db6:	b006      	add	sp, #24
 8001db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001dbc <HAL_PCD_Start>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 8001dbc:	f890 33e8 	ldrb.w	r3, [r0, #1000]	; 0x3e8
  * @brief  Start The USB Device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001dc0:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8001dc2:	2b01      	cmp	r3, #1
  * @brief  Start The USB Device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001dc4:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001dc6:	d00e      	beq.n	8001de6 <HAL_PCD_Start+0x2a>
 8001dc8:	2101      	movs	r1, #1
 8001dca:	f880 13e8 	strb.w	r1, [r0, #1000]	; 0x3e8
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 8001dce:	f7fe faec 	bl	80003aa <HAL_PCDEx_SetConnectionState>
  USB_DevConnect (hpcd->Instance);
 8001dd2:	6820      	ldr	r0, [r4, #0]
 8001dd4:	f7ff fa89 	bl	80012ea <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001dd8:	6820      	ldr	r0, [r4, #0]
 8001dda:	f7fe ffba 	bl	8000d52 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001dde:	2000      	movs	r0, #0
 8001de0:	f884 03e8 	strb.w	r0, [r4, #1000]	; 0x3e8
  return HAL_OK;
 8001de4:	bd10      	pop	{r4, pc}
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 8001de6:	2002      	movs	r0, #2
  HAL_PCDEx_SetConnectionState (hpcd, 1);
  USB_DevConnect (hpcd->Instance);
  __HAL_PCD_ENABLE(hpcd);
  __HAL_UNLOCK(hpcd);
  return HAL_OK;
}
 8001de8:	bd10      	pop	{r4, pc}

08001dea <HAL_PCD_SetAddress>:
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8001dea:	f890 23e8 	ldrb.w	r2, [r0, #1000]	; 0x3e8
  * @param  hpcd: PCD handle
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001dee:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8001df0:	2a01      	cmp	r2, #1
  * @param  hpcd: PCD handle
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001df2:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001df4:	d00b      	beq.n	8001e0e <HAL_PCD_SetAddress+0x24>
 8001df6:	2201      	movs	r2, #1
 8001df8:	f880 23e8 	strb.w	r2, [r0, #1000]	; 0x3e8
  hpcd->USB_Address = address;
 8001dfc:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  USB_SetDevAddress(hpcd->Instance, address);
 8001e00:	6800      	ldr	r0, [r0, #0]
 8001e02:	f7ff fa6c 	bl	80012de <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001e06:	2000      	movs	r0, #0
 8001e08:	f884 03e8 	strb.w	r0, [r4, #1000]	; 0x3e8
 8001e0c:	bd10      	pop	{r4, pc}
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8001e0e:	2002      	movs	r0, #2
  hpcd->USB_Address = address;
  USB_SetDevAddress(hpcd->Instance, address);
  __HAL_UNLOCK(hpcd);
  return HAL_OK;
}
 8001e10:	bd10      	pop	{r4, pc}

08001e12 <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001e12:	b538      	push	{r3, r4, r5, lr}
 8001e14:	4604      	mov	r4, r0
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80) == 0x80)
 8001e16:	b248      	sxtb	r0, r1
 8001e18:	2800      	cmp	r0, #0
 8001e1a:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001e1e:	bfb5      	itete	lt
 8001e20:	eb04 1145 	addlt.w	r1, r4, r5, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8001e24:	eb04 1141 	addge.w	r1, r4, r1, lsl #5
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001e28:	3128      	addlt	r1, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8001e2a:	f501 7102 	addge.w	r1, r1, #520	; 0x208
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8001e2e:	0fc0      	lsrs	r0, r0, #31
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  }
  ep->num   = ep_addr & 0x7F;
 8001e30:	700d      	strb	r5, [r1, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8001e32:	7048      	strb	r0, [r1, #1]
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
 8001e34:	70cb      	strb	r3, [r1, #3]
    
  __HAL_LOCK(hpcd);
 8001e36:	f894 33e8 	ldrb.w	r3, [r4, #1000]	; 0x3e8
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
  ep->maxpacket = ep_mps;
 8001e3a:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
    
  __HAL_LOCK(hpcd);
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d009      	beq.n	8001e54 <HAL_PCD_EP_Open+0x42>
 8001e40:	2301      	movs	r3, #1
 8001e42:	f884 33e8 	strb.w	r3, [r4, #1000]	; 0x3e8
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8001e46:	6820      	ldr	r0, [r4, #0]
 8001e48:	f7fe ffac 	bl	8000da4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e4c:	2000      	movs	r0, #0
 8001e4e:	f884 03e8 	strb.w	r0, [r4, #1000]	; 0x3e8
  return ret;
 8001e52:	bd38      	pop	{r3, r4, r5, pc}
  
  ep->is_in = (0x80 & ep_addr) != 0;
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
    
  __HAL_LOCK(hpcd);
 8001e54:	2002      	movs	r0, #2
  USB_ActivateEndpoint(hpcd->Instance , ep);
  __HAL_UNLOCK(hpcd);
  return ret;
}
 8001e56:	bd38      	pop	{r3, r4, r5, pc}

08001e58 <HAL_PCD_EP_Close>:
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80) == 0x80)
 8001e58:	b24b      	sxtb	r3, r1
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	f001 027f 	and.w	r2, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001e60:	bfb5      	itete	lt
 8001e62:	eb00 1142 	addlt.w	r1, r0, r2, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8001e66:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
{  
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001e6a:	3128      	addlt	r1, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8001e6c:	f501 7102 	addge.w	r1, r1, #520	; 0x208
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8001e70:	0fdb      	lsrs	r3, r3, #31
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 8001e72:	b510      	push	{r4, lr}
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  }
  ep->num   = ep_addr & 0x7F;
 8001e74:	700a      	strb	r2, [r1, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8001e76:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd);
 8001e78:	f890 33e8 	ldrb.w	r3, [r0, #1000]	; 0x3e8
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 8001e7c:	4604      	mov	r4, r0
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
  
  __HAL_LOCK(hpcd);
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d009      	beq.n	8001e96 <HAL_PCD_EP_Close+0x3e>
 8001e82:	2301      	movs	r3, #1
 8001e84:	f880 33e8 	strb.w	r3, [r0, #1000]	; 0x3e8
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8001e88:	6800      	ldr	r0, [r0, #0]
 8001e8a:	f7ff f8fd 	bl	8001088 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e8e:	2000      	movs	r0, #0
 8001e90:	f884 03e8 	strb.w	r0, [r4, #1000]	; 0x3e8
  return HAL_OK;
 8001e94:	bd10      	pop	{r4, pc}
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
  
  __HAL_LOCK(hpcd);
 8001e96:	2002      	movs	r0, #2
  USB_DeactivateEndpoint(hpcd->Instance , ep);
  __HAL_UNLOCK(hpcd);
  return HAL_OK;
}
 8001e98:	bd10      	pop	{r4, pc}

08001e9a <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e9a:	b570      	push	{r4, r5, r6, lr}
 8001e9c:	4604      	mov	r4, r0
 8001e9e:	f001 067f 	and.w	r6, r1, #127	; 0x7f
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8001ea2:	0170      	lsls	r0, r6, #5
 8001ea4:	1825      	adds	r5, r4, r0
  ep->xfer_len = len;
 8001ea6:	f8c5 3220 	str.w	r3, [r5, #544]	; 0x220
  ep->xfer_count = 0;
 8001eaa:	2300      	movs	r3, #0
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8001eac:	f8c5 221c 	str.w	r2, [r5, #540]	; 0x21c
  ep->xfer_len = len;
  ep->xfer_count = 0;
 8001eb0:	f8c5 3224 	str.w	r3, [r5, #548]	; 0x224
  ep->is_in = 0;
 8001eb4:	f885 3209 	strb.w	r3, [r5, #521]	; 0x209
  ep->num = ep_addr & 0x7F;
 8001eb8:	f885 6208 	strb.w	r6, [r5, #520]	; 0x208
  
  __HAL_LOCK(hpcd);
 8001ebc:	f894 33e8 	ldrb.w	r3, [r4, #1000]	; 0x3e8
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d00c      	beq.n	8001ede <HAL_PCD_EP_Receive+0x44>
 8001ec4:	2301      	movs	r3, #1
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8001ec6:	f500 7002 	add.w	r0, r0, #520	; 0x208
 8001eca:	1821      	adds	r1, r4, r0
  ep->xfer_len = len;
  ep->xfer_count = 0;
  ep->is_in = 0;
  ep->num = ep_addr & 0x7F;
  
  __HAL_LOCK(hpcd);
 8001ecc:	f884 33e8 	strb.w	r3, [r4, #1000]	; 0x3e8
  
  if ((ep_addr & 0x7F) == 0 )
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
 8001ed0:	6820      	ldr	r0, [r4, #0]
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 8001ed2:	f7ff fa25 	bl	8001320 <USB_EPStartXfer>
  }
  __HAL_UNLOCK(hpcd);
 8001ed6:	2000      	movs	r0, #0
 8001ed8:	f884 03e8 	strb.w	r0, [r4, #1000]	; 0x3e8
  
  return HAL_OK;
 8001edc:	bd70      	pop	{r4, r5, r6, pc}
  ep->xfer_len = len;
  ep->xfer_count = 0;
  ep->is_in = 0;
  ep->num = ep_addr & 0x7F;
  
  __HAL_LOCK(hpcd);
 8001ede:	2002      	movs	r0, #2
    USB_EPStartXfer(hpcd->Instance , ep);
  }
  __HAL_UNLOCK(hpcd);
  
  return HAL_OK;
}
 8001ee0:	bd70      	pop	{r4, r5, r6, pc}

08001ee2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ee2:	b570      	push	{r4, r5, r6, lr}
 8001ee4:	4604      	mov	r4, r0
 8001ee6:	f001 067f 	and.w	r6, r1, #127	; 0x7f
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8001eea:	0170      	lsls	r0, r6, #5
 8001eec:	1825      	adds	r5, r4, r0
  ep->xfer_len = len;
 8001eee:	642b      	str	r3, [r5, #64]	; 0x40
  ep->xfer_count = 0;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	646b      	str	r3, [r5, #68]	; 0x44
  ep->is_in = 1;
 8001ef4:	2301      	movs	r3, #1
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8001ef6:	63ea      	str	r2, [r5, #60]	; 0x3c
  ep->xfer_len = len;
  ep->xfer_count = 0;
  ep->is_in = 1;
 8001ef8:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
  ep->num = ep_addr & 0x7F;
 8001efc:	f885 6028 	strb.w	r6, [r5, #40]	; 0x28
  
  __HAL_LOCK(hpcd);
 8001f00:	f894 23e8 	ldrb.w	r2, [r4, #1000]	; 0x3e8
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d00a      	beq.n	8001f1e <HAL_PCD_EP_Transmit+0x3c>
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001f08:	3028      	adds	r0, #40	; 0x28
 8001f0a:	1821      	adds	r1, r4, r0
  ep->xfer_len = len;
  ep->xfer_count = 0;
  ep->is_in = 1;
  ep->num = ep_addr & 0x7F;
  
  __HAL_LOCK(hpcd);
 8001f0c:	f884 33e8 	strb.w	r3, [r4, #1000]	; 0x3e8
  
  if ((ep_addr & 0x7F) == 0 )
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
 8001f10:	6820      	ldr	r0, [r4, #0]
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 8001f12:	f7ff fa05 	bl	8001320 <USB_EPStartXfer>
  }
  
  __HAL_UNLOCK(hpcd);
 8001f16:	2000      	movs	r0, #0
 8001f18:	f884 03e8 	strb.w	r0, [r4, #1000]	; 0x3e8
  
  return HAL_OK;
 8001f1c:	bd70      	pop	{r4, r5, r6, pc}
  ep->xfer_len = len;
  ep->xfer_count = 0;
  ep->is_in = 1;
  ep->num = ep_addr & 0x7F;
  
  __HAL_LOCK(hpcd);
 8001f1e:	2002      	movs	r0, #2
  }
  
  __HAL_UNLOCK(hpcd);
  
  return HAL_OK;
}
 8001f20:	bd70      	pop	{r4, r5, r6, pc}

08001f22 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001f22:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001f26:	4604      	mov	r4, r0
  uint32_t wInterrupt_Mask = 0;
  
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 8001f28:	6800      	ldr	r0, [r0, #0]
 8001f2a:	f7ff f9e2 	bl	80012f2 <USB_ReadInterrupts>
 8001f2e:	0400      	lsls	r0, r0, #16
 8001f30:	d416      	bmi.n	8001f60 <HAL_PCD_IRQHandler+0x3e>
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    PCD_EP_ISR_Handler(hpcd);
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 8001f32:	6820      	ldr	r0, [r4, #0]
 8001f34:	f7ff f9dd 	bl	80012f2 <USB_ReadInterrupts>
 8001f38:	0541      	lsls	r1, r0, #21
 8001f3a:	f140 81db 	bpl.w	80022f4 <HAL_PCD_IRQHandler+0x3d2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001f3e:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 8001f40:	4620      	mov	r0, r4
    PCD_EP_ISR_Handler(hpcd);
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001f42:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001f46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f4a:	041b      	lsls	r3, r3, #16
 8001f4c:	0c1b      	lsrs	r3, r3, #16
 8001f4e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8001f52:	f7fe f984 	bl	800025e <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0);
 8001f56:	2100      	movs	r1, #0
 8001f58:	4620      	mov	r0, r4
 8001f5a:	f7ff ff46 	bl	8001dea <HAL_PCD_SetAddress>
 8001f5e:	e1c9      	b.n	80022f4 <HAL_PCD_IRQHandler+0x3d2>
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
  PCD_EPTypeDef *ep = NULL;
  uint16_t count = 0;
  uint8_t epindex = 0;
  __IO uint16_t wIstr = 0;  
 8001f60:	2300      	movs	r3, #0
 8001f62:	f8ad 3004 	strh.w	r3, [sp, #4]
        
        if ((wEPVal & USB_EP_SETUP) != 0)
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8001f66:	f504 777b 	add.w	r7, r4, #1004	; 0x3ec
{
  PCD_EPTypeDef *ep = NULL;
  uint16_t count = 0;
  uint8_t epindex = 0;
  __IO uint16_t wIstr = 0;  
  __IO uint16_t wEPVal = 0;
 8001f6a:	f8ad 3006 	strh.w	r3, [sp, #6]
  
  /* stay in loop while pending interrupts */
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 8001f6e:	6820      	ldr	r0, [r4, #0]
 8001f70:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	f8ad 3004 	strh.w	r3, [sp, #4]
 8001f7a:	041b      	lsls	r3, r3, #16
 8001f7c:	d5d9      	bpl.n	8001f32 <HAL_PCD_IRQHandler+0x10>
  {
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001f7e:	f8bd 5004 	ldrh.w	r5, [sp, #4]
    
    if (epindex == 0)
 8001f82:	f015 050f 	ands.w	r5, r5, #15
 8001f86:	f040 80b5 	bne.w	80020f4 <HAL_PCD_IRQHandler+0x1d2>
    {
      /* Decode and service control endpoint interrupt */
      
      /* DIR bit = origin of the interrupt */   
      if ((wIstr & USB_ISTR_DIR) == 0)
 8001f8a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
      {
        /* DIR = 0 */
        
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f8e:	8803      	ldrh	r3, [r0, #0]
    if (epindex == 0)
    {
      /* Decode and service control endpoint interrupt */
      
      /* DIR bit = origin of the interrupt */   
      if ((wIstr & USB_ISTR_DIR) == 0)
 8001f90:	f001 0110 	and.w	r1, r1, #16
 8001f94:	b289      	uxth	r1, r1
 8001f96:	bb59      	cbnz	r1, 8001ff0 <HAL_PCD_IRQHandler+0xce>
      {
        /* DIR = 0 */
        
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f98:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001f9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fa0:	041b      	lsls	r3, r3, #16
 8001fa2:	0c1b      	lsrs	r3, r3, #16
 8001fa4:	8003      	strh	r3, [r0, #0]
        ep = &hpcd->IN_ep[0];
        
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001fa6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001faa:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001fb4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8001fb8:	f8d0 3404 	ldr.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 8001fbc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
        ep = &hpcd->IN_ep[0];
        
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001fbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fc2:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8001fc4:	4413      	add	r3, r2
 8001fc6:	63e3      	str	r3, [r4, #60]	; 0x3c
 
        /* TX COMPLETE */
        HAL_PCD_DataInStageCallback(hpcd, 0);
 8001fc8:	4620      	mov	r0, r4
 8001fca:	f7fe f93d 	bl	8000248 <HAL_PCD_DataInStageCallback>
        
        
        if((hpcd->USB_Address > 0)&& ( ep->xfer_len == 0))
 8001fce:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d0cb      	beq.n	8001f6e <HAL_PCD_IRQHandler+0x4c>
 8001fd6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001fd8:	2a00      	cmp	r2, #0
 8001fda:	d1c8      	bne.n	8001f6e <HAL_PCD_IRQHandler+0x4c>
        {
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 8001fdc:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001fe0:	6821      	ldr	r1, [r4, #0]
 8001fe2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fe6:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0;
 8001fea:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8001fee:	e7be      	b.n	8001f6e <HAL_PCD_IRQHandler+0x4c>
        /* DIR = 1 */
        
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	f8ad 3006 	strh.w	r3, [sp, #6]
        
        if ((wEPVal & USB_EP_SETUP) != 0)
 8001ff6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001ffa:	051a      	lsls	r2, r3, #20
 8001ffc:	d51e      	bpl.n	800203c <HAL_PCD_IRQHandler+0x11a>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ffe:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002002:	f894 2208 	ldrb.w	r2, [r4, #520]	; 0x208
 8002006:	b29b      	uxth	r3, r3
 8002008:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800200c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002010:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8002014:	f8b4 220c 	ldrh.w	r2, [r4, #524]	; 0x20c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
        
        if ((wEPVal & USB_EP_SETUP) != 0)
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002018:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800201c:	f8c4 3224 	str.w	r3, [r4, #548]	; 0x224
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8002020:	4639      	mov	r1, r7
 8002022:	f7ff fa4d 	bl	80014c0 <USB_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1*/ 
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 8002026:	6822      	ldr	r2, [r4, #0]
          
          /* Process SETUP Packet*/
          HAL_PCD_SetupStageCallback(hpcd);
 8002028:	4620      	mov	r0, r4
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
          /* SETUP bit kept frozen while CTR_RX = 1*/ 
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 800202a:	8813      	ldrh	r3, [r2, #0]
 800202c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002030:	051b      	lsls	r3, r3, #20
 8002032:	0d1b      	lsrs	r3, r3, #20
 8002034:	8013      	strh	r3, [r2, #0]
          
          /* Process SETUP Packet*/
          HAL_PCD_SetupStageCallback(hpcd);
 8002036:	f7fe f8f9 	bl	800022c <HAL_PCD_SetupStageCallback>
 800203a:	e798      	b.n	8001f6e <HAL_PCD_IRQHandler+0x4c>
        }
        
        else if ((wEPVal & USB_EP_CTR_RX) != 0)
 800203c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8002040:	041b      	lsls	r3, r3, #16
 8002042:	d594      	bpl.n	8001f6e <HAL_PCD_IRQHandler+0x4c>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002044:	8803      	ldrh	r3, [r0, #0]
 8002046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800204a:	051b      	lsls	r3, r3, #20
 800204c:	0d1b      	lsrs	r3, r3, #20
 800204e:	8003      	strh	r3, [r0, #0]
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002050:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002054:	f894 2208 	ldrb.w	r2, [r4, #520]	; 0x208
 8002058:	b29b      	uxth	r3, r3
 800205a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800205e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002062:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002066:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800206a:	f8c4 3224 	str.w	r3, [r4, #548]	; 0x224
          
          if (ep->xfer_count != 0)
 800206e:	b163      	cbz	r3, 800208a <HAL_PCD_IRQHandler+0x168>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8002070:	f8b4 220c 	ldrh.w	r2, [r4, #524]	; 0x20c
 8002074:	f8d4 121c 	ldr.w	r1, [r4, #540]	; 0x21c
 8002078:	f7ff fa22 	bl	80014c0 <USB_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 800207c:	f8d4 221c 	ldr.w	r2, [r4, #540]	; 0x21c
 8002080:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
 8002084:	4413      	add	r3, r2
 8002086:	f8c4 321c 	str.w	r3, [r4, #540]	; 0x21c
          }
          
          /* Process Control Data OUT Packet*/
           HAL_PCD_DataOutStageCallback(hpcd, 0);
 800208a:	2100      	movs	r1, #0
 800208c:	4620      	mov	r0, r4
 800208e:	f7fe f8d3 	bl	8000238 <HAL_PCD_DataOutStageCallback>
          
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002092:	6822      	ldr	r2, [r4, #0]
 8002094:	f8d4 5218 	ldr.w	r5, [r4, #536]	; 0x218
 8002098:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 800209c:	2d3e      	cmp	r5, #62	; 0x3e
 800209e:	b289      	uxth	r1, r1
 80020a0:	f101 0106 	add.w	r1, r1, #6
 80020a4:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 80020a8:	d90b      	bls.n	80020c2 <HAL_PCD_IRQHandler+0x1a0>
 80020aa:	f3c5 134f 	ubfx	r3, r5, #5, #16
 80020ae:	06ee      	lsls	r6, r5, #27
 80020b0:	bf04      	itt	eq
 80020b2:	f103 33ff 	addeq.w	r3, r3, #4294967295
 80020b6:	b29b      	uxtheq	r3, r3
 80020b8:	ea6f 63c3 	mvn.w	r3, r3, lsl #27
 80020bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020c0:	e006      	b.n	80020d0 <HAL_PCD_IRQHandler+0x1ae>
 80020c2:	f3c5 034f 	ubfx	r3, r5, #1, #16
 80020c6:	07ed      	lsls	r5, r5, #31
 80020c8:	bf44      	itt	mi
 80020ca:	3301      	addmi	r3, #1
 80020cc:	b29b      	uxthmi	r3, r3
 80020ce:	029b      	lsls	r3, r3, #10
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	f840 3011 	str.w	r3, [r0, r1, lsl #1]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80020d6:	8813      	ldrh	r3, [r2, #0]
 80020d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020e0:	041b      	lsls	r3, r3, #16
 80020e2:	0c1b      	lsrs	r3, r3, #16
 80020e4:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80020e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020f0:	8013      	strh	r3, [r2, #0]
 80020f2:	e73c      	b.n	8001f6e <HAL_PCD_IRQHandler+0x4c>
    else
    {
      /* Decode and service non control endpoints interrupt  */
	  
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80020f4:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	f8ad 3006 	strh.w	r3, [sp, #6]
      if ((wEPVal & USB_EP_CTR_RX) != 0)
 80020fe:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8002102:	0419      	lsls	r1, r3, #16
 8002104:	d577      	bpl.n	80021f6 <HAL_PCD_IRQHandler+0x2d4>
      {  
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002106:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
        ep = &hpcd->OUT_ep[epindex];
        
        /* OUT double Buffering*/
        if (ep->doublebuffer == 0)
 800210a:	ea4f 1845 	mov.w	r8, r5, lsl #5
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
      if ((wEPVal & USB_EP_CTR_RX) != 0)
      {  
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800210e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002112:	051b      	lsls	r3, r3, #20
 8002114:	0d1b      	lsrs	r3, r3, #20
 8002116:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        ep = &hpcd->OUT_ep[epindex];
        
        /* OUT double Buffering*/
        if (ep->doublebuffer == 0)
 800211a:	eb04 0108 	add.w	r1, r4, r8
 800211e:	f891 3212 	ldrb.w	r3, [r1, #530]	; 0x212
 8002122:	b9ab      	cbnz	r3, 8002150 <HAL_PCD_IRQHandler+0x22e>
        {
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002124:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002128:	f891 2208 	ldrb.w	r2, [r1, #520]	; 0x208
 800212c:	b29b      	uxth	r3, r3
 800212e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002132:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002136:	f8d3 640c 	ldr.w	r6, [r3, #1036]	; 0x40c
 800213a:	f3c6 0609 	ubfx	r6, r6, #0, #10
          if (count != 0)
 800213e:	b3de      	cbz	r6, 80021b8 <HAL_PCD_IRQHandler+0x296>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002140:	f8b1 220c 	ldrh.w	r2, [r1, #524]	; 0x20c
 8002144:	4633      	mov	r3, r6
 8002146:	f8d1 121c 	ldr.w	r1, [r1, #540]	; 0x21c
 800214a:	f7ff f9b9 	bl	80014c0 <USB_ReadPMA>
 800214e:	e033      	b.n	80021b8 <HAL_PCD_IRQHandler+0x296>
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8002150:	f891 3208 	ldrb.w	r3, [r1, #520]	; 0x208
 8002154:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002158:	00db      	lsls	r3, r3, #3
 800215a:	f412 4f80 	tst.w	r2, #16384	; 0x4000
          {
            /*read from endpoint BUF0Addr buffer*/
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800215e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002162:	b292      	uxth	r2, r2
 8002164:	4413      	add	r3, r2
 8002166:	eb00 0343 	add.w	r3, r0, r3, lsl #1
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 800216a:	d008      	beq.n	800217e <HAL_PCD_IRQHandler+0x25c>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800216c:	f8d3 6404 	ldr.w	r6, [r3, #1028]	; 0x404
 8002170:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0)
 8002174:	b17e      	cbz	r6, 8002196 <HAL_PCD_IRQHandler+0x274>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002176:	4633      	mov	r3, r6
 8002178:	f8b1 220e 	ldrh.w	r2, [r1, #526]	; 0x20e
 800217c:	e007      	b.n	800218e <HAL_PCD_IRQHandler+0x26c>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800217e:	f8d3 640c 	ldr.w	r6, [r3, #1036]	; 0x40c
 8002182:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0)
 8002186:	b136      	cbz	r6, 8002196 <HAL_PCD_IRQHandler+0x274>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002188:	4633      	mov	r3, r6
 800218a:	f8b1 2210 	ldrh.w	r2, [r1, #528]	; 0x210
 800218e:	f8d1 121c 	ldr.w	r1, [r1, #540]	; 0x21c
 8002192:	f7ff f995 	bl	80014c0 <USB_ReadPMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 8002196:	eb04 0308 	add.w	r3, r4, r8
 800219a:	f893 1208 	ldrb.w	r1, [r3, #520]	; 0x208
 800219e:	6822      	ldr	r2, [r4, #0]
 80021a0:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80021a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021a8:	051b      	lsls	r3, r3, #20
 80021aa:	0d1b      	lsrs	r3, r3, #20
 80021ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80021b4:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 80021b8:	eb04 0108 	add.w	r1, r4, r8
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
 80021bc:	f8d1 3224 	ldr.w	r3, [r1, #548]	; 0x224
        ep->xfer_buff+=count;
 80021c0:	f8d1 221c 	ldr.w	r2, [r1, #540]	; 0x21c
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
 80021c4:	4433      	add	r3, r6
 80021c6:	f8c1 3224 	str.w	r3, [r1, #548]	; 0x224
        ep->xfer_buff+=count;
       
        if ((ep->xfer_len == 0) || (count < ep->maxpacket))
 80021ca:	f8d1 3220 	ldr.w	r3, [r1, #544]	; 0x220
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
        ep->xfer_buff+=count;
 80021ce:	4432      	add	r2, r6
 80021d0:	f8c1 221c 	str.w	r2, [r1, #540]	; 0x21c
       
        if ((ep->xfer_len == 0) || (count < ep->maxpacket))
 80021d4:	b11b      	cbz	r3, 80021de <HAL_PCD_IRQHandler+0x2bc>
 80021d6:	f8d1 0218 	ldr.w	r0, [r1, #536]	; 0x218
 80021da:	4286      	cmp	r6, r0
 80021dc:	d206      	bcs.n	80021ec <HAL_PCD_IRQHandler+0x2ca>
        {
          /* RX COMPLETE */
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80021de:	44a0      	add	r8, r4
 80021e0:	f898 1208 	ldrb.w	r1, [r8, #520]	; 0x208
 80021e4:	4620      	mov	r0, r4
 80021e6:	f7fe f827 	bl	8000238 <HAL_PCD_DataOutStageCallback>
 80021ea:	e004      	b.n	80021f6 <HAL_PCD_IRQHandler+0x2d4>
        }
        else
        {
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80021ec:	f891 1208 	ldrb.w	r1, [r1, #520]	; 0x208
 80021f0:	4620      	mov	r0, r4
 80021f2:	f7ff fe52 	bl	8001e9a <HAL_PCD_EP_Receive>
        }
        
      } /* if((wEPVal & EP_CTR_RX) */
      
      if ((wEPVal & USB_EP_CTR_TX) != 0)
 80021f6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80021fa:	061a      	lsls	r2, r3, #24
 80021fc:	f57f aeb7 	bpl.w	8001f6e <HAL_PCD_IRQHandler+0x4c>
      {
        ep = &hpcd->IN_ep[epindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002200:	6820      	ldr	r0, [r4, #0]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0)
 8002202:	016e      	lsls	r6, r5, #5
      if ((wEPVal & USB_EP_CTR_TX) != 0)
      {
        ep = &hpcd->IN_ep[epindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002204:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0)
 8002208:	19a1      	adds	r1, r4, r6
      if ((wEPVal & USB_EP_CTR_TX) != 0)
      {
        ep = &hpcd->IN_ep[epindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800220a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800220e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002212:	041b      	lsls	r3, r3, #16
 8002214:	0c1b      	lsrs	r3, r3, #16
 8002216:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0)
 800221a:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 800221e:	3502      	adds	r5, #2
 8002220:	b9b3      	cbnz	r3, 8002250 <HAL_PCD_IRQHandler+0x32e>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002222:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002226:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
 800222a:	b29b      	uxth	r3, r3
 800222c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002230:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002234:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002238:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 800223c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002240:	606b      	str	r3, [r5, #4]
          if (ep->xfer_count != 0)
 8002242:	2b00      	cmp	r3, #0
 8002244:	d038      	beq.n	80022b8 <HAL_PCD_IRQHandler+0x396>
          {
            USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8002246:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
 8002248:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 800224a:	f7ff f858 	bl	80012fe <USB_WritePMA>
 800224e:	e033      	b.n	80022b8 <HAL_PCD_IRQHandler+0x396>
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8002250:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8002254:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002258:	00db      	lsls	r3, r3, #3
 800225a:	f012 0f40 	tst.w	r2, #64	; 0x40
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800225e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002262:	b292      	uxth	r2, r2
 8002264:	4413      	add	r3, r2
 8002266:	eb00 0343 	add.w	r3, r0, r3, lsl #1
            USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 800226a:	d009      	beq.n	8002280 <HAL_PCD_IRQHandler+0x35e>
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800226c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002270:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8002274:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002278:	606b      	str	r3, [r5, #4]
            if (ep->xfer_count != 0)
 800227a:	b16b      	cbz	r3, 8002298 <HAL_PCD_IRQHandler+0x376>
            {
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 800227c:	8dca      	ldrh	r2, [r1, #46]	; 0x2e
 800227e:	e008      	b.n	8002292 <HAL_PCD_IRQHandler+0x370>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002280:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002284:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8002288:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800228c:	606b      	str	r3, [r5, #4]
            if (ep->xfer_count != 0)
 800228e:	b11b      	cbz	r3, 8002298 <HAL_PCD_IRQHandler+0x376>
            {
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8002290:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
 8002292:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8002294:	f7ff f833 	bl	80012fe <USB_WritePMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 8002298:	19a3      	adds	r3, r4, r6
 800229a:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 800229e:	6822      	ldr	r2, [r4, #0]
 80022a0:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80022a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022a8:	051b      	lsls	r3, r3, #20
 80022aa:	0d1b      	lsrs	r3, r3, #20
 80022ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022b4:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80022b8:	6820      	ldr	r0, [r4, #0]
 80022ba:	19a1      	adds	r1, r4, r6
 80022bc:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80022c0:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 80022c4:	b292      	uxth	r2, r2
 80022c6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80022ca:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80022ce:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
        ep->xfer_buff+=ep->xfer_count;
 80022d2:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80022d4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80022d8:	644a      	str	r2, [r1, #68]	; 0x44
        ep->xfer_buff+=ep->xfer_count;
 80022da:	441a      	add	r2, r3
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0)
 80022dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
        ep->xfer_buff+=ep->xfer_count;
 80022de:	63ca      	str	r2, [r1, #60]	; 0x3c
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0)
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80022e0:	4620      	mov	r0, r4
 80022e2:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
        ep->xfer_buff+=ep->xfer_count;
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0)
 80022e6:	b913      	cbnz	r3, 80022ee <HAL_PCD_IRQHandler+0x3cc>
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80022e8:	f7fd ffae 	bl	8000248 <HAL_PCD_DataInStageCallback>
 80022ec:	e63f      	b.n	8001f6e <HAL_PCD_IRQHandler+0x4c>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80022ee:	f7ff fdf8 	bl	8001ee2 <HAL_PCD_EP_Transmit>
 80022f2:	e63c      	b.n	8001f6e <HAL_PCD_IRQHandler+0x4c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
    HAL_PCD_ResetCallback(hpcd);
    HAL_PCD_SetAddress(hpcd, 0);
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 80022f4:	6820      	ldr	r0, [r4, #0]
 80022f6:	f7fe fffc 	bl	80012f2 <USB_ReadInterrupts>
 80022fa:	0447      	lsls	r7, r0, #17
 80022fc:	d508      	bpl.n	8002310 <HAL_PCD_IRQHandler+0x3ee>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 80022fe:	6822      	ldr	r2, [r4, #0]
 8002300:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002304:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002308:	041b      	lsls	r3, r3, #16
 800230a:	0c1b      	lsrs	r3, r3, #16
 800230c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  }
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 8002310:	6820      	ldr	r0, [r4, #0]
 8002312:	f7fe ffee 	bl	80012f2 <USB_ReadInterrupts>
 8002316:	0486      	lsls	r6, r0, #18
 8002318:	d508      	bpl.n	800232c <HAL_PCD_IRQHandler+0x40a>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 800231a:	6822      	ldr	r2, [r4, #0]
 800231c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002320:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002324:	041b      	lsls	r3, r3, #16
 8002326:	0c1b      	lsrs	r3, r3, #16
 8002328:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 800232c:	6820      	ldr	r0, [r4, #0]
 800232e:	f7fe ffe0 	bl	80012f2 <USB_ReadInterrupts>
 8002332:	04c5      	lsls	r5, r0, #19
 8002334:	d518      	bpl.n	8002368 <HAL_PCD_IRQHandler+0x446>
  {  
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 8002336:	6822      	ldr	r2, [r4, #0]
      | USB_CNTR_ESOFM | USB_CNTR_RESETM;
    
    /*Set interrupt mask*/
    hpcd->Instance->CNTR = wInterrupt_Mask;
    
    HAL_PCD_ResumeCallback(hpcd);
 8002338:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
  {  
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 800233a:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800233e:	f023 0304 	bic.w	r3, r3, #4
 8002342:	041b      	lsls	r3, r3, #16
 8002344:	0c1b      	lsrs	r3, r3, #16
 8002346:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    /*set wInterrupt_Mask global variable*/
    wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
      | USB_CNTR_ESOFM | USB_CNTR_RESETM;
    
    /*Set interrupt mask*/
    hpcd->Instance->CNTR = wInterrupt_Mask;
 800234a:	f44f 433d 	mov.w	r3, #48384	; 0xbd00
 800234e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    
    HAL_PCD_ResumeCallback(hpcd);
 8002352:	f7fd ffa1 	bl	8000298 <HAL_PCD_ResumeCallback>
    
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 8002356:	6822      	ldr	r2, [r4, #0]
 8002358:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800235c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002360:	041b      	lsls	r3, r3, #16
 8002362:	0c1b      	lsrs	r3, r3, #16
 8002364:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 8002368:	6820      	ldr	r0, [r4, #0]
 800236a:	f7fe ffc2 	bl	80012f2 <USB_ReadInterrupts>
 800236e:	0500      	lsls	r0, r0, #20
 8002370:	d51d      	bpl.n	80023ae <HAL_PCD_IRQHandler+0x48c>
  {
    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 8002372:	6820      	ldr	r0, [r4, #0]
 8002374:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8002378:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800237c:	041b      	lsls	r3, r3, #16
 800237e:	0c1b      	lsrs	r3, r3, #16
 8002380:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8002384:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8002388:	b29b      	uxth	r3, r3
 800238a:	f043 0308 	orr.w	r3, r3, #8
 800238e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8002392:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8002396:	b29b      	uxth	r3, r3
 8002398:	f043 0304 	orr.w	r3, r3, #4
 800239c:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0)
 80023a0:	f7fe ffa7 	bl	80012f2 <USB_ReadInterrupts>
 80023a4:	04c1      	lsls	r1, r0, #19
 80023a6:	d402      	bmi.n	80023ae <HAL_PCD_IRQHandler+0x48c>
    {
      HAL_PCD_SuspendCallback(hpcd);
 80023a8:	4620      	mov	r0, r4
 80023aa:	f7fd ff65 	bl	8000278 <HAL_PCD_SuspendCallback>
    }
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 80023ae:	6820      	ldr	r0, [r4, #0]
 80023b0:	f7fe ff9f 	bl	80012f2 <USB_ReadInterrupts>
 80023b4:	0582      	lsls	r2, r0, #22
 80023b6:	d50b      	bpl.n	80023d0 <HAL_PCD_IRQHandler+0x4ae>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 80023b8:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 80023ba:	4620      	mov	r0, r4
    }
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 80023bc:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80023c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80023c4:	041b      	lsls	r3, r3, #16
 80023c6:	0c1b      	lsrs	r3, r3, #16
 80023c8:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 80023cc:	f7fd ff43 	bl	8000256 <HAL_PCD_SOFCallback>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 80023d0:	6820      	ldr	r0, [r4, #0]
 80023d2:	f7fe ff8e 	bl	80012f2 <USB_ReadInterrupts>
 80023d6:	05c3      	lsls	r3, r0, #23
 80023d8:	d508      	bpl.n	80023ec <HAL_PCD_IRQHandler+0x4ca>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 80023da:	6822      	ldr	r2, [r4, #0]
 80023dc:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80023e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023e4:	041b      	lsls	r3, r3, #16
 80023e6:	0c1b      	lsrs	r3, r3, #16
 80023e8:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  }
}
 80023ec:	b002      	add	sp, #8
 80023ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080023f2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023f2:	b538      	push	{r3, r4, r5, lr}
  PCD_EPTypeDef *ep = NULL;
  
  if ((0x80 & ep_addr) == 0x80)
 80023f4:	b24b      	sxtb	r3, r1
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80023fc:	bfb5      	itete	lt
 80023fe:	eb00 1145 	addlt.w	r1, r0, r5, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002402:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
{
  PCD_EPTypeDef *ep = NULL;
  
  if ((0x80 & ep_addr) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8002406:	3128      	addlt	r1, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002408:	f501 7102 	addge.w	r1, r1, #520	; 0x208
  }
  
  ep->is_stall = 1;
 800240c:	2201      	movs	r2, #1
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 800240e:	0fdb      	lsrs	r3, r3, #31
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }
  
  ep->is_stall = 1;
  ep->num   = ep_addr & 0x7F;
 8002410:	b2ed      	uxtb	r5, r5
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }
  
  ep->is_stall = 1;
 8002412:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 8002414:	700d      	strb	r5, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8002416:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd);
 8002418:	f890 33e8 	ldrb.w	r3, [r0, #1000]	; 0x3e8
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800241c:	4604      	mov	r4, r0
  
  ep->is_stall = 1;
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
  
  __HAL_LOCK(hpcd);
 800241e:	4293      	cmp	r3, r2
 8002420:	d00e      	beq.n	8002440 <HAL_PCD_EP_SetStall+0x4e>
 8002422:	f880 23e8 	strb.w	r2, [r0, #1000]	; 0x3e8
  USB_EPSetStall(hpcd->Instance , ep);
 8002426:	6800      	ldr	r0, [r0, #0]
 8002428:	f7fe fee6 	bl	80011f8 <USB_EPSetStall>
  if((ep_addr & 0x7F) == 0)
 800242c:	b925      	cbnz	r5, 8002438 <HAL_PCD_EP_SetStall+0x46>
  {
    USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800242e:	f504 717b 	add.w	r1, r4, #1004	; 0x3ec
 8002432:	6820      	ldr	r0, [r4, #0]
 8002434:	f7fe ff61 	bl	80012fa <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd); 
 8002438:	2000      	movs	r0, #0
 800243a:	f884 03e8 	strb.w	r0, [r4, #1000]	; 0x3e8
  
  return HAL_OK;
 800243e:	bd38      	pop	{r3, r4, r5, pc}
  
  ep->is_stall = 1;
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
  
  __HAL_LOCK(hpcd);
 8002440:	2002      	movs	r0, #2
    USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
  }
  __HAL_UNLOCK(hpcd); 
  
  return HAL_OK;
}
 8002442:	bd38      	pop	{r3, r4, r5, pc}

08002444 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002444:	b538      	push	{r3, r4, r5, lr}
  PCD_EPTypeDef *ep = NULL;
  
  if ((0x80 & ep_addr) == 0x80)
 8002446:	b24b      	sxtb	r3, r1
 8002448:	2b00      	cmp	r3, #0
 800244a:	f001 027f 	and.w	r2, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800244e:	bfb5      	itete	lt
 8002450:	eb00 1142 	addlt.w	r1, r0, r2, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002454:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
{
  PCD_EPTypeDef *ep = NULL;
  
  if ((0x80 & ep_addr) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8002458:	3128      	addlt	r1, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800245a:	f501 7102 	addge.w	r1, r1, #520	; 0x208
  }
  
  ep->is_stall = 0;
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 800245e:	0fdb      	lsrs	r3, r3, #31
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }
  
  ep->is_stall = 0;
 8002460:	2400      	movs	r4, #0
 8002462:	708c      	strb	r4, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 8002464:	700a      	strb	r2, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8002466:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd); 
 8002468:	f890 33e8 	ldrb.w	r3, [r0, #1000]	; 0x3e8
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800246c:	4605      	mov	r5, r0
  
  ep->is_stall = 0;
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
  
  __HAL_LOCK(hpcd); 
 800246e:	2b01      	cmp	r3, #1
 8002470:	d009      	beq.n	8002486 <HAL_PCD_EP_ClrStall+0x42>
 8002472:	2301      	movs	r3, #1
 8002474:	f880 33e8 	strb.w	r3, [r0, #1000]	; 0x3e8
  USB_EPClearStall(hpcd->Instance , ep);
 8002478:	6800      	ldr	r0, [r0, #0]
 800247a:	f7fe feee 	bl	800125a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 800247e:	f885 43e8 	strb.w	r4, [r5, #1000]	; 0x3e8
  
  return HAL_OK;
 8002482:	4620      	mov	r0, r4
 8002484:	bd38      	pop	{r3, r4, r5, pc}
  
  ep->is_stall = 0;
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
  
  __HAL_LOCK(hpcd); 
 8002486:	2002      	movs	r0, #2
  USB_EPClearStall(hpcd->Instance , ep);
  __HAL_UNLOCK(hpcd); 
  
  return HAL_OK;
}
 8002488:	bd38      	pop	{r3, r4, r5, pc}
	...

0800248c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800248c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t temp = 0x00;
  uint32_t config = 0x00;
 8002490:	2400      	movs	r4, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002492:	4626      	mov	r6, r4
 8002494:	4b62      	ldr	r3, [pc, #392]	; (8002620 <HAL_GPIO_Init+0x194>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002496:	f8df e194 	ldr.w	lr, [pc, #404]	; 800262c <HAL_GPIO_Init+0x1a0>
 800249a:	f8df c194 	ldr.w	ip, [pc, #404]	; 8002630 <HAL_GPIO_Init+0x1a4>

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800249e:	2201      	movs	r2, #1
    
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if (iocurrent == ioposition)
 80024a0:	680d      	ldr	r5, [r1, #0]

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80024a2:	40b2      	lsls	r2, r6
    
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if (iocurrent == ioposition)
 80024a4:	ea32 0505 	bics.w	r5, r2, r5
 80024a8:	f040 80b3 	bne.w	8002612 <HAL_GPIO_Init+0x186>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80024ac:	684d      	ldr	r5, [r1, #4]
 80024ae:	2d12      	cmp	r5, #18
 80024b0:	d028      	beq.n	8002504 <HAL_GPIO_Init+0x78>
 80024b2:	d80e      	bhi.n	80024d2 <HAL_GPIO_Init+0x46>
 80024b4:	2d02      	cmp	r5, #2
 80024b6:	d022      	beq.n	80024fe <HAL_GPIO_Init+0x72>
 80024b8:	d804      	bhi.n	80024c4 <HAL_GPIO_Init+0x38>
 80024ba:	b335      	cbz	r5, 800250a <HAL_GPIO_Init+0x7e>
 80024bc:	2d01      	cmp	r5, #1
 80024be:	d12d      	bne.n	800251c <HAL_GPIO_Init+0x90>
      {
        /* If we are configuring the pin in OUTPUT push-pull mode */
        case GPIO_MODE_OUTPUT_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80024c0:	68cc      	ldr	r4, [r1, #12]
          break;
 80024c2:	e02b      	b.n	800251c <HAL_GPIO_Init+0x90>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80024c4:	2d03      	cmp	r5, #3
 80024c6:	d018      	beq.n	80024fa <HAL_GPIO_Init+0x6e>
 80024c8:	2d11      	cmp	r5, #17
 80024ca:	d127      	bne.n	800251c <HAL_GPIO_Init+0x90>
          
        /* If we are configuring the pin in OUTPUT open-drain mode */
        case GPIO_MODE_OUTPUT_OD:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80024cc:	68cc      	ldr	r4, [r1, #12]
 80024ce:	3404      	adds	r4, #4
          break;
 80024d0:	e024      	b.n	800251c <HAL_GPIO_Init+0x90>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80024d2:	4f54      	ldr	r7, [pc, #336]	; (8002624 <HAL_GPIO_Init+0x198>)
 80024d4:	42bd      	cmp	r5, r7
 80024d6:	d018      	beq.n	800250a <HAL_GPIO_Init+0x7e>
 80024d8:	d806      	bhi.n	80024e8 <HAL_GPIO_Init+0x5c>
 80024da:	f8df 8158 	ldr.w	r8, [pc, #344]	; 8002634 <HAL_GPIO_Init+0x1a8>
 80024de:	4545      	cmp	r5, r8
 80024e0:	d013      	beq.n	800250a <HAL_GPIO_Init+0x7e>
 80024e2:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 80024e6:	e005      	b.n	80024f4 <HAL_GPIO_Init+0x68>
 80024e8:	4575      	cmp	r5, lr
 80024ea:	d00e      	beq.n	800250a <HAL_GPIO_Init+0x7e>
 80024ec:	4565      	cmp	r5, ip
 80024ee:	d00c      	beq.n	800250a <HAL_GPIO_Init+0x7e>
 80024f0:	f8df 8144 	ldr.w	r8, [pc, #324]	; 8002638 <HAL_GPIO_Init+0x1ac>
 80024f4:	4545      	cmp	r5, r8
 80024f6:	d111      	bne.n	800251c <HAL_GPIO_Init+0x90>
 80024f8:	e007      	b.n	800250a <HAL_GPIO_Init+0x7e>
          }
          break; 
          
        /* If we are configuring the pin in INPUT analog mode */
        case GPIO_MODE_ANALOG:
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80024fa:	2400      	movs	r4, #0
 80024fc:	e00e      	b.n	800251c <HAL_GPIO_Init+0x90>
          
        /* If we are configuring the pin in ALTERNATE FUNCTION push-pull mode */
        case GPIO_MODE_AF_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80024fe:	68cc      	ldr	r4, [r1, #12]
 8002500:	3408      	adds	r4, #8
          break;
 8002502:	e00b      	b.n	800251c <HAL_GPIO_Init+0x90>
          
        /* If we are configuring the pin in ALTERNATE FUNCTION open-drain mode */
        case GPIO_MODE_AF_OD:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002504:	68cc      	ldr	r4, [r1, #12]
 8002506:	340c      	adds	r4, #12
          break;
 8002508:	e008      	b.n	800251c <HAL_GPIO_Init+0x90>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if(GPIO_Init->Pull == GPIO_NOPULL)
 800250a:	688c      	ldr	r4, [r1, #8]
 800250c:	b12c      	cbz	r4, 800251a <HAL_GPIO_Init+0x8e>
          {  
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 800250e:	2c01      	cmp	r4, #1
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
            
            /* Set the corresponding ODR bit */
            GPIOx->BSRR = ioposition;
 8002510:	bf0c      	ite	eq
 8002512:	6102      	streq	r2, [r0, #16]
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
            
            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 8002514:	6142      	strne	r2, [r0, #20]
            /* Set the corresponding ODR bit */
            GPIOx->BSRR = ioposition;
          }
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002516:	2408      	movs	r4, #8
 8002518:	e000      	b.n	800251c <HAL_GPIO_Init+0x90>
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if(GPIO_Init->Pull == GPIO_NOPULL)
          {  
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800251a:	2404      	movs	r4, #4
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800251c:	2aff      	cmp	r2, #255	; 0xff
 800251e:	bf97      	itett	ls
 8002520:	4683      	movls	fp, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 8002522:	f1a6 0508 	subhi.w	r5, r6, #8
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002526:	f8d0 9000 	ldrls.w	r9, [r0]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 800252a:	00b5      	lslls	r5, r6, #2
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800252c:	bf84      	itt	hi
 800252e:	f8d0 9004 	ldrhi.w	r9, [r0, #4]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 8002532:	00ad      	lslhi	r5, r5, #2
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8002534:	f04f 080f 	mov.w	r8, #15
 8002538:	fa08 fa05 	lsl.w	sl, r8, r5
 800253c:	ea29 090a 	bic.w	r9, r9, sl
 8002540:	fa04 f505 	lsl.w	r5, r4, r5
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002544:	bf88      	it	hi
 8002546:	f100 0b04 	addhi.w	fp, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 800254a:	ea49 0505 	orr.w	r5, r9, r5
 800254e:	f8cb 5000 	str.w	r5, [fp]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8002552:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8002556:	f019 5f80 	tst.w	r9, #268435456	; 0x10000000
 800255a:	d05a      	beq.n	8002612 <HAL_GPIO_Init+0x186>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800255c:	4d32      	ldr	r5, [pc, #200]	; (8002628 <HAL_GPIO_Init+0x19c>)
 800255e:	4f32      	ldr	r7, [pc, #200]	; (8002628 <HAL_GPIO_Init+0x19c>)
 8002560:	69ad      	ldr	r5, [r5, #24]
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002562:	f006 0a03 	and.w	sl, r6, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002566:	f045 0501 	orr.w	r5, r5, #1
 800256a:	61bd      	str	r5, [r7, #24]
 800256c:	69bd      	ldr	r5, [r7, #24]
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 800256e:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002572:	f005 0501 	and.w	r5, r5, #1
 8002576:	9501      	str	r5, [sp, #4]
 8002578:	9d01      	ldr	r5, [sp, #4]
 800257a:	f026 0503 	bic.w	r5, r6, #3
 800257e:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8002582:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2];
 8002586:	f8d5 b008 	ldr.w	fp, [r5, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800258a:	f5a7 3784 	sub.w	r7, r7, #67584	; 0x10800
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 800258e:	fa08 f80a 	lsl.w	r8, r8, sl
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002592:	42b8      	cmp	r0, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002594:	ea2b 0808 	bic.w	r8, fp, r8
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002598:	d010      	beq.n	80025bc <HAL_GPIO_Init+0x130>
 800259a:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800259e:	42b8      	cmp	r0, r7
 80025a0:	d00f      	beq.n	80025c2 <HAL_GPIO_Init+0x136>
 80025a2:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80025a6:	42b8      	cmp	r0, r7
 80025a8:	d00e      	beq.n	80025c8 <HAL_GPIO_Init+0x13c>
 80025aa:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80025ae:	42b8      	cmp	r0, r7
 80025b0:	bf0c      	ite	eq
 80025b2:	f04f 0b03 	moveq.w	fp, #3
 80025b6:	f04f 0b04 	movne.w	fp, #4
 80025ba:	e007      	b.n	80025cc <HAL_GPIO_Init+0x140>
 80025bc:	f04f 0b00 	mov.w	fp, #0
 80025c0:	e004      	b.n	80025cc <HAL_GPIO_Init+0x140>
 80025c2:	f04f 0b01 	mov.w	fp, #1
 80025c6:	e001      	b.n	80025cc <HAL_GPIO_Init+0x140>
 80025c8:	f04f 0b02 	mov.w	fp, #2
 80025cc:	fa0b fa0a 	lsl.w	sl, fp, sl
 80025d0:	ea4a 0a08 	orr.w	sl, sl, r8
        AFIO->EXTICR[position >> 2] = temp;
 80025d4:	f8c5 a008 	str.w	sl, [r5, #8]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 80025d8:	681d      	ldr	r5, [r3, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        AFIO->EXTICR[position >> 2] = temp;
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025da:	f419 3f80 	tst.w	r9, #65536	; 0x10000
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 80025de:	bf14      	ite	ne
 80025e0:	4315      	orrne	r5, r2
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 80025e2:	4395      	biceq	r5, r2
 80025e4:	601d      	str	r5, [r3, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 80025e6:	685d      	ldr	r5, [r3, #4]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025e8:	f419 3f00 	tst.w	r9, #131072	; 0x20000
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 80025ec:	bf14      	ite	ne
 80025ee:	4315      	orrne	r5, r2
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 80025f0:	4395      	biceq	r5, r2
 80025f2:	605d      	str	r5, [r3, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 80025f4:	689d      	ldr	r5, [r3, #8]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025f6:	f419 1f80 	tst.w	r9, #1048576	; 0x100000
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 80025fa:	bf14      	ite	ne
 80025fc:	4315      	orrne	r5, r2
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 80025fe:	4395      	biceq	r5, r2
 8002600:	609d      	str	r5, [r3, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 8002602:	68dd      	ldr	r5, [r3, #12]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002604:	f419 1f00 	tst.w	r9, #2097152	; 0x200000
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 8002608:	bf14      	ite	ne
 800260a:	432a      	orrne	r2, r5
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 800260c:	ea25 0202 	biceq.w	r2, r5, r2
 8002610:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002612:	3601      	adds	r6, #1
 8002614:	2e10      	cmp	r6, #16
 8002616:	f47f af42 	bne.w	800249e <HAL_GPIO_Init+0x12>
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
        }
      }
    }
  }
}
 800261a:	b003      	add	sp, #12
 800261c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002620:	40010400 	.word	0x40010400
 8002624:	10210000 	.word	0x10210000
 8002628:	40021000 	.word	0x40021000
 800262c:	10310000 	.word	0x10310000
 8002630:	10320000 	.word	0x10320000
 8002634:	10110000 	.word	0x10110000
 8002638:	10220000 	.word	0x10220000

0800263c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800263c:	b902      	cbnz	r2, 8002640 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800263e:	0409      	lsls	r1, r1, #16
 8002640:	6101      	str	r1, [r0, #16]
 8002642:	4770      	bx	lr

08002644 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8002644:	68c3      	ldr	r3, [r0, #12]
 8002646:	4059      	eors	r1, r3
 8002648:	60c1      	str	r1, [r0, #12]
 800264a:	4770      	bx	lr

0800264c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800264c:	4a07      	ldr	r2, [pc, #28]	; (800266c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 800264e:	0200      	lsls	r0, r0, #8
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002650:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8002652:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8002656:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800265a:	041b      	lsls	r3, r3, #16
 800265c:	0c1b      	lsrs	r3, r3, #16
 800265e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002662:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002666:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8002668:	60d3      	str	r3, [r2, #12]
 800266a:	4770      	bx	lr
 800266c:	e000ed00 	.word	0xe000ed00

08002670 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002670:	4b17      	ldr	r3, [pc, #92]	; (80026d0 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002672:	b530      	push	{r4, r5, lr}
 8002674:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002676:	f3c3 2302 	ubfx	r3, r3, #8, #3
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800267a:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800267e:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002680:	2c04      	cmp	r4, #4
 8002682:	bf28      	it	cs
 8002684:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002686:	2d06      	cmp	r5, #6

  return (
 8002688:	f04f 0501 	mov.w	r5, #1
 800268c:	fa05 f404 	lsl.w	r4, r5, r4
 8002690:	f104 34ff 	add.w	r4, r4, #4294967295
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002694:	bf8c      	ite	hi
 8002696:	3b03      	subhi	r3, #3
 8002698:	2300      	movls	r3, #0

  return (
 800269a:	400c      	ands	r4, r1
 800269c:	409c      	lsls	r4, r3
 800269e:	fa05 f303 	lsl.w	r3, r5, r3
 80026a2:	3b01      	subs	r3, #1
 80026a4:	401a      	ands	r2, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80026a6:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 80026a8:	ea42 0204 	orr.w	r2, r2, r4
 80026ac:	ea4f 1202 	mov.w	r2, r2, lsl #4
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026b0:	bfaf      	iteee	ge
 80026b2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026b6:	4b07      	ldrlt	r3, [pc, #28]	; (80026d4 <HAL_NVIC_SetPriority+0x64>)
 80026b8:	f000 000f 	andlt.w	r0, r0, #15
 80026bc:	b2d2      	uxtblt	r2, r2
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026be:	bfa5      	ittet	ge
 80026c0:	b2d2      	uxtbge	r2, r2
 80026c2:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026c6:	541a      	strblt	r2, [r3, r0]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026c8:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80026cc:	bd30      	pop	{r4, r5, pc}
 80026ce:	bf00      	nop
 80026d0:	e000ed00 	.word	0xe000ed00
 80026d4:	e000ed14 	.word	0xe000ed14

080026d8 <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80026d8:	0942      	lsrs	r2, r0, #5
 80026da:	2301      	movs	r3, #1
 80026dc:	f000 001f 	and.w	r0, r0, #31
 80026e0:	fa03 f000 	lsl.w	r0, r3, r0
 80026e4:	4b01      	ldr	r3, [pc, #4]	; (80026ec <HAL_NVIC_EnableIRQ+0x14>)
 80026e6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80026ea:	4770      	bx	lr
 80026ec:	e000e100 	.word	0xe000e100

080026f0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026f0:	3801      	subs	r0, #1
 80026f2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80026f6:	d20a      	bcs.n	800270e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026f8:	4b06      	ldr	r3, [pc, #24]	; (8002714 <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026fa:	4a07      	ldr	r2, [pc, #28]	; (8002718 <HAL_SYSTICK_Config+0x28>)
 80026fc:	21f0      	movs	r1, #240	; 0xf0
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026fe:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002700:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002704:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002706:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002708:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800270a:	601a      	str	r2, [r3, #0]
 800270c:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 800270e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	e000e010 	.word	0xe000e010
 8002718:	e000ed00 	.word	0xe000ed00

0800271c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800271c:	4b04      	ldr	r3, [pc, #16]	; (8002730 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800271e:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	bf0c      	ite	eq
 8002724:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8002728:	f022 0204 	bicne.w	r2, r2, #4
 800272c:	601a      	str	r2, [r3, #0]
 800272e:	4770      	bx	lr
 8002730:	e000e010 	.word	0xe000e010

08002734 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8002734:	4770      	bx	lr

08002736 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8002736:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8002738:	f7ff fffc 	bl	8002734 <HAL_SYSTICK_Callback>
 800273c:	bd08      	pop	{r3, pc}

0800273e <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800273e:	b510      	push	{r4, lr}
 8002740:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002742:	f7ff fab3 	bl	8001cac <HAL_RCC_GetHCLKFreq>
 8002746:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800274a:	fbb0 f0f3 	udiv	r0, r0, r3
 800274e:	f7ff ffcf 	bl	80026f0 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8002752:	2200      	movs	r2, #0
 8002754:	4621      	mov	r1, r4
 8002756:	f04f 30ff 	mov.w	r0, #4294967295
 800275a:	f7ff ff89 	bl	8002670 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 800275e:	2000      	movs	r0, #0
 8002760:	bd10      	pop	{r4, pc}
	...

08002764 <HAL_Init>:
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002764:	4a07      	ldr	r2, [pc, #28]	; (8002784 <HAL_Init+0x20>)
  *        In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002766:	b508      	push	{r3, lr}
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002768:	6813      	ldr	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800276a:	2003      	movs	r0, #3
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800276c:	f043 0310 	orr.w	r3, r3, #16
 8002770:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002772:	f7ff ff6b 	bl	800264c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002776:	2000      	movs	r0, #0
 8002778:	f7ff ffe1 	bl	800273e <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800277c:	f7fd fe42 	bl	8000404 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8002780:	2000      	movs	r0, #0
 8002782:	bd08      	pop	{r3, pc}
 8002784:	40022000 	.word	0x40022000

08002788 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8002788:	4a02      	ldr	r2, [pc, #8]	; (8002794 <HAL_IncTick+0xc>)
 800278a:	6813      	ldr	r3, [r2, #0]
 800278c:	3301      	adds	r3, #1
 800278e:	6013      	str	r3, [r2, #0]
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	2000012c 	.word	0x2000012c

08002798 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002798:	4b01      	ldr	r3, [pc, #4]	; (80027a0 <HAL_GetTick+0x8>)
 800279a:	6818      	ldr	r0, [r3, #0]
}
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	2000012c 	.word	0x2000012c

080027a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80027a4:	b513      	push	{r0, r1, r4, lr}
 80027a6:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 80027a8:	f7ff fff6 	bl	8002798 <HAL_GetTick>
 80027ac:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 80027ae:	f7ff fff3 	bl	8002798 <HAL_GetTick>
 80027b2:	9b01      	ldr	r3, [sp, #4]
 80027b4:	1b00      	subs	r0, r0, r4
 80027b6:	4298      	cmp	r0, r3
 80027b8:	d3f9      	bcc.n	80027ae <HAL_Delay+0xa>
  {
  }
}
 80027ba:	b002      	add	sp, #8
 80027bc:	bd10      	pop	{r4, pc}
	...

080027c0 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80027c0:	4b0f      	ldr	r3, [pc, #60]	; (8002800 <SystemInit+0x40>)
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	f042 0201 	orr.w	r2, r2, #1
 80027c8:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80027ca:	6859      	ldr	r1, [r3, #4]
 80027cc:	4a0d      	ldr	r2, [pc, #52]	; (8002804 <SystemInit+0x44>)
 80027ce:	400a      	ands	r2, r1
 80027d0:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80027d8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80027dc:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80027e4:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80027e6:	685a      	ldr	r2, [r3, #4]
 80027e8:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80027ec:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80027ee:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80027f2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80027f4:	4b04      	ldr	r3, [pc, #16]	; (8002808 <SystemInit+0x48>)
 80027f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80027fa:	609a      	str	r2, [r3, #8]
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	40021000 	.word	0x40021000
 8002804:	f8ff0000 	.word	0xf8ff0000
 8002808:	e000ed00 	.word	0xe000ed00

0800280c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800280c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800280e:	e003      	b.n	8002818 <LoopCopyDataInit>

08002810 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002810:	4b0b      	ldr	r3, [pc, #44]	; (8002840 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002812:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002814:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002816:	3104      	adds	r1, #4

08002818 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002818:	480a      	ldr	r0, [pc, #40]	; (8002844 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800281a:	4b0b      	ldr	r3, [pc, #44]	; (8002848 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800281c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800281e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002820:	d3f6      	bcc.n	8002810 <CopyDataInit>
  ldr r2, =_sbss
 8002822:	4a0a      	ldr	r2, [pc, #40]	; (800284c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002824:	e002      	b.n	800282c <LoopFillZerobss>

08002826 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002826:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002828:	f842 3b04 	str.w	r3, [r2], #4

0800282c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800282c:	4b08      	ldr	r3, [pc, #32]	; (8002850 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800282e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002830:	d3f9      	bcc.n	8002826 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002832:	f7ff ffc5 	bl	80027c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002836:	f000 f80f 	bl	8002858 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800283a:	f7fd fe69 	bl	8000510 <main>
  bx lr
 800283e:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 8002840:	08002938 	.word	0x08002938
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 8002844:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002848:	200000f8 	.word	0x200000f8
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 800284c:	200000f8 	.word	0x200000f8
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 8002850:	2000097c 	.word	0x2000097c

08002854 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002854:	e7fe      	b.n	8002854 <ADC1_2_IRQHandler>
	...

08002858 <__libc_init_array>:
 8002858:	4b0e      	ldr	r3, [pc, #56]	; (8002894 <__libc_init_array+0x3c>)
 800285a:	b570      	push	{r4, r5, r6, lr}
 800285c:	461e      	mov	r6, r3
 800285e:	4c0e      	ldr	r4, [pc, #56]	; (8002898 <__libc_init_array+0x40>)
 8002860:	2500      	movs	r5, #0
 8002862:	1ae4      	subs	r4, r4, r3
 8002864:	10a4      	asrs	r4, r4, #2
 8002866:	42a5      	cmp	r5, r4
 8002868:	d004      	beq.n	8002874 <__libc_init_array+0x1c>
 800286a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800286e:	4798      	blx	r3
 8002870:	3501      	adds	r5, #1
 8002872:	e7f8      	b.n	8002866 <__libc_init_array+0xe>
 8002874:	f000 f816 	bl	80028a4 <_init>
 8002878:	4b08      	ldr	r3, [pc, #32]	; (800289c <__libc_init_array+0x44>)
 800287a:	4c09      	ldr	r4, [pc, #36]	; (80028a0 <__libc_init_array+0x48>)
 800287c:	461e      	mov	r6, r3
 800287e:	1ae4      	subs	r4, r4, r3
 8002880:	10a4      	asrs	r4, r4, #2
 8002882:	2500      	movs	r5, #0
 8002884:	42a5      	cmp	r5, r4
 8002886:	d004      	beq.n	8002892 <__libc_init_array+0x3a>
 8002888:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800288c:	4798      	blx	r3
 800288e:	3501      	adds	r5, #1
 8002890:	e7f8      	b.n	8002884 <__libc_init_array+0x2c>
 8002892:	bd70      	pop	{r4, r5, r6, pc}
 8002894:	08002930 	.word	0x08002930
 8002898:	08002930 	.word	0x08002930
 800289c:	08002930 	.word	0x08002930
 80028a0:	08002934 	.word	0x08002934

080028a4 <_init>:
 80028a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028a6:	bf00      	nop
 80028a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028aa:	bc08      	pop	{r3}
 80028ac:	469e      	mov	lr, r3
 80028ae:	4770      	bx	lr

080028b0 <_fini>:
 80028b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028b2:	bf00      	nop
 80028b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028b6:	bc08      	pop	{r3}
 80028b8:	469e      	mov	lr, r3
 80028ba:	4770      	bx	lr
