
D:\Documents\Atollic\test\Debug\test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002880  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  0800298c  0800298c  0001298c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002a00  08002a00  00012a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002a04  08002a04  00012a04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000fc  20000000  08002a08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000087c  200000fc  08002b04  000200fc  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000978  08002b04  00020978  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
  9 .debug_line   000044c3  00000000  00000000  00020125  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0000b77e  00000000  00000000  000245e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000026e2  00000000  00000000  0002fd66  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000818  00000000  00000000  00032448  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000009b8  00000000  00000000  00032c60  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000045d5  00000000  00000000  00033618  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002676  00000000  00000000  00037bed  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  0003a263  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000012fc  00000000  00000000  0003a2e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000fc 	.word	0x200000fc
 8000128:	00000000 	.word	0x00000000
 800012c:	08002974 	.word	0x08002974

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000100 	.word	0x20000100
 8000148:	08002974 	.word	0x08002974

0800014c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800014c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800014e:	e003      	b.n	8000158 <LoopCopyDataInit>

08000150 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000150:	4b0b      	ldr	r3, [pc, #44]	; (8000180 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000152:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000154:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000156:	3104      	adds	r1, #4

08000158 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000158:	480a      	ldr	r0, [pc, #40]	; (8000184 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800015a:	4b0b      	ldr	r3, [pc, #44]	; (8000188 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800015c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800015e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000160:	d3f6      	bcc.n	8000150 <CopyDataInit>
  ldr r2, =_sbss
 8000162:	4a0a      	ldr	r2, [pc, #40]	; (800018c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000164:	e002      	b.n	800016c <LoopFillZerobss>

08000166 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000166:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000168:	f842 3b04 	str.w	r3, [r2], #4

0800016c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800016c:	4b08      	ldr	r3, [pc, #32]	; (8000190 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800016e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000170:	d3f9      	bcc.n	8000166 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000172:	f000 f811 	bl	8000198 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000176:	f002 fbd7 	bl	8002928 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800017a:	f002 f965 	bl	8002448 <main>
  bx lr
 800017e:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 8000180:	08002a08 	.word	0x08002a08
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 8000184:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000188:	200000fc 	.word	0x200000fc
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 800018c:	200000fc 	.word	0x200000fc
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 8000190:	20000978 	.word	0x20000978

08000194 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000194:	e7fe      	b.n	8000194 <ADC1_2_IRQHandler>
	...

08000198 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000198:	4b0f      	ldr	r3, [pc, #60]	; (80001d8 <SystemInit+0x40>)
 800019a:	681a      	ldr	r2, [r3, #0]
 800019c:	f042 0201 	orr.w	r2, r2, #1
 80001a0:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80001a2:	6859      	ldr	r1, [r3, #4]
 80001a4:	4a0d      	ldr	r2, [pc, #52]	; (80001dc <SystemInit+0x44>)
 80001a6:	400a      	ands	r2, r1
 80001a8:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80001aa:	681a      	ldr	r2, [r3, #0]
 80001ac:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80001b0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80001b4:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80001b6:	681a      	ldr	r2, [r3, #0]
 80001b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80001bc:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80001be:	685a      	ldr	r2, [r3, #4]
 80001c0:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80001c4:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80001c6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80001ca:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <SystemInit+0x48>)
 80001ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80001d2:	609a      	str	r2, [r3, #8]
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	40021000 	.word	0x40021000
 80001dc:	f8ff0000 	.word	0xf8ff0000
 80001e0:	e000ed00 	.word	0xe000ed00

080001e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80001e8:	f001 f8e0 	bl	80013ac <HAL_RCC_GetHCLKFreq>
 80001ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001f0:	fbb0 f0f3 	udiv	r0, r0, r3
 80001f4:	f000 f888 	bl	8000308 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80001f8:	2200      	movs	r2, #0
 80001fa:	4621      	mov	r1, r4
 80001fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000200:	f000 f842 	bl	8000288 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000204:	2000      	movs	r0, #0
 8000206:	bd10      	pop	{r4, pc}

08000208 <HAL_Init>:
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000208:	4a07      	ldr	r2, [pc, #28]	; (8000228 <HAL_Init+0x20>)
  *        In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800020a:	b508      	push	{r3, lr}
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800020c:	6813      	ldr	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800020e:	2003      	movs	r0, #3
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000210:	f043 0310 	orr.w	r3, r3, #16
 8000214:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000216:	f000 f825 	bl	8000264 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800021a:	2000      	movs	r0, #0
 800021c:	f7ff ffe2 	bl	80001e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000220:	f002 f9e0 	bl	80025e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000224:	2000      	movs	r0, #0
 8000226:	bd08      	pop	{r3, pc}
 8000228:	40022000 	.word	0x40022000

0800022c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800022c:	4a02      	ldr	r2, [pc, #8]	; (8000238 <HAL_IncTick+0xc>)
 800022e:	6813      	ldr	r3, [r2, #0]
 8000230:	3301      	adds	r3, #1
 8000232:	6013      	str	r3, [r2, #0]
 8000234:	4770      	bx	lr
 8000236:	bf00      	nop
 8000238:	20000118 	.word	0x20000118

0800023c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800023c:	4b01      	ldr	r3, [pc, #4]	; (8000244 <HAL_GetTick+0x8>)
 800023e:	6818      	ldr	r0, [r3, #0]
}
 8000240:	4770      	bx	lr
 8000242:	bf00      	nop
 8000244:	20000118 	.word	0x20000118

08000248 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000248:	b513      	push	{r0, r1, r4, lr}
 800024a:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 800024c:	f7ff fff6 	bl	800023c <HAL_GetTick>
 8000250:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8000252:	f7ff fff3 	bl	800023c <HAL_GetTick>
 8000256:	9b01      	ldr	r3, [sp, #4]
 8000258:	1b00      	subs	r0, r0, r4
 800025a:	4298      	cmp	r0, r3
 800025c:	d3f9      	bcc.n	8000252 <HAL_Delay+0xa>
  {
  }
}
 800025e:	b002      	add	sp, #8
 8000260:	bd10      	pop	{r4, pc}
	...

08000264 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000264:	4a07      	ldr	r2, [pc, #28]	; (8000284 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8000266:	0200      	lsls	r0, r0, #8
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000268:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 800026a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 800026e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000272:	041b      	lsls	r3, r3, #16
 8000274:	0c1b      	lsrs	r3, r3, #16
 8000276:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800027a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800027e:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8000280:	60d3      	str	r3, [r2, #12]
 8000282:	4770      	bx	lr
 8000284:	e000ed00 	.word	0xe000ed00

08000288 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000288:	4b17      	ldr	r3, [pc, #92]	; (80002e8 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800028a:	b530      	push	{r4, r5, lr}
 800028c:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800028e:	f3c3 2302 	ubfx	r3, r3, #8, #3
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000292:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000296:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000298:	2c04      	cmp	r4, #4
 800029a:	bf28      	it	cs
 800029c:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800029e:	2d06      	cmp	r5, #6

  return (
 80002a0:	f04f 0501 	mov.w	r5, #1
 80002a4:	fa05 f404 	lsl.w	r4, r5, r4
 80002a8:	f104 34ff 	add.w	r4, r4, #4294967295
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002ac:	bf8c      	ite	hi
 80002ae:	3b03      	subhi	r3, #3
 80002b0:	2300      	movls	r3, #0

  return (
 80002b2:	400c      	ands	r4, r1
 80002b4:	409c      	lsls	r4, r3
 80002b6:	fa05 f303 	lsl.w	r3, r5, r3
 80002ba:	3b01      	subs	r3, #1
 80002bc:	401a      	ands	r2, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80002be:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 80002c0:	ea42 0204 	orr.w	r2, r2, r4
 80002c4:	ea4f 1202 	mov.w	r2, r2, lsl #4
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c8:	bfaf      	iteee	ge
 80002ca:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ce:	4b07      	ldrlt	r3, [pc, #28]	; (80002ec <HAL_NVIC_SetPriority+0x64>)
 80002d0:	f000 000f 	andlt.w	r0, r0, #15
 80002d4:	b2d2      	uxtblt	r2, r2
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d6:	bfa5      	ittet	ge
 80002d8:	b2d2      	uxtbge	r2, r2
 80002da:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002de:	541a      	strblt	r2, [r3, r0]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e0:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80002e4:	bd30      	pop	{r4, r5, pc}
 80002e6:	bf00      	nop
 80002e8:	e000ed00 	.word	0xe000ed00
 80002ec:	e000ed14 	.word	0xe000ed14

080002f0 <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80002f0:	0942      	lsrs	r2, r0, #5
 80002f2:	2301      	movs	r3, #1
 80002f4:	f000 001f 	and.w	r0, r0, #31
 80002f8:	fa03 f000 	lsl.w	r0, r3, r0
 80002fc:	4b01      	ldr	r3, [pc, #4]	; (8000304 <HAL_NVIC_EnableIRQ+0x14>)
 80002fe:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000302:	4770      	bx	lr
 8000304:	e000e100 	.word	0xe000e100

08000308 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000308:	3801      	subs	r0, #1
 800030a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800030e:	d20a      	bcs.n	8000326 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000310:	4b06      	ldr	r3, [pc, #24]	; (800032c <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000312:	4a07      	ldr	r2, [pc, #28]	; (8000330 <HAL_SYSTICK_Config+0x28>)
 8000314:	21f0      	movs	r1, #240	; 0xf0
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000316:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000318:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800031c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800031e:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000320:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000322:	601a      	str	r2, [r3, #0]
 8000324:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 8000326:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000328:	4770      	bx	lr
 800032a:	bf00      	nop
 800032c:	e000e010 	.word	0xe000e010
 8000330:	e000ed00 	.word	0xe000ed00

08000334 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000334:	4b04      	ldr	r3, [pc, #16]	; (8000348 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000336:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000338:	681a      	ldr	r2, [r3, #0]
 800033a:	bf0c      	ite	eq
 800033c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000340:	f022 0204 	bicne.w	r2, r2, #4
 8000344:	601a      	str	r2, [r3, #0]
 8000346:	4770      	bx	lr
 8000348:	e000e010 	.word	0xe000e010

0800034c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800034c:	4770      	bx	lr

0800034e <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800034e:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000350:	f7ff fffc 	bl	800034c <HAL_SYSTICK_Callback>
 8000354:	bd08      	pop	{r3, pc}
	...

08000358 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000358:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t temp = 0x00;
  uint32_t config = 0x00;
 800035c:	2400      	movs	r4, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800035e:	4626      	mov	r6, r4
 8000360:	4b62      	ldr	r3, [pc, #392]	; (80004ec <HAL_GPIO_Init+0x194>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000362:	f8df e194 	ldr.w	lr, [pc, #404]	; 80004f8 <HAL_GPIO_Init+0x1a0>
 8000366:	f8df c194 	ldr.w	ip, [pc, #404]	; 80004fc <HAL_GPIO_Init+0x1a4>

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800036a:	2201      	movs	r2, #1
    
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if (iocurrent == ioposition)
 800036c:	680d      	ldr	r5, [r1, #0]

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800036e:	40b2      	lsls	r2, r6
    
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if (iocurrent == ioposition)
 8000370:	ea32 0505 	bics.w	r5, r2, r5
 8000374:	f040 80b3 	bne.w	80004de <HAL_GPIO_Init+0x186>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000378:	684d      	ldr	r5, [r1, #4]
 800037a:	2d12      	cmp	r5, #18
 800037c:	d028      	beq.n	80003d0 <HAL_GPIO_Init+0x78>
 800037e:	d80e      	bhi.n	800039e <HAL_GPIO_Init+0x46>
 8000380:	2d02      	cmp	r5, #2
 8000382:	d022      	beq.n	80003ca <HAL_GPIO_Init+0x72>
 8000384:	d804      	bhi.n	8000390 <HAL_GPIO_Init+0x38>
 8000386:	b335      	cbz	r5, 80003d6 <HAL_GPIO_Init+0x7e>
 8000388:	2d01      	cmp	r5, #1
 800038a:	d12d      	bne.n	80003e8 <HAL_GPIO_Init+0x90>
      {
        /* If we are configuring the pin in OUTPUT push-pull mode */
        case GPIO_MODE_OUTPUT_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800038c:	68cc      	ldr	r4, [r1, #12]
          break;
 800038e:	e02b      	b.n	80003e8 <HAL_GPIO_Init+0x90>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000390:	2d03      	cmp	r5, #3
 8000392:	d018      	beq.n	80003c6 <HAL_GPIO_Init+0x6e>
 8000394:	2d11      	cmp	r5, #17
 8000396:	d127      	bne.n	80003e8 <HAL_GPIO_Init+0x90>
          
        /* If we are configuring the pin in OUTPUT open-drain mode */
        case GPIO_MODE_OUTPUT_OD:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000398:	68cc      	ldr	r4, [r1, #12]
 800039a:	3404      	adds	r4, #4
          break;
 800039c:	e024      	b.n	80003e8 <HAL_GPIO_Init+0x90>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800039e:	4f54      	ldr	r7, [pc, #336]	; (80004f0 <HAL_GPIO_Init+0x198>)
 80003a0:	42bd      	cmp	r5, r7
 80003a2:	d018      	beq.n	80003d6 <HAL_GPIO_Init+0x7e>
 80003a4:	d806      	bhi.n	80003b4 <HAL_GPIO_Init+0x5c>
 80003a6:	f8df 8158 	ldr.w	r8, [pc, #344]	; 8000500 <HAL_GPIO_Init+0x1a8>
 80003aa:	4545      	cmp	r5, r8
 80003ac:	d013      	beq.n	80003d6 <HAL_GPIO_Init+0x7e>
 80003ae:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 80003b2:	e005      	b.n	80003c0 <HAL_GPIO_Init+0x68>
 80003b4:	4575      	cmp	r5, lr
 80003b6:	d00e      	beq.n	80003d6 <HAL_GPIO_Init+0x7e>
 80003b8:	4565      	cmp	r5, ip
 80003ba:	d00c      	beq.n	80003d6 <HAL_GPIO_Init+0x7e>
 80003bc:	f8df 8144 	ldr.w	r8, [pc, #324]	; 8000504 <HAL_GPIO_Init+0x1ac>
 80003c0:	4545      	cmp	r5, r8
 80003c2:	d111      	bne.n	80003e8 <HAL_GPIO_Init+0x90>
 80003c4:	e007      	b.n	80003d6 <HAL_GPIO_Init+0x7e>
          }
          break; 
          
        /* If we are configuring the pin in INPUT analog mode */
        case GPIO_MODE_ANALOG:
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80003c6:	2400      	movs	r4, #0
 80003c8:	e00e      	b.n	80003e8 <HAL_GPIO_Init+0x90>
          
        /* If we are configuring the pin in ALTERNATE FUNCTION push-pull mode */
        case GPIO_MODE_AF_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80003ca:	68cc      	ldr	r4, [r1, #12]
 80003cc:	3408      	adds	r4, #8
          break;
 80003ce:	e00b      	b.n	80003e8 <HAL_GPIO_Init+0x90>
          
        /* If we are configuring the pin in ALTERNATE FUNCTION open-drain mode */
        case GPIO_MODE_AF_OD:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80003d0:	68cc      	ldr	r4, [r1, #12]
 80003d2:	340c      	adds	r4, #12
          break;
 80003d4:	e008      	b.n	80003e8 <HAL_GPIO_Init+0x90>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if(GPIO_Init->Pull == GPIO_NOPULL)
 80003d6:	688c      	ldr	r4, [r1, #8]
 80003d8:	b12c      	cbz	r4, 80003e6 <HAL_GPIO_Init+0x8e>
          {  
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 80003da:	2c01      	cmp	r4, #1
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
            
            /* Set the corresponding ODR bit */
            GPIOx->BSRR = ioposition;
 80003dc:	bf0c      	ite	eq
 80003de:	6102      	streq	r2, [r0, #16]
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
            
            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 80003e0:	6142      	strne	r2, [r0, #20]
            /* Set the corresponding ODR bit */
            GPIOx->BSRR = ioposition;
          }
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80003e2:	2408      	movs	r4, #8
 80003e4:	e000      	b.n	80003e8 <HAL_GPIO_Init+0x90>
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if(GPIO_Init->Pull == GPIO_NOPULL)
          {  
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80003e6:	2404      	movs	r4, #4
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80003e8:	2aff      	cmp	r2, #255	; 0xff
 80003ea:	bf97      	itett	ls
 80003ec:	4683      	movls	fp, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 80003ee:	f1a6 0508 	subhi.w	r5, r6, #8
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80003f2:	f8d0 9000 	ldrls.w	r9, [r0]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 80003f6:	00b5      	lslls	r5, r6, #2
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80003f8:	bf84      	itt	hi
 80003fa:	f8d0 9004 	ldrhi.w	r9, [r0, #4]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 80003fe:	00ad      	lslhi	r5, r5, #2
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8000400:	f04f 080f 	mov.w	r8, #15
 8000404:	fa08 fa05 	lsl.w	sl, r8, r5
 8000408:	ea29 090a 	bic.w	r9, r9, sl
 800040c:	fa04 f505 	lsl.w	r5, r4, r5
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000410:	bf88      	it	hi
 8000412:	f100 0b04 	addhi.w	fp, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8000416:	ea49 0505 	orr.w	r5, r9, r5
 800041a:	f8cb 5000 	str.w	r5, [fp]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800041e:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8000422:	f019 5f80 	tst.w	r9, #268435456	; 0x10000000
 8000426:	d05a      	beq.n	80004de <HAL_GPIO_Init+0x186>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000428:	4d32      	ldr	r5, [pc, #200]	; (80004f4 <HAL_GPIO_Init+0x19c>)
 800042a:	4f32      	ldr	r7, [pc, #200]	; (80004f4 <HAL_GPIO_Init+0x19c>)
 800042c:	69ad      	ldr	r5, [r5, #24]
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 800042e:	f006 0a03 	and.w	sl, r6, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000432:	f045 0501 	orr.w	r5, r5, #1
 8000436:	61bd      	str	r5, [r7, #24]
 8000438:	69bd      	ldr	r5, [r7, #24]
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 800043a:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800043e:	f005 0501 	and.w	r5, r5, #1
 8000442:	9501      	str	r5, [sp, #4]
 8000444:	9d01      	ldr	r5, [sp, #4]
 8000446:	f026 0503 	bic.w	r5, r6, #3
 800044a:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 800044e:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2];
 8000452:	f8d5 b008 	ldr.w	fp, [r5, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000456:	f5a7 3784 	sub.w	r7, r7, #67584	; 0x10800
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 800045a:	fa08 f80a 	lsl.w	r8, r8, sl
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800045e:	42b8      	cmp	r0, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000460:	ea2b 0808 	bic.w	r8, fp, r8
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000464:	d010      	beq.n	8000488 <HAL_GPIO_Init+0x130>
 8000466:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800046a:	42b8      	cmp	r0, r7
 800046c:	d00f      	beq.n	800048e <HAL_GPIO_Init+0x136>
 800046e:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000472:	42b8      	cmp	r0, r7
 8000474:	d00e      	beq.n	8000494 <HAL_GPIO_Init+0x13c>
 8000476:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800047a:	42b8      	cmp	r0, r7
 800047c:	bf0c      	ite	eq
 800047e:	f04f 0b03 	moveq.w	fp, #3
 8000482:	f04f 0b04 	movne.w	fp, #4
 8000486:	e007      	b.n	8000498 <HAL_GPIO_Init+0x140>
 8000488:	f04f 0b00 	mov.w	fp, #0
 800048c:	e004      	b.n	8000498 <HAL_GPIO_Init+0x140>
 800048e:	f04f 0b01 	mov.w	fp, #1
 8000492:	e001      	b.n	8000498 <HAL_GPIO_Init+0x140>
 8000494:	f04f 0b02 	mov.w	fp, #2
 8000498:	fa0b fa0a 	lsl.w	sl, fp, sl
 800049c:	ea4a 0a08 	orr.w	sl, sl, r8
        AFIO->EXTICR[position >> 2] = temp;
 80004a0:	f8c5 a008 	str.w	sl, [r5, #8]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 80004a4:	681d      	ldr	r5, [r3, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        AFIO->EXTICR[position >> 2] = temp;
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80004a6:	f419 3f80 	tst.w	r9, #65536	; 0x10000
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 80004aa:	bf14      	ite	ne
 80004ac:	4315      	orrne	r5, r2
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 80004ae:	4395      	biceq	r5, r2
 80004b0:	601d      	str	r5, [r3, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 80004b2:	685d      	ldr	r5, [r3, #4]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80004b4:	f419 3f00 	tst.w	r9, #131072	; 0x20000
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 80004b8:	bf14      	ite	ne
 80004ba:	4315      	orrne	r5, r2
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 80004bc:	4395      	biceq	r5, r2
 80004be:	605d      	str	r5, [r3, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 80004c0:	689d      	ldr	r5, [r3, #8]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80004c2:	f419 1f80 	tst.w	r9, #1048576	; 0x100000
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 80004c6:	bf14      	ite	ne
 80004c8:	4315      	orrne	r5, r2
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 80004ca:	4395      	biceq	r5, r2
 80004cc:	609d      	str	r5, [r3, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 80004ce:	68dd      	ldr	r5, [r3, #12]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80004d0:	f419 1f00 	tst.w	r9, #2097152	; 0x200000
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 80004d4:	bf14      	ite	ne
 80004d6:	432a      	orrne	r2, r5
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 80004d8:	ea25 0202 	biceq.w	r2, r5, r2
 80004dc:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80004de:	3601      	adds	r6, #1
 80004e0:	2e10      	cmp	r6, #16
 80004e2:	f47f af42 	bne.w	800036a <HAL_GPIO_Init+0x12>
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
        }
      }
    }
  }
}
 80004e6:	b003      	add	sp, #12
 80004e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80004ec:	40010400 	.word	0x40010400
 80004f0:	10210000 	.word	0x10210000
 80004f4:	40021000 	.word	0x40021000
 80004f8:	10310000 	.word	0x10310000
 80004fc:	10320000 	.word	0x10320000
 8000500:	10110000 	.word	0x10110000
 8000504:	10220000 	.word	0x10220000

08000508 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000508:	6883      	ldr	r3, [r0, #8]
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 800050a:	4219      	tst	r1, r3
}
 800050c:	bf14      	ite	ne
 800050e:	2001      	movne	r0, #1
 8000510:	2000      	moveq	r0, #0
 8000512:	4770      	bx	lr

08000514 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000514:	b902      	cbnz	r2, 8000518 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000516:	0409      	lsls	r1, r1, #16
 8000518:	6101      	str	r1, [r0, #16]
 800051a:	4770      	bx	lr

0800051c <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800051c:	68c3      	ldr	r3, [r0, #12]
 800051e:	4059      	eors	r1, r3
 8000520:	60c1      	str	r1, [r0, #12]
 8000522:	4770      	bx	lr

08000524 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t index = 0;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8000528:	4604      	mov	r4, r0
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800052a:	b086      	sub	sp, #24
  uint32_t index = 0;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 800052c:	2800      	cmp	r0, #0
 800052e:	d05f      	beq.n	80005f0 <HAL_PCD_Init+0xcc>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 8000530:	f890 33e9 	ldrb.w	r3, [r0, #1001]	; 0x3e9
 8000534:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000538:	b91b      	cbnz	r3, 8000542 <HAL_PCD_Init+0x1e>
  {  
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800053a:	f880 23e8 	strb.w	r2, [r0, #1000]	; 0x3e8

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800053e:	f002 f8c3 	bl	80026c8 <HAL_PCD_MspInit>
  }
  
  hpcd->State = HAL_PCD_STATE_BUSY;
  
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000542:	4625      	mov	r5, r4
  
  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 8000544:	466e      	mov	r6, sp

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
  }
  
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000546:	2303      	movs	r3, #3
  
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000548:	f855 0b10 	ldr.w	r0, [r5], #16

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
  }
  
  hpcd->State = HAL_PCD_STATE_BUSY;
 800054c:	f884 33e9 	strb.w	r3, [r4, #1001]	; 0x3e9
  
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000550:	f000 ffcc 	bl	80014ec <USB_DisableGlobalInt>
  
  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 8000554:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000556:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000558:	682b      	ldr	r3, [r5, #0]
 800055a:	1d27      	adds	r7, r4, #4
 800055c:	6033      	str	r3, [r6, #0]
 800055e:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8000562:	6820      	ldr	r0, [r4, #0]
 8000564:	f000 ffb2 	bl	80014cc <USB_CoreInit>
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 8000568:	2100      	movs	r1, #0
 800056a:	6820      	ldr	r0, [r4, #0]
 800056c:	f000 ffc8 	bl	8001500 <USB_SetCurrentMode>
 
  /* Init endpoints structures */
  for (index = 0; index < 15 ; index++)
 8000570:	2100      	movs	r1, #0
 8000572:	4623      	mov	r3, r4
  
  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 8000574:	4622      	mov	r2, r4
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1;
    hpcd->IN_ep[index].num = index;
    hpcd->IN_ep[index].tx_fifo_num = index;
    /* Control until ep is actvated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 8000576:	4608      	mov	r0, r1
 8000578:	f104 0510 	add.w	r5, r4, #16
 
  /* Init endpoints structures */
  for (index = 0; index < 15 ; index++)
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1;
 800057c:	2601      	movs	r6, #1
    hpcd->IN_ep[index].num = index;
 800057e:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
    hpcd->IN_ep[index].tx_fifo_num = index;
 8000582:	8691      	strh	r1, [r2, #52]	; 0x34
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 
  /* Init endpoints structures */
  for (index = 0; index < 15 ; index++)
 8000584:	3101      	adds	r1, #1
 8000586:	290f      	cmp	r1, #15
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1;
 8000588:	f882 6029 	strb.w	r6, [r2, #41]	; 0x29
    hpcd->IN_ep[index].num = index;
    hpcd->IN_ep[index].tx_fifo_num = index;
    /* Control until ep is actvated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 800058c:	f882 002b 	strb.w	r0, [r2, #43]	; 0x2b
    hpcd->IN_ep[index].maxpacket =  0;
 8000590:	6390      	str	r0, [r2, #56]	; 0x38
    hpcd->IN_ep[index].xfer_buff = 0;
 8000592:	63d0      	str	r0, [r2, #60]	; 0x3c
    hpcd->IN_ep[index].xfer_len = 0;
 8000594:	6410      	str	r0, [r2, #64]	; 0x40
 8000596:	f102 0220 	add.w	r2, r2, #32
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 
  /* Init endpoints structures */
  for (index = 0; index < 15 ; index++)
 800059a:	d1f0      	bne.n	800057e <HAL_PCD_Init+0x5a>
 800059c:	2200      	movs	r2, #0
    hpcd->IN_ep[index].xfer_len = 0;
  }
  
  for (index = 0; index < 15 ; index++)
  {
    hpcd->OUT_ep[index].is_in = 0;
 800059e:	4611      	mov	r1, r2
    hpcd->OUT_ep[index].num = index;
 80005a0:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
    hpcd->IN_ep[index].tx_fifo_num = index;
 80005a4:	869a      	strh	r2, [r3, #52]	; 0x34
    hpcd->IN_ep[index].maxpacket =  0;
    hpcd->IN_ep[index].xfer_buff = 0;
    hpcd->IN_ep[index].xfer_len = 0;
  }
  
  for (index = 0; index < 15 ; index++)
 80005a6:	3201      	adds	r2, #1
 80005a8:	2a0f      	cmp	r2, #15
  {
    hpcd->OUT_ep[index].is_in = 0;
 80005aa:	f883 1209 	strb.w	r1, [r3, #521]	; 0x209
    hpcd->OUT_ep[index].num = index;
    hpcd->IN_ep[index].tx_fifo_num = index;
    /* Control until ep is activated */
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 80005ae:	f883 120b 	strb.w	r1, [r3, #523]	; 0x20b
    hpcd->OUT_ep[index].maxpacket = 0;
 80005b2:	f8c3 1218 	str.w	r1, [r3, #536]	; 0x218
    hpcd->OUT_ep[index].xfer_buff = 0;
 80005b6:	f8c3 121c 	str.w	r1, [r3, #540]	; 0x21c
    hpcd->OUT_ep[index].xfer_len = 0;
 80005ba:	f8c3 1220 	str.w	r1, [r3, #544]	; 0x220
    hpcd->IN_ep[index].xfer_len = 0;
  }
  
  for (index = 0; index < 15 ; index++)
  {
    hpcd->OUT_ep[index].is_in = 0;
 80005be:	f04f 0800 	mov.w	r8, #0
 80005c2:	f103 0320 	add.w	r3, r3, #32
    hpcd->IN_ep[index].maxpacket =  0;
    hpcd->IN_ep[index].xfer_buff = 0;
    hpcd->IN_ep[index].xfer_len = 0;
  }
  
  for (index = 0; index < 15 ; index++)
 80005c6:	d1eb      	bne.n	80005a0 <HAL_PCD_Init+0x7c>
    hpcd->OUT_ep[index].xfer_buff = 0;
    hpcd->OUT_ep[index].xfer_len = 0;
  }
  
  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
 80005c8:	466e      	mov	r6, sp
 80005ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005cc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80005ce:	682b      	ldr	r3, [r5, #0]
 80005d0:	6033      	str	r3, [r6, #0]
 80005d2:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80005d6:	6820      	ldr	r0, [r4, #0]
 80005d8:	f000 ff94 	bl	8001504 <USB_DevInit>
  
  hpcd->USB_Address = 0;
  hpcd->State= HAL_PCD_STATE_READY;
 80005dc:	2301      	movs	r3, #1
  }
  
  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
  
  hpcd->USB_Address = 0;
 80005de:	f884 8024 	strb.w	r8, [r4, #36]	; 0x24
  hpcd->State= HAL_PCD_STATE_READY;
  
  USB_DevDisconnect (hpcd->Instance);  
 80005e2:	6820      	ldr	r0, [r4, #0]
  
  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
  
  hpcd->USB_Address = 0;
  hpcd->State= HAL_PCD_STATE_READY;
 80005e4:	f884 33e9 	strb.w	r3, [r4, #1001]	; 0x3e9
  
  USB_DevDisconnect (hpcd->Instance);  
 80005e8:	f001 fa45 	bl	8001a76 <USB_DevDisconnect>
  return HAL_OK;
 80005ec:	4640      	mov	r0, r8
 80005ee:	e000      	b.n	80005f2 <HAL_PCD_Init+0xce>
  uint32_t index = 0;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
  {
    return HAL_ERROR;
 80005f0:	2001      	movs	r0, #1
  hpcd->USB_Address = 0;
  hpcd->State= HAL_PCD_STATE_READY;
  
  USB_DevDisconnect (hpcd->Instance);  
  return HAL_OK;
}
 80005f2:	b006      	add	sp, #24
 80005f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080005f8 <HAL_PCD_Start>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 80005f8:	f890 33e8 	ldrb.w	r3, [r0, #1000]	; 0x3e8
  * @brief  Start The USB Device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80005fc:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 80005fe:	2b01      	cmp	r3, #1
  * @brief  Start The USB Device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000600:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000602:	d00e      	beq.n	8000622 <HAL_PCD_Start+0x2a>
 8000604:	2101      	movs	r1, #1
 8000606:	f880 13e8 	strb.w	r1, [r0, #1000]	; 0x3e8
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 800060a:	f002 f93a 	bl	8002882 <HAL_PCDEx_SetConnectionState>
  USB_DevConnect (hpcd->Instance);
 800060e:	6820      	ldr	r0, [r4, #0]
 8000610:	f001 fa2f 	bl	8001a72 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000614:	6820      	ldr	r0, [r4, #0]
 8000616:	f000 ff60 	bl	80014da <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800061a:	2000      	movs	r0, #0
 800061c:	f884 03e8 	strb.w	r0, [r4, #1000]	; 0x3e8
  return HAL_OK;
 8000620:	bd10      	pop	{r4, pc}
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 8000622:	2002      	movs	r0, #2
  HAL_PCDEx_SetConnectionState (hpcd, 1);
  USB_DevConnect (hpcd->Instance);
  __HAL_PCD_ENABLE(hpcd);
  __HAL_UNLOCK(hpcd);
  return HAL_OK;
}
 8000624:	bd10      	pop	{r4, pc}

08000626 <HAL_PCD_SetAddress>:
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8000626:	f890 23e8 	ldrb.w	r2, [r0, #1000]	; 0x3e8
  * @param  hpcd: PCD handle
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800062a:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 800062c:	2a01      	cmp	r2, #1
  * @param  hpcd: PCD handle
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800062e:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000630:	d00b      	beq.n	800064a <HAL_PCD_SetAddress+0x24>
 8000632:	2201      	movs	r2, #1
 8000634:	f880 23e8 	strb.w	r2, [r0, #1000]	; 0x3e8
  hpcd->USB_Address = address;
 8000638:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  USB_SetDevAddress(hpcd->Instance, address);
 800063c:	6800      	ldr	r0, [r0, #0]
 800063e:	f001 fa12 	bl	8001a66 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000642:	2000      	movs	r0, #0
 8000644:	f884 03e8 	strb.w	r0, [r4, #1000]	; 0x3e8
 8000648:	bd10      	pop	{r4, pc}
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 800064a:	2002      	movs	r0, #2
  hpcd->USB_Address = address;
  USB_SetDevAddress(hpcd->Instance, address);
  __HAL_UNLOCK(hpcd);
  return HAL_OK;
}
 800064c:	bd10      	pop	{r4, pc}

0800064e <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800064e:	b538      	push	{r3, r4, r5, lr}
 8000650:	4604      	mov	r4, r0
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80) == 0x80)
 8000652:	b248      	sxtb	r0, r1
 8000654:	2800      	cmp	r0, #0
 8000656:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800065a:	bfb5      	itete	lt
 800065c:	eb04 1145 	addlt.w	r1, r4, r5, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8000660:	eb04 1141 	addge.w	r1, r4, r1, lsl #5
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000664:	3128      	addlt	r1, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8000666:	f501 7102 	addge.w	r1, r1, #520	; 0x208
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
 800066a:	0fc0      	lsrs	r0, r0, #31
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  }
  ep->num   = ep_addr & 0x7F;
 800066c:	700d      	strb	r5, [r1, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 800066e:	7048      	strb	r0, [r1, #1]
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
 8000670:	70cb      	strb	r3, [r1, #3]
    
  __HAL_LOCK(hpcd);
 8000672:	f894 33e8 	ldrb.w	r3, [r4, #1000]	; 0x3e8
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
  ep->maxpacket = ep_mps;
 8000676:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
    
  __HAL_LOCK(hpcd);
 8000678:	2b01      	cmp	r3, #1
 800067a:	d009      	beq.n	8000690 <HAL_PCD_EP_Open+0x42>
 800067c:	2301      	movs	r3, #1
 800067e:	f884 33e8 	strb.w	r3, [r4, #1000]	; 0x3e8
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8000682:	6820      	ldr	r0, [r4, #0]
 8000684:	f000 ff52 	bl	800152c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000688:	2000      	movs	r0, #0
 800068a:	f884 03e8 	strb.w	r0, [r4, #1000]	; 0x3e8
  return ret;
 800068e:	bd38      	pop	{r3, r4, r5, pc}
  
  ep->is_in = (0x80 & ep_addr) != 0;
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
    
  __HAL_LOCK(hpcd);
 8000690:	2002      	movs	r0, #2
  USB_ActivateEndpoint(hpcd->Instance , ep);
  __HAL_UNLOCK(hpcd);
  return ret;
}
 8000692:	bd38      	pop	{r3, r4, r5, pc}

08000694 <HAL_PCD_EP_Close>:
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80) == 0x80)
 8000694:	b24b      	sxtb	r3, r1
 8000696:	2b00      	cmp	r3, #0
 8000698:	f001 027f 	and.w	r2, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800069c:	bfb5      	itete	lt
 800069e:	eb00 1142 	addlt.w	r1, r0, r2, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80006a2:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
{  
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80006a6:	3128      	addlt	r1, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80006a8:	f501 7102 	addge.w	r1, r1, #520	; 0x208
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
 80006ac:	0fdb      	lsrs	r3, r3, #31
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 80006ae:	b510      	push	{r4, lr}
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  }
  ep->num   = ep_addr & 0x7F;
 80006b0:	700a      	strb	r2, [r1, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 80006b2:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd);
 80006b4:	f890 33e8 	ldrb.w	r3, [r0, #1000]	; 0x3e8
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 80006b8:	4604      	mov	r4, r0
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
  
  __HAL_LOCK(hpcd);
 80006ba:	2b01      	cmp	r3, #1
 80006bc:	d009      	beq.n	80006d2 <HAL_PCD_EP_Close+0x3e>
 80006be:	2301      	movs	r3, #1
 80006c0:	f880 33e8 	strb.w	r3, [r0, #1000]	; 0x3e8
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 80006c4:	6800      	ldr	r0, [r0, #0]
 80006c6:	f001 f8a3 	bl	8001810 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80006ca:	2000      	movs	r0, #0
 80006cc:	f884 03e8 	strb.w	r0, [r4, #1000]	; 0x3e8
  return HAL_OK;
 80006d0:	bd10      	pop	{r4, pc}
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
  
  __HAL_LOCK(hpcd);
 80006d2:	2002      	movs	r0, #2
  USB_DeactivateEndpoint(hpcd->Instance , ep);
  __HAL_UNLOCK(hpcd);
  return HAL_OK;
}
 80006d4:	bd10      	pop	{r4, pc}

080006d6 <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80006d6:	b570      	push	{r4, r5, r6, lr}
 80006d8:	4604      	mov	r4, r0
 80006da:	f001 067f 	and.w	r6, r1, #127	; 0x7f
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 80006de:	0170      	lsls	r0, r6, #5
 80006e0:	1825      	adds	r5, r4, r0
  ep->xfer_len = len;
 80006e2:	f8c5 3220 	str.w	r3, [r5, #544]	; 0x220
  ep->xfer_count = 0;
 80006e6:	2300      	movs	r3, #0
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 80006e8:	f8c5 221c 	str.w	r2, [r5, #540]	; 0x21c
  ep->xfer_len = len;
  ep->xfer_count = 0;
 80006ec:	f8c5 3224 	str.w	r3, [r5, #548]	; 0x224
  ep->is_in = 0;
 80006f0:	f885 3209 	strb.w	r3, [r5, #521]	; 0x209
  ep->num = ep_addr & 0x7F;
 80006f4:	f885 6208 	strb.w	r6, [r5, #520]	; 0x208
  
  __HAL_LOCK(hpcd);
 80006f8:	f894 33e8 	ldrb.w	r3, [r4, #1000]	; 0x3e8
 80006fc:	2b01      	cmp	r3, #1
 80006fe:	d00c      	beq.n	800071a <HAL_PCD_EP_Receive+0x44>
 8000700:	2301      	movs	r3, #1
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8000702:	f500 7002 	add.w	r0, r0, #520	; 0x208
 8000706:	1821      	adds	r1, r4, r0
  ep->xfer_len = len;
  ep->xfer_count = 0;
  ep->is_in = 0;
  ep->num = ep_addr & 0x7F;
  
  __HAL_LOCK(hpcd);
 8000708:	f884 33e8 	strb.w	r3, [r4, #1000]	; 0x3e8
  
  if ((ep_addr & 0x7F) == 0 )
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
 800070c:	6820      	ldr	r0, [r4, #0]
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 800070e:	f001 f9cb 	bl	8001aa8 <USB_EPStartXfer>
  }
  __HAL_UNLOCK(hpcd);
 8000712:	2000      	movs	r0, #0
 8000714:	f884 03e8 	strb.w	r0, [r4, #1000]	; 0x3e8
  
  return HAL_OK;
 8000718:	bd70      	pop	{r4, r5, r6, pc}
  ep->xfer_len = len;
  ep->xfer_count = 0;
  ep->is_in = 0;
  ep->num = ep_addr & 0x7F;
  
  __HAL_LOCK(hpcd);
 800071a:	2002      	movs	r0, #2
    USB_EPStartXfer(hpcd->Instance , ep);
  }
  __HAL_UNLOCK(hpcd);
  
  return HAL_OK;
}
 800071c:	bd70      	pop	{r4, r5, r6, pc}

0800071e <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800071e:	b570      	push	{r4, r5, r6, lr}
 8000720:	4604      	mov	r4, r0
 8000722:	f001 067f 	and.w	r6, r1, #127	; 0x7f
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8000726:	0170      	lsls	r0, r6, #5
 8000728:	1825      	adds	r5, r4, r0
  ep->xfer_len = len;
 800072a:	642b      	str	r3, [r5, #64]	; 0x40
  ep->xfer_count = 0;
 800072c:	2300      	movs	r3, #0
 800072e:	646b      	str	r3, [r5, #68]	; 0x44
  ep->is_in = 1;
 8000730:	2301      	movs	r3, #1
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8000732:	63ea      	str	r2, [r5, #60]	; 0x3c
  ep->xfer_len = len;
  ep->xfer_count = 0;
  ep->is_in = 1;
 8000734:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
  ep->num = ep_addr & 0x7F;
 8000738:	f885 6028 	strb.w	r6, [r5, #40]	; 0x28
  
  __HAL_LOCK(hpcd);
 800073c:	f894 23e8 	ldrb.w	r2, [r4, #1000]	; 0x3e8
 8000740:	429a      	cmp	r2, r3
 8000742:	d00a      	beq.n	800075a <HAL_PCD_EP_Transmit+0x3c>
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000744:	3028      	adds	r0, #40	; 0x28
 8000746:	1821      	adds	r1, r4, r0
  ep->xfer_len = len;
  ep->xfer_count = 0;
  ep->is_in = 1;
  ep->num = ep_addr & 0x7F;
  
  __HAL_LOCK(hpcd);
 8000748:	f884 33e8 	strb.w	r3, [r4, #1000]	; 0x3e8
  
  if ((ep_addr & 0x7F) == 0 )
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
 800074c:	6820      	ldr	r0, [r4, #0]
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 800074e:	f001 f9ab 	bl	8001aa8 <USB_EPStartXfer>
  }
  
  __HAL_UNLOCK(hpcd);
 8000752:	2000      	movs	r0, #0
 8000754:	f884 03e8 	strb.w	r0, [r4, #1000]	; 0x3e8
  
  return HAL_OK;
 8000758:	bd70      	pop	{r4, r5, r6, pc}
  ep->xfer_len = len;
  ep->xfer_count = 0;
  ep->is_in = 1;
  ep->num = ep_addr & 0x7F;
  
  __HAL_LOCK(hpcd);
 800075a:	2002      	movs	r0, #2
  }
  
  __HAL_UNLOCK(hpcd);
  
  return HAL_OK;
}
 800075c:	bd70      	pop	{r4, r5, r6, pc}

0800075e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800075e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8000762:	4604      	mov	r4, r0
  uint32_t wInterrupt_Mask = 0;
  
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 8000764:	6800      	ldr	r0, [r0, #0]
 8000766:	f001 f988 	bl	8001a7a <USB_ReadInterrupts>
 800076a:	0400      	lsls	r0, r0, #16
 800076c:	d416      	bmi.n	800079c <HAL_PCD_IRQHandler+0x3e>
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    PCD_EP_ISR_Handler(hpcd);
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 800076e:	6820      	ldr	r0, [r4, #0]
 8000770:	f001 f983 	bl	8001a7a <USB_ReadInterrupts>
 8000774:	0541      	lsls	r1, r0, #21
 8000776:	f140 81db 	bpl.w	8000b30 <HAL_PCD_IRQHandler+0x3d2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800077a:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 800077c:	4620      	mov	r0, r4
    PCD_EP_ISR_Handler(hpcd);
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800077e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000782:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000786:	041b      	lsls	r3, r3, #16
 8000788:	0c1b      	lsrs	r3, r3, #16
 800078a:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 800078e:	f001 ffd2 	bl	8002736 <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0);
 8000792:	2100      	movs	r1, #0
 8000794:	4620      	mov	r0, r4
 8000796:	f7ff ff46 	bl	8000626 <HAL_PCD_SetAddress>
 800079a:	e1c9      	b.n	8000b30 <HAL_PCD_IRQHandler+0x3d2>
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
  PCD_EPTypeDef *ep = NULL;
  uint16_t count = 0;
  uint8_t epindex = 0;
  __IO uint16_t wIstr = 0;  
 800079c:	2300      	movs	r3, #0
 800079e:	f8ad 3004 	strh.w	r3, [sp, #4]
        
        if ((wEPVal & USB_EP_SETUP) != 0)
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 80007a2:	f504 777b 	add.w	r7, r4, #1004	; 0x3ec
{
  PCD_EPTypeDef *ep = NULL;
  uint16_t count = 0;
  uint8_t epindex = 0;
  __IO uint16_t wIstr = 0;  
  __IO uint16_t wEPVal = 0;
 80007a6:	f8ad 3006 	strh.w	r3, [sp, #6]
  
  /* stay in loop while pending interrupts */
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 80007aa:	6820      	ldr	r0, [r4, #0]
 80007ac:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80007b0:	b29b      	uxth	r3, r3
 80007b2:	f8ad 3004 	strh.w	r3, [sp, #4]
 80007b6:	041b      	lsls	r3, r3, #16
 80007b8:	d5d9      	bpl.n	800076e <HAL_PCD_IRQHandler+0x10>
  {
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80007ba:	f8bd 5004 	ldrh.w	r5, [sp, #4]
    
    if (epindex == 0)
 80007be:	f015 050f 	ands.w	r5, r5, #15
 80007c2:	f040 80b5 	bne.w	8000930 <HAL_PCD_IRQHandler+0x1d2>
    {
      /* Decode and service control endpoint interrupt */
      
      /* DIR bit = origin of the interrupt */   
      if ((wIstr & USB_ISTR_DIR) == 0)
 80007c6:	f8bd 1004 	ldrh.w	r1, [sp, #4]
      {
        /* DIR = 0 */
        
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80007ca:	8803      	ldrh	r3, [r0, #0]
    if (epindex == 0)
    {
      /* Decode and service control endpoint interrupt */
      
      /* DIR bit = origin of the interrupt */   
      if ((wIstr & USB_ISTR_DIR) == 0)
 80007cc:	f001 0110 	and.w	r1, r1, #16
 80007d0:	b289      	uxth	r1, r1
 80007d2:	bb59      	cbnz	r1, 800082c <HAL_PCD_IRQHandler+0xce>
      {
        /* DIR = 0 */
        
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80007d4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80007d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80007dc:	041b      	lsls	r3, r3, #16
 80007de:	0c1b      	lsrs	r3, r3, #16
 80007e0:	8003      	strh	r3, [r0, #0]
        ep = &hpcd->IN_ep[0];
        
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80007e2:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80007e6:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 80007ea:	b29b      	uxth	r3, r3
 80007ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80007f0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80007f4:	f8d0 3404 	ldr.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 80007f8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
        ep = &hpcd->IN_ep[0];
        
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80007fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80007fe:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8000800:	4413      	add	r3, r2
 8000802:	63e3      	str	r3, [r4, #60]	; 0x3c
 
        /* TX COMPLETE */
        HAL_PCD_DataInStageCallback(hpcd, 0);
 8000804:	4620      	mov	r0, r4
 8000806:	f001 ff8b 	bl	8002720 <HAL_PCD_DataInStageCallback>
        
        
        if((hpcd->USB_Address > 0)&& ( ep->xfer_len == 0))
 800080a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800080e:	2b00      	cmp	r3, #0
 8000810:	d0cb      	beq.n	80007aa <HAL_PCD_IRQHandler+0x4c>
 8000812:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000814:	2a00      	cmp	r2, #0
 8000816:	d1c8      	bne.n	80007aa <HAL_PCD_IRQHandler+0x4c>
        {
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 8000818:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800081c:	6821      	ldr	r1, [r4, #0]
 800081e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000822:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0;
 8000826:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 800082a:	e7be      	b.n	80007aa <HAL_PCD_IRQHandler+0x4c>
        /* DIR = 1 */
        
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800082c:	b29b      	uxth	r3, r3
 800082e:	f8ad 3006 	strh.w	r3, [sp, #6]
        
        if ((wEPVal & USB_EP_SETUP) != 0)
 8000832:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000836:	051a      	lsls	r2, r3, #20
 8000838:	d51e      	bpl.n	8000878 <HAL_PCD_IRQHandler+0x11a>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800083a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800083e:	f894 2208 	ldrb.w	r2, [r4, #520]	; 0x208
 8000842:	b29b      	uxth	r3, r3
 8000844:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000848:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800084c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8000850:	f8b4 220c 	ldrh.w	r2, [r4, #524]	; 0x20c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
        
        if ((wEPVal & USB_EP_SETUP) != 0)
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000854:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000858:	f8c4 3224 	str.w	r3, [r4, #548]	; 0x224
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 800085c:	4639      	mov	r1, r7
 800085e:	f001 f9f3 	bl	8001c48 <USB_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1*/ 
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 8000862:	6822      	ldr	r2, [r4, #0]
          
          /* Process SETUP Packet*/
          HAL_PCD_SetupStageCallback(hpcd);
 8000864:	4620      	mov	r0, r4
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
          /* SETUP bit kept frozen while CTR_RX = 1*/ 
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 8000866:	8813      	ldrh	r3, [r2, #0]
 8000868:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800086c:	051b      	lsls	r3, r3, #20
 800086e:	0d1b      	lsrs	r3, r3, #20
 8000870:	8013      	strh	r3, [r2, #0]
          
          /* Process SETUP Packet*/
          HAL_PCD_SetupStageCallback(hpcd);
 8000872:	f001 ff47 	bl	8002704 <HAL_PCD_SetupStageCallback>
 8000876:	e798      	b.n	80007aa <HAL_PCD_IRQHandler+0x4c>
        }
        
        else if ((wEPVal & USB_EP_CTR_RX) != 0)
 8000878:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800087c:	041b      	lsls	r3, r3, #16
 800087e:	d594      	bpl.n	80007aa <HAL_PCD_IRQHandler+0x4c>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000880:	8803      	ldrh	r3, [r0, #0]
 8000882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000886:	051b      	lsls	r3, r3, #20
 8000888:	0d1b      	lsrs	r3, r3, #20
 800088a:	8003      	strh	r3, [r0, #0]
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800088c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000890:	f894 2208 	ldrb.w	r2, [r4, #520]	; 0x208
 8000894:	b29b      	uxth	r3, r3
 8000896:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800089a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800089e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80008a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80008a6:	f8c4 3224 	str.w	r3, [r4, #548]	; 0x224
          
          if (ep->xfer_count != 0)
 80008aa:	b163      	cbz	r3, 80008c6 <HAL_PCD_IRQHandler+0x168>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 80008ac:	f8b4 220c 	ldrh.w	r2, [r4, #524]	; 0x20c
 80008b0:	f8d4 121c 	ldr.w	r1, [r4, #540]	; 0x21c
 80008b4:	f001 f9c8 	bl	8001c48 <USB_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 80008b8:	f8d4 221c 	ldr.w	r2, [r4, #540]	; 0x21c
 80008bc:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
 80008c0:	4413      	add	r3, r2
 80008c2:	f8c4 321c 	str.w	r3, [r4, #540]	; 0x21c
          }
          
          /* Process Control Data OUT Packet*/
           HAL_PCD_DataOutStageCallback(hpcd, 0);
 80008c6:	2100      	movs	r1, #0
 80008c8:	4620      	mov	r0, r4
 80008ca:	f001 ff21 	bl	8002710 <HAL_PCD_DataOutStageCallback>
          
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80008ce:	6822      	ldr	r2, [r4, #0]
 80008d0:	f8d4 5218 	ldr.w	r5, [r4, #536]	; 0x218
 80008d4:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 80008d8:	2d3e      	cmp	r5, #62	; 0x3e
 80008da:	b289      	uxth	r1, r1
 80008dc:	f101 0106 	add.w	r1, r1, #6
 80008e0:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 80008e4:	d90b      	bls.n	80008fe <HAL_PCD_IRQHandler+0x1a0>
 80008e6:	f3c5 134f 	ubfx	r3, r5, #5, #16
 80008ea:	06ee      	lsls	r6, r5, #27
 80008ec:	bf04      	itt	eq
 80008ee:	f103 33ff 	addeq.w	r3, r3, #4294967295
 80008f2:	b29b      	uxtheq	r3, r3
 80008f4:	ea6f 63c3 	mvn.w	r3, r3, lsl #27
 80008f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80008fc:	e006      	b.n	800090c <HAL_PCD_IRQHandler+0x1ae>
 80008fe:	f3c5 034f 	ubfx	r3, r5, #1, #16
 8000902:	07ed      	lsls	r5, r5, #31
 8000904:	bf44      	itt	mi
 8000906:	3301      	addmi	r3, #1
 8000908:	b29b      	uxthmi	r3, r3
 800090a:	029b      	lsls	r3, r3, #10
 800090c:	b29b      	uxth	r3, r3
 800090e:	f840 3011 	str.w	r3, [r0, r1, lsl #1]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8000912:	8813      	ldrh	r3, [r2, #0]
 8000914:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000918:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800091c:	041b      	lsls	r3, r3, #16
 800091e:	0c1b      	lsrs	r3, r3, #16
 8000920:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8000924:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800092c:	8013      	strh	r3, [r2, #0]
 800092e:	e73c      	b.n	80007aa <HAL_PCD_IRQHandler+0x4c>
    else
    {
      /* Decode and service non control endpoints interrupt  */
	  
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8000930:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 8000934:	b29b      	uxth	r3, r3
 8000936:	f8ad 3006 	strh.w	r3, [sp, #6]
      if ((wEPVal & USB_EP_CTR_RX) != 0)
 800093a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800093e:	0419      	lsls	r1, r3, #16
 8000940:	d577      	bpl.n	8000a32 <HAL_PCD_IRQHandler+0x2d4>
      {  
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8000942:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
        ep = &hpcd->OUT_ep[epindex];
        
        /* OUT double Buffering*/
        if (ep->doublebuffer == 0)
 8000946:	ea4f 1845 	mov.w	r8, r5, lsl #5
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
      if ((wEPVal & USB_EP_CTR_RX) != 0)
      {  
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800094a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800094e:	051b      	lsls	r3, r3, #20
 8000950:	0d1b      	lsrs	r3, r3, #20
 8000952:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        ep = &hpcd->OUT_ep[epindex];
        
        /* OUT double Buffering*/
        if (ep->doublebuffer == 0)
 8000956:	eb04 0108 	add.w	r1, r4, r8
 800095a:	f891 3212 	ldrb.w	r3, [r1, #530]	; 0x212
 800095e:	b9ab      	cbnz	r3, 800098c <HAL_PCD_IRQHandler+0x22e>
        {
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000960:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000964:	f891 2208 	ldrb.w	r2, [r1, #520]	; 0x208
 8000968:	b29b      	uxth	r3, r3
 800096a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800096e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000972:	f8d3 640c 	ldr.w	r6, [r3, #1036]	; 0x40c
 8000976:	f3c6 0609 	ubfx	r6, r6, #0, #10
          if (count != 0)
 800097a:	b3de      	cbz	r6, 80009f4 <HAL_PCD_IRQHandler+0x296>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800097c:	f8b1 220c 	ldrh.w	r2, [r1, #524]	; 0x20c
 8000980:	4633      	mov	r3, r6
 8000982:	f8d1 121c 	ldr.w	r1, [r1, #540]	; 0x21c
 8000986:	f001 f95f 	bl	8001c48 <USB_ReadPMA>
 800098a:	e033      	b.n	80009f4 <HAL_PCD_IRQHandler+0x296>
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 800098c:	f891 3208 	ldrb.w	r3, [r1, #520]	; 0x208
 8000990:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8000994:	00db      	lsls	r3, r3, #3
 8000996:	f412 4f80 	tst.w	r2, #16384	; 0x4000
          {
            /*read from endpoint BUF0Addr buffer*/
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800099a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800099e:	b292      	uxth	r2, r2
 80009a0:	4413      	add	r3, r2
 80009a2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 80009a6:	d008      	beq.n	80009ba <HAL_PCD_IRQHandler+0x25c>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80009a8:	f8d3 6404 	ldr.w	r6, [r3, #1028]	; 0x404
 80009ac:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0)
 80009b0:	b17e      	cbz	r6, 80009d2 <HAL_PCD_IRQHandler+0x274>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80009b2:	4633      	mov	r3, r6
 80009b4:	f8b1 220e 	ldrh.w	r2, [r1, #526]	; 0x20e
 80009b8:	e007      	b.n	80009ca <HAL_PCD_IRQHandler+0x26c>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80009ba:	f8d3 640c 	ldr.w	r6, [r3, #1036]	; 0x40c
 80009be:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0)
 80009c2:	b136      	cbz	r6, 80009d2 <HAL_PCD_IRQHandler+0x274>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80009c4:	4633      	mov	r3, r6
 80009c6:	f8b1 2210 	ldrh.w	r2, [r1, #528]	; 0x210
 80009ca:	f8d1 121c 	ldr.w	r1, [r1, #540]	; 0x21c
 80009ce:	f001 f93b 	bl	8001c48 <USB_ReadPMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 80009d2:	eb04 0308 	add.w	r3, r4, r8
 80009d6:	f893 1208 	ldrb.w	r1, [r3, #520]	; 0x208
 80009da:	6822      	ldr	r2, [r4, #0]
 80009dc:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80009e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80009e4:	051b      	lsls	r3, r3, #20
 80009e6:	0d1b      	lsrs	r3, r3, #20
 80009e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80009f0:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 80009f4:	eb04 0108 	add.w	r1, r4, r8
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
 80009f8:	f8d1 3224 	ldr.w	r3, [r1, #548]	; 0x224
        ep->xfer_buff+=count;
 80009fc:	f8d1 221c 	ldr.w	r2, [r1, #540]	; 0x21c
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
 8000a00:	4433      	add	r3, r6
 8000a02:	f8c1 3224 	str.w	r3, [r1, #548]	; 0x224
        ep->xfer_buff+=count;
       
        if ((ep->xfer_len == 0) || (count < ep->maxpacket))
 8000a06:	f8d1 3220 	ldr.w	r3, [r1, #544]	; 0x220
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
        ep->xfer_buff+=count;
 8000a0a:	4432      	add	r2, r6
 8000a0c:	f8c1 221c 	str.w	r2, [r1, #540]	; 0x21c
       
        if ((ep->xfer_len == 0) || (count < ep->maxpacket))
 8000a10:	b11b      	cbz	r3, 8000a1a <HAL_PCD_IRQHandler+0x2bc>
 8000a12:	f8d1 0218 	ldr.w	r0, [r1, #536]	; 0x218
 8000a16:	4286      	cmp	r6, r0
 8000a18:	d206      	bcs.n	8000a28 <HAL_PCD_IRQHandler+0x2ca>
        {
          /* RX COMPLETE */
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8000a1a:	44a0      	add	r8, r4
 8000a1c:	f898 1208 	ldrb.w	r1, [r8, #520]	; 0x208
 8000a20:	4620      	mov	r0, r4
 8000a22:	f001 fe75 	bl	8002710 <HAL_PCD_DataOutStageCallback>
 8000a26:	e004      	b.n	8000a32 <HAL_PCD_IRQHandler+0x2d4>
        }
        else
        {
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8000a28:	f891 1208 	ldrb.w	r1, [r1, #520]	; 0x208
 8000a2c:	4620      	mov	r0, r4
 8000a2e:	f7ff fe52 	bl	80006d6 <HAL_PCD_EP_Receive>
        }
        
      } /* if((wEPVal & EP_CTR_RX) */
      
      if ((wEPVal & USB_EP_CTR_TX) != 0)
 8000a32:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000a36:	061a      	lsls	r2, r3, #24
 8000a38:	f57f aeb7 	bpl.w	80007aa <HAL_PCD_IRQHandler+0x4c>
      {
        ep = &hpcd->IN_ep[epindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000a3c:	6820      	ldr	r0, [r4, #0]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0)
 8000a3e:	016e      	lsls	r6, r5, #5
      if ((wEPVal & USB_EP_CTR_TX) != 0)
      {
        ep = &hpcd->IN_ep[epindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000a40:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0)
 8000a44:	19a1      	adds	r1, r4, r6
      if ((wEPVal & USB_EP_CTR_TX) != 0)
      {
        ep = &hpcd->IN_ep[epindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000a46:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8000a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000a4e:	041b      	lsls	r3, r3, #16
 8000a50:	0c1b      	lsrs	r3, r3, #16
 8000a52:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0)
 8000a56:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 8000a5a:	3502      	adds	r5, #2
 8000a5c:	b9b3      	cbnz	r3, 8000a8c <HAL_PCD_IRQHandler+0x32e>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000a5e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000a62:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
 8000a66:	b29b      	uxth	r3, r3
 8000a68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000a6c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000a70:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8000a74:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8000a78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000a7c:	606b      	str	r3, [r5, #4]
          if (ep->xfer_count != 0)
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d038      	beq.n	8000af4 <HAL_PCD_IRQHandler+0x396>
          {
            USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8000a82:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
 8000a84:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8000a86:	f000 fffe 	bl	8001a86 <USB_WritePMA>
 8000a8a:	e033      	b.n	8000af4 <HAL_PCD_IRQHandler+0x396>
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8000a8c:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8000a90:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8000a94:	00db      	lsls	r3, r3, #3
 8000a96:	f012 0f40 	tst.w	r2, #64	; 0x40
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000a9a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8000a9e:	b292      	uxth	r2, r2
 8000aa0:	4413      	add	r3, r2
 8000aa2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
            USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8000aa6:	d009      	beq.n	8000abc <HAL_PCD_IRQHandler+0x35e>
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000aa8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8000aac:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8000ab0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000ab4:	606b      	str	r3, [r5, #4]
            if (ep->xfer_count != 0)
 8000ab6:	b16b      	cbz	r3, 8000ad4 <HAL_PCD_IRQHandler+0x376>
            {
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 8000ab8:	8dca      	ldrh	r2, [r1, #46]	; 0x2e
 8000aba:	e008      	b.n	8000ace <HAL_PCD_IRQHandler+0x370>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8000abc:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8000ac0:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8000ac4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000ac8:	606b      	str	r3, [r5, #4]
            if (ep->xfer_count != 0)
 8000aca:	b11b      	cbz	r3, 8000ad4 <HAL_PCD_IRQHandler+0x376>
            {
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8000acc:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
 8000ace:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8000ad0:	f000 ffd9 	bl	8001a86 <USB_WritePMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 8000ad4:	19a3      	adds	r3, r4, r6
 8000ad6:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8000ada:	6822      	ldr	r2, [r4, #0]
 8000adc:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8000ae0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000ae4:	051b      	lsls	r3, r3, #20
 8000ae6:	0d1b      	lsrs	r3, r3, #20
 8000ae8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000aec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000af0:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000af4:	6820      	ldr	r0, [r4, #0]
 8000af6:	19a1      	adds	r1, r4, r6
 8000af8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8000afc:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8000b00:	b292      	uxth	r2, r2
 8000b02:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8000b06:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000b0a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
        ep->xfer_buff+=ep->xfer_count;
 8000b0e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000b10:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8000b14:	644a      	str	r2, [r1, #68]	; 0x44
        ep->xfer_buff+=ep->xfer_count;
 8000b16:	441a      	add	r2, r3
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0)
 8000b18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
        ep->xfer_buff+=ep->xfer_count;
 8000b1a:	63ca      	str	r2, [r1, #60]	; 0x3c
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0)
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000b1c:	4620      	mov	r0, r4
 8000b1e:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
        ep->xfer_buff+=ep->xfer_count;
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0)
 8000b22:	b913      	cbnz	r3, 8000b2a <HAL_PCD_IRQHandler+0x3cc>
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000b24:	f001 fdfc 	bl	8002720 <HAL_PCD_DataInStageCallback>
 8000b28:	e63f      	b.n	80007aa <HAL_PCD_IRQHandler+0x4c>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8000b2a:	f7ff fdf8 	bl	800071e <HAL_PCD_EP_Transmit>
 8000b2e:	e63c      	b.n	80007aa <HAL_PCD_IRQHandler+0x4c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
    HAL_PCD_ResetCallback(hpcd);
    HAL_PCD_SetAddress(hpcd, 0);
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 8000b30:	6820      	ldr	r0, [r4, #0]
 8000b32:	f000 ffa2 	bl	8001a7a <USB_ReadInterrupts>
 8000b36:	0447      	lsls	r7, r0, #17
 8000b38:	d508      	bpl.n	8000b4c <HAL_PCD_IRQHandler+0x3ee>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 8000b3a:	6822      	ldr	r2, [r4, #0]
 8000b3c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000b40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000b44:	041b      	lsls	r3, r3, #16
 8000b46:	0c1b      	lsrs	r3, r3, #16
 8000b48:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  }
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 8000b4c:	6820      	ldr	r0, [r4, #0]
 8000b4e:	f000 ff94 	bl	8001a7a <USB_ReadInterrupts>
 8000b52:	0486      	lsls	r6, r0, #18
 8000b54:	d508      	bpl.n	8000b68 <HAL_PCD_IRQHandler+0x40a>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 8000b56:	6822      	ldr	r2, [r4, #0]
 8000b58:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000b5c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000b60:	041b      	lsls	r3, r3, #16
 8000b62:	0c1b      	lsrs	r3, r3, #16
 8000b64:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 8000b68:	6820      	ldr	r0, [r4, #0]
 8000b6a:	f000 ff86 	bl	8001a7a <USB_ReadInterrupts>
 8000b6e:	04c5      	lsls	r5, r0, #19
 8000b70:	d518      	bpl.n	8000ba4 <HAL_PCD_IRQHandler+0x446>
  {  
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 8000b72:	6822      	ldr	r2, [r4, #0]
      | USB_CNTR_ESOFM | USB_CNTR_RESETM;
    
    /*Set interrupt mask*/
    hpcd->Instance->CNTR = wInterrupt_Mask;
    
    HAL_PCD_ResumeCallback(hpcd);
 8000b74:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
  {  
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 8000b76:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8000b7a:	f023 0304 	bic.w	r3, r3, #4
 8000b7e:	041b      	lsls	r3, r3, #16
 8000b80:	0c1b      	lsrs	r3, r3, #16
 8000b82:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    /*set wInterrupt_Mask global variable*/
    wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
      | USB_CNTR_ESOFM | USB_CNTR_RESETM;
    
    /*Set interrupt mask*/
    hpcd->Instance->CNTR = wInterrupt_Mask;
 8000b86:	f44f 433d 	mov.w	r3, #48384	; 0xbd00
 8000b8a:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    
    HAL_PCD_ResumeCallback(hpcd);
 8000b8e:	f001 fdef 	bl	8002770 <HAL_PCD_ResumeCallback>
    
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 8000b92:	6822      	ldr	r2, [r4, #0]
 8000b94:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000b98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000b9c:	041b      	lsls	r3, r3, #16
 8000b9e:	0c1b      	lsrs	r3, r3, #16
 8000ba0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 8000ba4:	6820      	ldr	r0, [r4, #0]
 8000ba6:	f000 ff68 	bl	8001a7a <USB_ReadInterrupts>
 8000baa:	0500      	lsls	r0, r0, #20
 8000bac:	d51d      	bpl.n	8000bea <HAL_PCD_IRQHandler+0x48c>
  {
    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 8000bae:	6820      	ldr	r0, [r4, #0]
 8000bb0:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8000bb4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000bb8:	041b      	lsls	r3, r3, #16
 8000bba:	0c1b      	lsrs	r3, r3, #16
 8000bbc:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8000bc0:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8000bc4:	b29b      	uxth	r3, r3
 8000bc6:	f043 0308 	orr.w	r3, r3, #8
 8000bca:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8000bce:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8000bd2:	b29b      	uxth	r3, r3
 8000bd4:	f043 0304 	orr.w	r3, r3, #4
 8000bd8:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0)
 8000bdc:	f000 ff4d 	bl	8001a7a <USB_ReadInterrupts>
 8000be0:	04c1      	lsls	r1, r0, #19
 8000be2:	d402      	bmi.n	8000bea <HAL_PCD_IRQHandler+0x48c>
    {
      HAL_PCD_SuspendCallback(hpcd);
 8000be4:	4620      	mov	r0, r4
 8000be6:	f001 fdb3 	bl	8002750 <HAL_PCD_SuspendCallback>
    }
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 8000bea:	6820      	ldr	r0, [r4, #0]
 8000bec:	f000 ff45 	bl	8001a7a <USB_ReadInterrupts>
 8000bf0:	0582      	lsls	r2, r0, #22
 8000bf2:	d50b      	bpl.n	8000c0c <HAL_PCD_IRQHandler+0x4ae>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8000bf4:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 8000bf6:	4620      	mov	r0, r4
    }
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8000bf8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000bfc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000c00:	041b      	lsls	r3, r3, #16
 8000c02:	0c1b      	lsrs	r3, r3, #16
 8000c04:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8000c08:	f001 fd91 	bl	800272e <HAL_PCD_SOFCallback>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 8000c0c:	6820      	ldr	r0, [r4, #0]
 8000c0e:	f000 ff34 	bl	8001a7a <USB_ReadInterrupts>
 8000c12:	05c3      	lsls	r3, r0, #23
 8000c14:	d508      	bpl.n	8000c28 <HAL_PCD_IRQHandler+0x4ca>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 8000c16:	6822      	ldr	r2, [r4, #0]
 8000c18:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000c1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000c20:	041b      	lsls	r3, r3, #16
 8000c22:	0c1b      	lsrs	r3, r3, #16
 8000c24:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  }
}
 8000c28:	b002      	add	sp, #8
 8000c2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000c2e <HAL_PCD_EP_SetStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000c2e:	b538      	push	{r3, r4, r5, lr}
  PCD_EPTypeDef *ep = NULL;
  
  if ((0x80 & ep_addr) == 0x80)
 8000c30:	b24b      	sxtb	r3, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000c38:	bfb5      	itete	lt
 8000c3a:	eb00 1145 	addlt.w	r1, r0, r5, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000c3e:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
{
  PCD_EPTypeDef *ep = NULL;
  
  if ((0x80 & ep_addr) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000c42:	3128      	addlt	r1, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000c44:	f501 7102 	addge.w	r1, r1, #520	; 0x208
  }
  
  ep->is_stall = 1;
 8000c48:	2201      	movs	r2, #1
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8000c4a:	0fdb      	lsrs	r3, r3, #31
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }
  
  ep->is_stall = 1;
  ep->num   = ep_addr & 0x7F;
 8000c4c:	b2ed      	uxtb	r5, r5
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }
  
  ep->is_stall = 1;
 8000c4e:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 8000c50:	700d      	strb	r5, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8000c52:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd);
 8000c54:	f890 33e8 	ldrb.w	r3, [r0, #1000]	; 0x3e8
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000c58:	4604      	mov	r4, r0
  
  ep->is_stall = 1;
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
  
  __HAL_LOCK(hpcd);
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d00e      	beq.n	8000c7c <HAL_PCD_EP_SetStall+0x4e>
 8000c5e:	f880 23e8 	strb.w	r2, [r0, #1000]	; 0x3e8
  USB_EPSetStall(hpcd->Instance , ep);
 8000c62:	6800      	ldr	r0, [r0, #0]
 8000c64:	f000 fe8c 	bl	8001980 <USB_EPSetStall>
  if((ep_addr & 0x7F) == 0)
 8000c68:	b925      	cbnz	r5, 8000c74 <HAL_PCD_EP_SetStall+0x46>
  {
    USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8000c6a:	f504 717b 	add.w	r1, r4, #1004	; 0x3ec
 8000c6e:	6820      	ldr	r0, [r4, #0]
 8000c70:	f000 ff07 	bl	8001a82 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd); 
 8000c74:	2000      	movs	r0, #0
 8000c76:	f884 03e8 	strb.w	r0, [r4, #1000]	; 0x3e8
  
  return HAL_OK;
 8000c7a:	bd38      	pop	{r3, r4, r5, pc}
  
  ep->is_stall = 1;
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
  
  __HAL_LOCK(hpcd);
 8000c7c:	2002      	movs	r0, #2
    USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
  }
  __HAL_UNLOCK(hpcd); 
  
  return HAL_OK;
}
 8000c7e:	bd38      	pop	{r3, r4, r5, pc}

08000c80 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000c80:	b538      	push	{r3, r4, r5, lr}
  PCD_EPTypeDef *ep = NULL;
  
  if ((0x80 & ep_addr) == 0x80)
 8000c82:	b24b      	sxtb	r3, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	f001 027f 	and.w	r2, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000c8a:	bfb5      	itete	lt
 8000c8c:	eb00 1142 	addlt.w	r1, r0, r2, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000c90:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
{
  PCD_EPTypeDef *ep = NULL;
  
  if ((0x80 & ep_addr) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000c94:	3128      	addlt	r1, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000c96:	f501 7102 	addge.w	r1, r1, #520	; 0x208
  }
  
  ep->is_stall = 0;
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8000c9a:	0fdb      	lsrs	r3, r3, #31
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }
  
  ep->is_stall = 0;
 8000c9c:	2400      	movs	r4, #0
 8000c9e:	708c      	strb	r4, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 8000ca0:	700a      	strb	r2, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8000ca2:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd); 
 8000ca4:	f890 33e8 	ldrb.w	r3, [r0, #1000]	; 0x3e8
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000ca8:	4605      	mov	r5, r0
  
  ep->is_stall = 0;
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
  
  __HAL_LOCK(hpcd); 
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d009      	beq.n	8000cc2 <HAL_PCD_EP_ClrStall+0x42>
 8000cae:	2301      	movs	r3, #1
 8000cb0:	f880 33e8 	strb.w	r3, [r0, #1000]	; 0x3e8
  USB_EPClearStall(hpcd->Instance , ep);
 8000cb4:	6800      	ldr	r0, [r0, #0]
 8000cb6:	f000 fe94 	bl	80019e2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 8000cba:	f885 43e8 	strb.w	r4, [r5, #1000]	; 0x3e8
  
  return HAL_OK;
 8000cbe:	4620      	mov	r0, r4
 8000cc0:	bd38      	pop	{r3, r4, r5, pc}
  
  ep->is_stall = 0;
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
  
  __HAL_LOCK(hpcd); 
 8000cc2:	2002      	movs	r0, #2
  USB_EPClearStall(hpcd->Instance , ep);
  __HAL_UNLOCK(hpcd); 
  
  return HAL_OK;
}
 8000cc4:	bd38      	pop	{r3, r4, r5, pc}

08000cc6 <HAL_PCDEx_PMAConfig>:

{
  PCD_EPTypeDef *ep = NULL;
  
  /* initialize ep structure*/
  if ((0x80 & ep_addr) == 0x80)
 8000cc6:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000cca:	bf1b      	ittet	ne
 8000ccc:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8000cd0:	eb00 1041 	addne.w	r0, r0, r1, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000cd4:	eb00 1041 	addeq.w	r0, r0, r1, lsl #5
  PCD_EPTypeDef *ep = NULL;
  
  /* initialize ep structure*/
  if ((0x80 & ep_addr) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000cd8:	3028      	addne	r0, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000cda:	bf08      	it	eq
 8000cdc:	f500 7002 	addeq.w	r0, r0, #520	; 0x208
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8000ce0:	b912      	cbnz	r2, 8000ce8 <HAL_PCDEx_PMAConfig+0x22>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0;
 8000ce2:	7282      	strb	r2, [r0, #10]
    /*Configure te PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 8000ce4:	8083      	strh	r3, [r0, #4]
 8000ce6:	e004      	b.n	8000cf2 <HAL_PCDEx_PMAConfig+0x2c>
  }
  else /*USB_DBL_BUF*/
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1;
 8000ce8:	2201      	movs	r2, #1
    /*Configure the PMA*/
    ep->pmaaddr0 =  pmaadress & 0xFFFF;
 8000cea:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000) >> 16;
 8000cec:	0c1b      	lsrs	r3, r3, #16
    ep->pmaadress = (uint16_t)pmaadress;
  }
  else /*USB_DBL_BUF*/
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1;
 8000cee:	7282      	strb	r2, [r0, #10]
    /*Configure the PMA*/
    ep->pmaaddr0 =  pmaadress & 0xFFFF;
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000) >> 16;
 8000cf0:	8103      	strh	r3, [r0, #8]
  }
  
  return HAL_OK; 
}
 8000cf2:	2000      	movs	r0, #0
 8000cf4:	4770      	bx	lr
	...

08000cf8 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cf8:	6803      	ldr	r3, [r0, #0]
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cfa:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cfe:	07dc      	lsls	r4, r3, #31
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d00:	4605      	mov	r5, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d02:	d403      	bmi.n	8000d0c <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d04:	682b      	ldr	r3, [r5, #0]
 8000d06:	0798      	lsls	r0, r3, #30
 8000d08:	d473      	bmi.n	8000df2 <HAL_RCC_OscConfig+0xfa>
 8000d0a:	e0f2      	b.n	8000ef2 <HAL_RCC_OscConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d0c:	4cb9      	ldr	r4, [pc, #740]	; (8000ff4 <HAL_RCC_OscConfig+0x2fc>)
 8000d0e:	6863      	ldr	r3, [r4, #4]
 8000d10:	f003 030c 	and.w	r3, r3, #12
 8000d14:	2b04      	cmp	r3, #4
 8000d16:	d007      	beq.n	8000d28 <HAL_RCC_OscConfig+0x30>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d18:	6863      	ldr	r3, [r4, #4]
 8000d1a:	f003 030c 	and.w	r3, r3, #12
 8000d1e:	2b08      	cmp	r3, #8
 8000d20:	d116      	bne.n	8000d50 <HAL_RCC_OscConfig+0x58>
 8000d22:	6863      	ldr	r3, [r4, #4]
 8000d24:	03d9      	lsls	r1, r3, #15
 8000d26:	d513      	bpl.n	8000d50 <HAL_RCC_OscConfig+0x58>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d2c:	fa93 f2a3 	rbit	r2, r3
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d30:	6822      	ldr	r2, [r4, #0]
 8000d32:	fa93 f3a3 	rbit	r3, r3
 8000d36:	fab3 f383 	clz	r3, r3
 8000d3a:	f003 031f 	and.w	r3, r3, #31
 8000d3e:	fa22 f303 	lsr.w	r3, r2, r3
 8000d42:	07da      	lsls	r2, r3, #31
 8000d44:	d5de      	bpl.n	8000d04 <HAL_RCC_OscConfig+0xc>
 8000d46:	686b      	ldr	r3, [r5, #4]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d1db      	bne.n	8000d04 <HAL_RCC_OscConfig+0xc>
      {
        return HAL_ERROR;
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	e22d      	b.n	80011ac <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d50:	686b      	ldr	r3, [r5, #4]
 8000d52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d56:	d015      	beq.n	8000d84 <HAL_RCC_OscConfig+0x8c>
 8000d58:	b96b      	cbnz	r3, 8000d76 <HAL_RCC_OscConfig+0x7e>
 8000d5a:	6823      	ldr	r3, [r4, #0]
 8000d5c:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000d60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d64:	6023      	str	r3, [r4, #0]
 8000d66:	6823      	ldr	r3, [r4, #0]
 8000d68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d6c:	6023      	str	r3, [r4, #0]
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d6e:	f7ff fa65 	bl	800023c <HAL_GetTick>
 8000d72:	4607      	mov	r7, r0
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d74:	e02f      	b.n	8000dd6 <HAL_RCC_OscConfig+0xde>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d76:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d7a:	6823      	ldr	r3, [r4, #0]
 8000d7c:	d106      	bne.n	8000d8c <HAL_RCC_OscConfig+0x94>
 8000d7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d82:	6023      	str	r3, [r4, #0]
 8000d84:	6823      	ldr	r3, [r4, #0]
 8000d86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d8a:	e005      	b.n	8000d98 <HAL_RCC_OscConfig+0xa0>
 8000d8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d90:	6023      	str	r3, [r4, #0]
 8000d92:	6823      	ldr	r3, [r4, #0]
 8000d94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d98:	6023      	str	r3, [r4, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d9a:	f7ff fa4f 	bl	800023c <HAL_GetTick>
 8000d9e:	4607      	mov	r7, r0
 8000da0:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000da4:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000da8:	6822      	ldr	r2, [r4, #0]
 8000daa:	fa96 f3a6 	rbit	r3, r6
 8000dae:	fab3 f383 	clz	r3, r3
 8000db2:	f003 031f 	and.w	r3, r3, #31
 8000db6:	fa22 f303 	lsr.w	r3, r2, r3
 8000dba:	07db      	lsls	r3, r3, #31
 8000dbc:	d4a2      	bmi.n	8000d04 <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dbe:	f7ff fa3d 	bl	800023c <HAL_GetTick>
 8000dc2:	1bc0      	subs	r0, r0, r7
 8000dc4:	2864      	cmp	r0, #100	; 0x64
 8000dc6:	d9ed      	bls.n	8000da4 <HAL_RCC_OscConfig+0xac>
          {
            return HAL_TIMEOUT;
 8000dc8:	2003      	movs	r0, #3
 8000dca:	e1ef      	b.n	80011ac <HAL_RCC_OscConfig+0x4b4>
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dcc:	f7ff fa36 	bl	800023c <HAL_GetTick>
 8000dd0:	1bc0      	subs	r0, r0, r7
 8000dd2:	2864      	cmp	r0, #100	; 0x64
 8000dd4:	d8f8      	bhi.n	8000dc8 <HAL_RCC_OscConfig+0xd0>
 8000dd6:	fa96 f3a6 	rbit	r3, r6
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dda:	6822      	ldr	r2, [r4, #0]
 8000ddc:	fa96 f3a6 	rbit	r3, r6
 8000de0:	fab3 f383 	clz	r3, r3
 8000de4:	f003 031f 	and.w	r3, r3, #31
 8000de8:	fa22 f303 	lsr.w	r3, r2, r3
 8000dec:	07d8      	lsls	r0, r3, #31
 8000dee:	d4ed      	bmi.n	8000dcc <HAL_RCC_OscConfig+0xd4>
 8000df0:	e788      	b.n	8000d04 <HAL_RCC_OscConfig+0xc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000df2:	4c80      	ldr	r4, [pc, #512]	; (8000ff4 <HAL_RCC_OscConfig+0x2fc>)
 8000df4:	6863      	ldr	r3, [r4, #4]
 8000df6:	f013 0f0c 	tst.w	r3, #12
 8000dfa:	d007      	beq.n	8000e0c <HAL_RCC_OscConfig+0x114>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000dfc:	6863      	ldr	r3, [r4, #4]
 8000dfe:	f003 030c 	and.w	r3, r3, #12
 8000e02:	2b08      	cmp	r3, #8
 8000e04:	d121      	bne.n	8000e4a <HAL_RCC_OscConfig+0x152>
 8000e06:	6863      	ldr	r3, [r4, #4]
 8000e08:	03d9      	lsls	r1, r3, #15
 8000e0a:	d41e      	bmi.n	8000e4a <HAL_RCC_OscConfig+0x152>
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	fa93 f2a3 	rbit	r2, r3
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e12:	6822      	ldr	r2, [r4, #0]
 8000e14:	fa93 f3a3 	rbit	r3, r3
 8000e18:	fab3 f383 	clz	r3, r3
 8000e1c:	f003 031f 	and.w	r3, r3, #31
 8000e20:	fa22 f303 	lsr.w	r3, r2, r3
 8000e24:	07da      	lsls	r2, r3, #31
 8000e26:	d502      	bpl.n	8000e2e <HAL_RCC_OscConfig+0x136>
 8000e28:	692b      	ldr	r3, [r5, #16]
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d18e      	bne.n	8000d4c <HAL_RCC_OscConfig+0x54>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e2e:	6823      	ldr	r3, [r4, #0]
 8000e30:	22f8      	movs	r2, #248	; 0xf8
 8000e32:	fa92 f2a2 	rbit	r2, r2
 8000e36:	fab2 f282 	clz	r2, r2
 8000e3a:	6969      	ldr	r1, [r5, #20]
 8000e3c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000e40:	fa01 f202 	lsl.w	r2, r1, r2
 8000e44:	4313      	orrs	r3, r2
 8000e46:	6023      	str	r3, [r4, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e48:	e053      	b.n	8000ef2 <HAL_RCC_OscConfig+0x1fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e4a:	692a      	ldr	r2, [r5, #16]
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	b37a      	cbz	r2, 8000eb0 <HAL_RCC_OscConfig+0x1b8>
 8000e50:	fa93 f2a3 	rbit	r2, r3
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e54:	fab2 f282 	clz	r2, r2
 8000e58:	0092      	lsls	r2, r2, #2
 8000e5a:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
 8000e5e:	f502 0284 	add.w	r2, r2, #4325376	; 0x420000
 8000e62:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e64:	f7ff f9ea 	bl	800023c <HAL_GetTick>
 8000e68:	4607      	mov	r7, r0
 8000e6a:	2602      	movs	r6, #2
 8000e6c:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e70:	4860      	ldr	r0, [pc, #384]	; (8000ff4 <HAL_RCC_OscConfig+0x2fc>)
 8000e72:	6822      	ldr	r2, [r4, #0]
 8000e74:	fa96 f3a6 	rbit	r3, r6
 8000e78:	fab3 f383 	clz	r3, r3
 8000e7c:	f003 031f 	and.w	r3, r3, #31
 8000e80:	fa22 f303 	lsr.w	r3, r2, r3
 8000e84:	07db      	lsls	r3, r3, #31
 8000e86:	d405      	bmi.n	8000e94 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e88:	f7ff f9d8 	bl	800023c <HAL_GetTick>
 8000e8c:	1bc0      	subs	r0, r0, r7
 8000e8e:	2802      	cmp	r0, #2
 8000e90:	d9ec      	bls.n	8000e6c <HAL_RCC_OscConfig+0x174>
 8000e92:	e799      	b.n	8000dc8 <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e94:	6803      	ldr	r3, [r0, #0]
 8000e96:	22f8      	movs	r2, #248	; 0xf8
 8000e98:	fa92 f2a2 	rbit	r2, r2
 8000e9c:	fab2 f282 	clz	r2, r2
 8000ea0:	6969      	ldr	r1, [r5, #20]
 8000ea2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000ea6:	fa01 f202 	lsl.w	r2, r1, r2
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	6003      	str	r3, [r0, #0]
 8000eae:	e020      	b.n	8000ef2 <HAL_RCC_OscConfig+0x1fa>
 8000eb0:	fa93 f3a3 	rbit	r3, r3
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000eb4:	fab3 f383 	clz	r3, r3
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000ebe:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8000ec2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ec4:	f7ff f9ba 	bl	800023c <HAL_GetTick>
 8000ec8:	4607      	mov	r7, r0
 8000eca:	2602      	movs	r6, #2
 8000ecc:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ed0:	6822      	ldr	r2, [r4, #0]
 8000ed2:	fa96 f3a6 	rbit	r3, r6
 8000ed6:	fab3 f383 	clz	r3, r3
 8000eda:	f003 031f 	and.w	r3, r3, #31
 8000ede:	fa22 f303 	lsr.w	r3, r2, r3
 8000ee2:	07d9      	lsls	r1, r3, #31
 8000ee4:	d505      	bpl.n	8000ef2 <HAL_RCC_OscConfig+0x1fa>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ee6:	f7ff f9a9 	bl	800023c <HAL_GetTick>
 8000eea:	1bc0      	subs	r0, r0, r7
 8000eec:	2802      	cmp	r0, #2
 8000eee:	d9ed      	bls.n	8000ecc <HAL_RCC_OscConfig+0x1d4>
 8000ef0:	e76a      	b.n	8000dc8 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ef2:	682b      	ldr	r3, [r5, #0]
 8000ef4:	071a      	lsls	r2, r3, #28
 8000ef6:	d546      	bpl.n	8000f86 <HAL_RCC_OscConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ef8:	69aa      	ldr	r2, [r5, #24]
 8000efa:	4c3e      	ldr	r4, [pc, #248]	; (8000ff4 <HAL_RCC_OscConfig+0x2fc>)
 8000efc:	2301      	movs	r3, #1
 8000efe:	493e      	ldr	r1, [pc, #248]	; (8000ff8 <HAL_RCC_OscConfig+0x300>)
 8000f00:	b312      	cbz	r2, 8000f48 <HAL_RCC_OscConfig+0x250>
 8000f02:	fa93 f2a3 	rbit	r2, r3
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f06:	fab2 f282 	clz	r2, r2
 8000f0a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f0e:	f7ff f995 	bl	800023c <HAL_GetTick>
 8000f12:	4607      	mov	r7, r0
 8000f14:	2602      	movs	r6, #2
 8000f16:	fa96 f3a6 	rbit	r3, r6
 8000f1a:	fa96 f3a6 	rbit	r3, r6
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f1e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000f20:	fa96 f3a6 	rbit	r3, r6
 8000f24:	fab3 f383 	clz	r3, r3
 8000f28:	f003 031f 	and.w	r3, r3, #31
 8000f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f30:	07db      	lsls	r3, r3, #31
 8000f32:	d405      	bmi.n	8000f40 <HAL_RCC_OscConfig+0x248>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f34:	f7ff f982 	bl	800023c <HAL_GetTick>
 8000f38:	1bc0      	subs	r0, r0, r7
 8000f3a:	2802      	cmp	r0, #2
 8000f3c:	d9eb      	bls.n	8000f16 <HAL_RCC_OscConfig+0x21e>
 8000f3e:	e743      	b.n	8000dc8 <HAL_RCC_OscConfig+0xd0>
          return HAL_TIMEOUT;
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      HAL_Delay(1);
 8000f40:	2001      	movs	r0, #1
 8000f42:	f7ff f981 	bl	8000248 <HAL_Delay>
 8000f46:	e01e      	b.n	8000f86 <HAL_RCC_OscConfig+0x28e>
 8000f48:	fa93 f3a3 	rbit	r3, r3
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f4c:	fab3 f383 	clz	r3, r3
 8000f50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f54:	f7ff f972 	bl	800023c <HAL_GetTick>
 8000f58:	4607      	mov	r7, r0
 8000f5a:	2602      	movs	r6, #2
 8000f5c:	fa96 f3a6 	rbit	r3, r6
 8000f60:	fa96 f3a6 	rbit	r3, r6
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f64:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000f66:	fa96 f3a6 	rbit	r3, r6
 8000f6a:	fab3 f383 	clz	r3, r3
 8000f6e:	f003 031f 	and.w	r3, r3, #31
 8000f72:	fa22 f303 	lsr.w	r3, r2, r3
 8000f76:	07d8      	lsls	r0, r3, #31
 8000f78:	d505      	bpl.n	8000f86 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f7a:	f7ff f95f 	bl	800023c <HAL_GetTick>
 8000f7e:	1bc0      	subs	r0, r0, r7
 8000f80:	2802      	cmp	r0, #2
 8000f82:	d9eb      	bls.n	8000f5c <HAL_RCC_OscConfig+0x264>
 8000f84:	e720      	b.n	8000dc8 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f86:	682b      	ldr	r3, [r5, #0]
 8000f88:	0759      	lsls	r1, r3, #29
 8000f8a:	d404      	bmi.n	8000f96 <HAL_RCC_OscConfig+0x29e>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f8c:	69ea      	ldr	r2, [r5, #28]
 8000f8e:	2a00      	cmp	r2, #0
 8000f90:	f040 8081 	bne.w	8001096 <HAL_RCC_OscConfig+0x39e>
 8000f94:	e0d8      	b.n	8001148 <HAL_RCC_OscConfig+0x450>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f96:	4c17      	ldr	r4, [pc, #92]	; (8000ff4 <HAL_RCC_OscConfig+0x2fc>)
    
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f98:	4e18      	ldr	r6, [pc, #96]	; (8000ffc <HAL_RCC_OscConfig+0x304>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f9a:	69e3      	ldr	r3, [r4, #28]
 8000f9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fa0:	61e3      	str	r3, [r4, #28]
 8000fa2:	69e3      	ldr	r3, [r4, #28]
 8000fa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fa8:	9301      	str	r3, [sp, #4]
 8000faa:	9b01      	ldr	r3, [sp, #4]
    
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fac:	6833      	ldr	r3, [r6, #0]
 8000fae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fb2:	6033      	str	r3, [r6, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fb4:	f7ff f942 	bl	800023c <HAL_GetTick>
 8000fb8:	4607      	mov	r7, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000fba:	6833      	ldr	r3, [r6, #0]
 8000fbc:	05da      	lsls	r2, r3, #23
 8000fbe:	d405      	bmi.n	8000fcc <HAL_RCC_OscConfig+0x2d4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fc0:	f7ff f93c 	bl	800023c <HAL_GetTick>
 8000fc4:	1bc0      	subs	r0, r0, r7
 8000fc6:	2864      	cmp	r0, #100	; 0x64
 8000fc8:	d9f7      	bls.n	8000fba <HAL_RCC_OscConfig+0x2c2>
 8000fca:	e6fd      	b.n	8000dc8 <HAL_RCC_OscConfig+0xd0>
          return HAL_TIMEOUT;
        }
      }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fcc:	68eb      	ldr	r3, [r5, #12]
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d01c      	beq.n	800100c <HAL_RCC_OscConfig+0x314>
 8000fd2:	b9ab      	cbnz	r3, 8001000 <HAL_RCC_OscConfig+0x308>
 8000fd4:	6a23      	ldr	r3, [r4, #32]
 8000fd6:	2602      	movs	r6, #2
 8000fd8:	f023 0301 	bic.w	r3, r3, #1
 8000fdc:	6223      	str	r3, [r4, #32]
 8000fde:	6a23      	ldr	r3, [r4, #32]
 8000fe0:	4637      	mov	r7, r6
 8000fe2:	f023 0304 	bic.w	r3, r3, #4
 8000fe6:	6223      	str	r3, [r4, #32]
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fe8:	f7ff f928 	bl	800023c <HAL_GetTick>
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fec:	f241 3988 	movw	r9, #5000	; 0x1388
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ff0:	4680      	mov	r8, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ff2:	e048      	b.n	8001086 <HAL_RCC_OscConfig+0x38e>
 8000ff4:	40021000 	.word	0x40021000
 8000ff8:	42420480 	.word	0x42420480
 8000ffc:	40007000 	.word	0x40007000
          return HAL_TIMEOUT;
        }
      }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001000:	2b05      	cmp	r3, #5
 8001002:	6a23      	ldr	r3, [r4, #32]
 8001004:	d106      	bne.n	8001014 <HAL_RCC_OscConfig+0x31c>
 8001006:	f043 0304 	orr.w	r3, r3, #4
 800100a:	6223      	str	r3, [r4, #32]
 800100c:	6a23      	ldr	r3, [r4, #32]
 800100e:	f043 0301 	orr.w	r3, r3, #1
 8001012:	e005      	b.n	8001020 <HAL_RCC_OscConfig+0x328>
 8001014:	f023 0301 	bic.w	r3, r3, #1
 8001018:	6223      	str	r3, [r4, #32]
 800101a:	6a23      	ldr	r3, [r4, #32]
 800101c:	f023 0304 	bic.w	r3, r3, #4
 8001020:	6223      	str	r3, [r4, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001022:	f7ff f90b 	bl	800023c <HAL_GetTick>
 8001026:	2602      	movs	r6, #2
 8001028:	4681      	mov	r9, r0
 800102a:	46b0      	mov	r8, r6
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800102c:	f241 3788 	movw	r7, #5000	; 0x1388
 8001030:	fa96 f3a6 	rbit	r3, r6
 8001034:	fa96 f3a6 	rbit	r3, r6
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001038:	b10b      	cbz	r3, 800103e <HAL_RCC_OscConfig+0x346>
 800103a:	6a22      	ldr	r2, [r4, #32]
 800103c:	e000      	b.n	8001040 <HAL_RCC_OscConfig+0x348>
 800103e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001040:	fa98 f3a8 	rbit	r3, r8
 8001044:	fab3 f383 	clz	r3, r3
 8001048:	f003 031f 	and.w	r3, r3, #31
 800104c:	fa22 f303 	lsr.w	r3, r2, r3
 8001050:	07db      	lsls	r3, r3, #31
 8001052:	d49b      	bmi.n	8000f8c <HAL_RCC_OscConfig+0x294>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001054:	f7ff f8f2 	bl	800023c <HAL_GetTick>
 8001058:	ebc9 0000 	rsb	r0, r9, r0
 800105c:	42b8      	cmp	r0, r7
 800105e:	d9e7      	bls.n	8001030 <HAL_RCC_OscConfig+0x338>
 8001060:	e6b2      	b.n	8000dc8 <HAL_RCC_OscConfig+0xd0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001062:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001064:	fa97 f3a7 	rbit	r3, r7
 8001068:	fab3 f383 	clz	r3, r3
 800106c:	f003 031f 	and.w	r3, r3, #31
 8001070:	fa22 f303 	lsr.w	r3, r2, r3
 8001074:	07d8      	lsls	r0, r3, #31
 8001076:	d589      	bpl.n	8000f8c <HAL_RCC_OscConfig+0x294>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001078:	f7ff f8e0 	bl	800023c <HAL_GetTick>
 800107c:	ebc8 0000 	rsb	r0, r8, r0
 8001080:	4548      	cmp	r0, r9
 8001082:	f63f aea1 	bhi.w	8000dc8 <HAL_RCC_OscConfig+0xd0>
 8001086:	fa96 f3a6 	rbit	r3, r6
 800108a:	fa96 f3a6 	rbit	r3, r6
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800108e:	2b00      	cmp	r3, #0
 8001090:	d0e7      	beq.n	8001062 <HAL_RCC_OscConfig+0x36a>
 8001092:	6a22      	ldr	r2, [r4, #32]
 8001094:	e7e6      	b.n	8001064 <HAL_RCC_OscConfig+0x36c>
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001096:	4c47      	ldr	r4, [pc, #284]	; (80011b4 <HAL_RCC_OscConfig+0x4bc>)
 8001098:	6863      	ldr	r3, [r4, #4]
 800109a:	f003 030c 	and.w	r3, r3, #12
 800109e:	2b08      	cmp	r3, #8
 80010a0:	f43f ae54 	beq.w	8000d4c <HAL_RCC_OscConfig+0x54>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010a4:	2a02      	cmp	r2, #2
 80010a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010aa:	d15c      	bne.n	8001166 <HAL_RCC_OscConfig+0x46e>
 80010ac:	fa93 f3a3 	rbit	r3, r3
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010b0:	fab3 f383 	clz	r3, r3
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80010ba:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c2:	f7ff f8bb 	bl	800023c <HAL_GetTick>
 80010c6:	4680      	mov	r8, r0
 80010c8:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 80010cc:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010d0:	4f38      	ldr	r7, [pc, #224]	; (80011b4 <HAL_RCC_OscConfig+0x4bc>)
 80010d2:	6822      	ldr	r2, [r4, #0]
 80010d4:	fa96 f3a6 	rbit	r3, r6
 80010d8:	fab3 f383 	clz	r3, r3
 80010dc:	f003 031f 	and.w	r3, r3, #31
 80010e0:	fa22 f303 	lsr.w	r3, r2, r3
 80010e4:	07d9      	lsls	r1, r3, #31
 80010e6:	d431      	bmi.n	800114c <HAL_RCC_OscConfig+0x454>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80010e8:	6a2e      	ldr	r6, [r5, #32]
 80010ea:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
 80010ee:	d105      	bne.n	80010fc <HAL_RCC_OscConfig+0x404>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80010f0:	6879      	ldr	r1, [r7, #4]
 80010f2:	f421 3000 	bic.w	r0, r1, #131072	; 0x20000
 80010f6:	68a9      	ldr	r1, [r5, #8]
 80010f8:	4301      	orrs	r1, r0
 80010fa:	6079      	str	r1, [r7, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010fc:	6863      	ldr	r3, [r4, #4]
 80010fe:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001100:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8001104:	4332      	orrs	r2, r6
 8001106:	4313      	orrs	r3, r2
 8001108:	6063      	str	r3, [r4, #4]
 800110a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800110e:	fa93 f3a3 	rbit	r3, r3
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001112:	fab3 f383 	clz	r3, r3
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800111c:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001120:	2201      	movs	r2, #1
 8001122:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001124:	f7ff f88a 	bl	800023c <HAL_GetTick>
 8001128:	4606      	mov	r6, r0
 800112a:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 800112e:	fa95 f3a5 	rbit	r3, r5
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001132:	6822      	ldr	r2, [r4, #0]
 8001134:	fa95 f3a5 	rbit	r3, r5
 8001138:	fab3 f383 	clz	r3, r3
 800113c:	f003 031f 	and.w	r3, r3, #31
 8001140:	fa22 f303 	lsr.w	r3, r2, r3
 8001144:	07da      	lsls	r2, r3, #31
 8001146:	d508      	bpl.n	800115a <HAL_RCC_OscConfig+0x462>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001148:	2000      	movs	r0, #0
 800114a:	e02f      	b.n	80011ac <HAL_RCC_OscConfig+0x4b4>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800114c:	f7ff f876 	bl	800023c <HAL_GetTick>
 8001150:	ebc8 0000 	rsb	r0, r8, r0
 8001154:	2802      	cmp	r0, #2
 8001156:	d9b9      	bls.n	80010cc <HAL_RCC_OscConfig+0x3d4>
 8001158:	e636      	b.n	8000dc8 <HAL_RCC_OscConfig+0xd0>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800115a:	f7ff f86f 	bl	800023c <HAL_GetTick>
 800115e:	1b80      	subs	r0, r0, r6
 8001160:	2802      	cmp	r0, #2
 8001162:	d9e4      	bls.n	800112e <HAL_RCC_OscConfig+0x436>
 8001164:	e630      	b.n	8000dc8 <HAL_RCC_OscConfig+0xd0>
 8001166:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800116a:	fab3 f383 	clz	r3, r3
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001174:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800117c:	f7ff f85e 	bl	800023c <HAL_GetTick>
 8001180:	4606      	mov	r6, r0
 8001182:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8001186:	fa95 f3a5 	rbit	r3, r5
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800118a:	6822      	ldr	r2, [r4, #0]
 800118c:	fa95 f3a5 	rbit	r3, r5
 8001190:	fab3 f383 	clz	r3, r3
 8001194:	f003 031f 	and.w	r3, r3, #31
 8001198:	fa22 f303 	lsr.w	r3, r2, r3
 800119c:	07db      	lsls	r3, r3, #31
 800119e:	d5d3      	bpl.n	8001148 <HAL_RCC_OscConfig+0x450>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011a0:	f7ff f84c 	bl	800023c <HAL_GetTick>
 80011a4:	1b80      	subs	r0, r0, r6
 80011a6:	2802      	cmp	r0, #2
 80011a8:	d9ed      	bls.n	8001186 <HAL_RCC_OscConfig+0x48e>
 80011aa:	e60d      	b.n	8000dc8 <HAL_RCC_OscConfig+0xd0>
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 80011ac:	b003      	add	sp, #12
 80011ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80011b2:	bf00      	nop
 80011b4:	40021000 	.word	0x40021000

080011b8 <HAL_RCC_GetSysClockFreq>:
{
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 80011b8:	4b1f      	ldr	r3, [pc, #124]	; (8001238 <HAL_RCC_GetSysClockFreq+0x80>)
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80011ba:	b570      	push	{r4, r5, r6, lr}
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 80011bc:	f103 0510 	add.w	r5, r3, #16
 80011c0:	462e      	mov	r6, r5
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80011c2:	b086      	sub	sp, #24
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 80011c4:	ac02      	add	r4, sp, #8
 80011c6:	4622      	mov	r2, r4
 80011c8:	6818      	ldr	r0, [r3, #0]
 80011ca:	6859      	ldr	r1, [r3, #4]
 80011cc:	3308      	adds	r3, #8
 80011ce:	c203      	stmia	r2!, {r0, r1}
 80011d0:	42ab      	cmp	r3, r5
 80011d2:	4614      	mov	r4, r2
 80011d4:	d1f7      	bne.n	80011c6 <HAL_RCC_GetSysClockFreq+0xe>
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 80011d6:	8833      	ldrh	r3, [r6, #0]
  uint32_t sysclockfreq = 0;
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0, pll2mul = 0;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 80011d8:	4c18      	ldr	r4, [pc, #96]	; (800123c <HAL_RCC_GetSysClockFreq+0x84>)
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 80011da:	f8ad 3004 	strh.w	r3, [sp, #4]
  uint32_t sysclockfreq = 0;
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0, pll2mul = 0;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 80011de:	6860      	ldr	r0, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80011e0:	f000 030c 	and.w	r3, r0, #12
 80011e4:	2b08      	cmp	r3, #8
 80011e6:	d124      	bne.n	8001232 <HAL_RCC_GetSysClockFreq+0x7a>
 80011e8:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 80011ec:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> POSITION_VAL(RCC_CFGR_PLLMULL)];
 80011f0:	fab3 f383 	clz	r3, r3
 80011f4:	f400 1270 	and.w	r2, r0, #3932160	; 0x3c0000
 80011f8:	fa22 f303 	lsr.w	r3, r2, r3
 80011fc:	aa06      	add	r2, sp, #24
 80011fe:	4413      	add	r3, r2
 8001200:	f813 1c10 	ldrb.w	r1, [r3, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001204:	03c3      	lsls	r3, r0, #15
 8001206:	d511      	bpl.n	800122c <HAL_RCC_GetSysClockFreq+0x74>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> POSITION_VAL(RCC_CFGR2_PREDIV1)];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> POSITION_VAL(RCC_CFGR_PLLXTPRE)];
 8001208:	6862      	ldr	r2, [r4, #4]
 800120a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800120e:	fa93 f3a3 	rbit	r3, r3
 8001212:	fab3 f083 	clz	r0, r3
 8001216:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800121a:	40c3      	lsrs	r3, r0
 800121c:	aa06      	add	r2, sp, #24
 800121e:	4413      	add	r3, r2
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 8001220:	f813 0c14 	ldrb.w	r0, [r3, #-20]
 8001224:	4b06      	ldr	r3, [pc, #24]	; (8001240 <HAL_RCC_GetSysClockFreq+0x88>)
 8001226:	fbb3 f0f0 	udiv	r0, r3, r0
 800122a:	e000      	b.n	800122e <HAL_RCC_GetSysClockFreq+0x76>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800122c:	4805      	ldr	r0, [pc, #20]	; (8001244 <HAL_RCC_GetSysClockFreq+0x8c>)
 800122e:	4348      	muls	r0, r1
 8001230:	e000      	b.n	8001234 <HAL_RCC_GetSysClockFreq+0x7c>
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001232:	4803      	ldr	r0, [pc, #12]	; (8001240 <HAL_RCC_GetSysClockFreq+0x88>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001234:	b006      	add	sp, #24
 8001236:	bd70      	pop	{r4, r5, r6, pc}
 8001238:	0800298c 	.word	0x0800298c
 800123c:	40021000 	.word	0x40021000
 8001240:	007a1200 	.word	0x007a1200
 8001244:	003d0900 	.word	0x003d0900

08001248 <HAL_RCC_ClockConfig>:
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001248:	4a54      	ldr	r2, [pc, #336]	; (800139c <HAL_RCC_ClockConfig+0x154>)
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800124a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800124e:	6813      	ldr	r3, [r2, #0]
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001250:	4606      	mov	r6, r0
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001252:	f003 0307 	and.w	r3, r3, #7
 8001256:	428b      	cmp	r3, r1
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001258:	460d      	mov	r5, r1
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800125a:	d30a      	bcc.n	8001272 <HAL_RCC_ClockConfig+0x2a>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800125c:	6831      	ldr	r1, [r6, #0]
 800125e:	078c      	lsls	r4, r1, #30
 8001260:	d514      	bpl.n	800128c <HAL_RCC_ClockConfig+0x44>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001262:	484f      	ldr	r0, [pc, #316]	; (80013a0 <HAL_RCC_ClockConfig+0x158>)
 8001264:	6843      	ldr	r3, [r0, #4]
 8001266:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800126a:	68b3      	ldr	r3, [r6, #8]
 800126c:	4313      	orrs	r3, r2
 800126e:	6043      	str	r3, [r0, #4]
 8001270:	e00c      	b.n	800128c <HAL_RCC_ClockConfig+0x44>
#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001272:	6813      	ldr	r3, [r2, #0]
 8001274:	f023 0307 	bic.w	r3, r3, #7
 8001278:	430b      	orrs	r3, r1
 800127a:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800127c:	6813      	ldr	r3, [r2, #0]
 800127e:	f003 0307 	and.w	r3, r3, #7
 8001282:	4299      	cmp	r1, r3
 8001284:	d0ea      	beq.n	800125c <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 8001286:	2001      	movs	r0, #1
 8001288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800128c:	07c8      	lsls	r0, r1, #31
 800128e:	d406      	bmi.n	800129e <HAL_RCC_ClockConfig+0x56>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001290:	4a42      	ldr	r2, [pc, #264]	; (800139c <HAL_RCC_ClockConfig+0x154>)
 8001292:	6813      	ldr	r3, [r2, #0]
 8001294:	f003 0307 	and.w	r3, r3, #7
 8001298:	429d      	cmp	r5, r3
 800129a:	d34a      	bcc.n	8001332 <HAL_RCC_ClockConfig+0xea>
 800129c:	e053      	b.n	8001346 <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800129e:	6872      	ldr	r2, [r6, #4]
 80012a0:	4c3f      	ldr	r4, [pc, #252]	; (80013a0 <HAL_RCC_ClockConfig+0x158>)
 80012a2:	2a01      	cmp	r2, #1
 80012a4:	d102      	bne.n	80012ac <HAL_RCC_ClockConfig+0x64>
 80012a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012aa:	e004      	b.n	80012b6 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012ac:	2a02      	cmp	r2, #2
 80012ae:	bf0c      	ite	eq
 80012b0:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 80012b4:	2302      	movne	r3, #2
 80012b6:	fa93 f1a3 	rbit	r1, r3
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012ba:	6821      	ldr	r1, [r4, #0]
 80012bc:	fa93 f3a3 	rbit	r3, r3
 80012c0:	fab3 f383 	clz	r3, r3
 80012c4:	f003 031f 	and.w	r3, r3, #31
 80012c8:	fa21 f303 	lsr.w	r3, r1, r3
 80012cc:	07d9      	lsls	r1, r3, #31
 80012ce:	d5da      	bpl.n	8001286 <HAL_RCC_ClockConfig+0x3e>
      {
        return HAL_ERROR;
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012d0:	6863      	ldr	r3, [r4, #4]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012d2:	f241 3888 	movw	r8, #5000	; 0x1388
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
      {
        return HAL_ERROR;
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012d6:	f023 0303 	bic.w	r3, r3, #3
 80012da:	431a      	orrs	r2, r3
 80012dc:	6062      	str	r2, [r4, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012de:	f7fe ffad 	bl	800023c <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012e2:	6873      	ldr	r3, [r6, #4]
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012e4:	4607      	mov	r7, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d10c      	bne.n	8001304 <HAL_RCC_ClockConfig+0xbc>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80012ea:	6863      	ldr	r3, [r4, #4]
 80012ec:	f003 030c 	and.w	r3, r3, #12
 80012f0:	2b04      	cmp	r3, #4
 80012f2:	d0cd      	beq.n	8001290 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012f4:	f7fe ffa2 	bl	800023c <HAL_GetTick>
 80012f8:	1bc0      	subs	r0, r0, r7
 80012fa:	4540      	cmp	r0, r8
 80012fc:	d9f5      	bls.n	80012ea <HAL_RCC_ClockConfig+0xa2>
        {
          return HAL_TIMEOUT;
 80012fe:	2003      	movs	r0, #3
 8001300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001304:	2b02      	cmp	r3, #2
 8001306:	d10f      	bne.n	8001328 <HAL_RCC_ClockConfig+0xe0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001308:	6863      	ldr	r3, [r4, #4]
 800130a:	f003 030c 	and.w	r3, r3, #12
 800130e:	2b08      	cmp	r3, #8
 8001310:	d0be      	beq.n	8001290 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001312:	f7fe ff93 	bl	800023c <HAL_GetTick>
 8001316:	1bc0      	subs	r0, r0, r7
 8001318:	4540      	cmp	r0, r8
 800131a:	d9f5      	bls.n	8001308 <HAL_RCC_ClockConfig+0xc0>
 800131c:	e7ef      	b.n	80012fe <HAL_RCC_ClockConfig+0xb6>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800131e:	f7fe ff8d 	bl	800023c <HAL_GetTick>
 8001322:	1bc0      	subs	r0, r0, r7
 8001324:	4540      	cmp	r0, r8
 8001326:	d8ea      	bhi.n	80012fe <HAL_RCC_ClockConfig+0xb6>
        }
      }
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001328:	6863      	ldr	r3, [r4, #4]
 800132a:	f013 0f0c 	tst.w	r3, #12
 800132e:	d1f6      	bne.n	800131e <HAL_RCC_ClockConfig+0xd6>
 8001330:	e7ae      	b.n	8001290 <HAL_RCC_ClockConfig+0x48>
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001332:	6813      	ldr	r3, [r2, #0]
 8001334:	f023 0307 	bic.w	r3, r3, #7
 8001338:	432b      	orrs	r3, r5
 800133a:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800133c:	6813      	ldr	r3, [r2, #0]
 800133e:	f003 0307 	and.w	r3, r3, #7
 8001342:	429d      	cmp	r5, r3
 8001344:	d19f      	bne.n	8001286 <HAL_RCC_ClockConfig+0x3e>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001346:	6831      	ldr	r1, [r6, #0]
 8001348:	4c15      	ldr	r4, [pc, #84]	; (80013a0 <HAL_RCC_ClockConfig+0x158>)
 800134a:	f011 0f04 	tst.w	r1, #4
 800134e:	d005      	beq.n	800135c <HAL_RCC_ClockConfig+0x114>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001350:	6863      	ldr	r3, [r4, #4]
 8001352:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001356:	68f3      	ldr	r3, [r6, #12]
 8001358:	4313      	orrs	r3, r2
 800135a:	6063      	str	r3, [r4, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800135c:	070b      	lsls	r3, r1, #28
 800135e:	d506      	bpl.n	800136e <HAL_RCC_ClockConfig+0x126>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001360:	6863      	ldr	r3, [r4, #4]
 8001362:	6932      	ldr	r2, [r6, #16]
 8001364:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001368:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800136c:	6063      	str	r3, [r4, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800136e:	f7ff ff23 	bl	80011b8 <HAL_RCC_GetSysClockFreq>
 8001372:	6863      	ldr	r3, [r4, #4]
 8001374:	22f0      	movs	r2, #240	; 0xf0
 8001376:	fa92 f2a2 	rbit	r2, r2
 800137a:	fab2 f282 	clz	r2, r2
 800137e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001382:	40d3      	lsrs	r3, r2
 8001384:	4a07      	ldr	r2, [pc, #28]	; (80013a4 <HAL_RCC_ClockConfig+0x15c>)
 8001386:	5cd3      	ldrb	r3, [r2, r3]
 8001388:	40d8      	lsrs	r0, r3
 800138a:	4b07      	ldr	r3, [pc, #28]	; (80013a8 <HAL_RCC_ClockConfig+0x160>)
 800138c:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800138e:	2000      	movs	r0, #0
 8001390:	f7fe ff28 	bl	80001e4 <HAL_InitTick>
  
  return HAL_OK;
 8001394:	2000      	movs	r0, #0
}
 8001396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800139a:	bf00      	nop
 800139c:	40022000 	.word	0x40022000
 80013a0:	40021000 	.word	0x40021000
 80013a4:	0800299e 	.word	0x0800299e
 80013a8:	20000000 	.word	0x20000000

080013ac <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80013ac:	4b01      	ldr	r3, [pc, #4]	; (80013b4 <HAL_RCC_GetHCLKFreq+0x8>)
 80013ae:	6818      	ldr	r0, [r3, #0]
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	20000000 	.word	0x20000000

080013b8 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80013b8:	6803      	ldr	r3, [r0, #0]
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80013ba:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80013be:	07dc      	lsls	r4, r3, #31
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80013c0:	4605      	mov	r5, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80013c2:	d564      	bpl.n	800148e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80013c4:	4c3e      	ldr	r4, [pc, #248]	; (80014c0 <HAL_RCCEx_PeriphCLKConfig+0x108>)
    
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 80013c6:	4e3f      	ldr	r6, [pc, #252]	; (80014c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80013c8:	69e3      	ldr	r3, [r4, #28]
 80013ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013ce:	61e3      	str	r3, [r4, #28]
 80013d0:	69e3      	ldr	r3, [r4, #28]
 80013d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d6:	9301      	str	r3, [sp, #4]
 80013d8:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 80013da:	6833      	ldr	r3, [r6, #0]
 80013dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013e0:	6033      	str	r3, [r6, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80013e2:	f7fe ff2b 	bl	800023c <HAL_GetTick>
 80013e6:	4607      	mov	r7, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80013e8:	6833      	ldr	r3, [r6, #0]
 80013ea:	05d8      	lsls	r0, r3, #23
 80013ec:	d406      	bmi.n	80013fc <HAL_RCCEx_PeriphCLKConfig+0x44>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013ee:	f7fe ff25 	bl	800023c <HAL_GetTick>
 80013f2:	1bc0      	subs	r0, r0, r7
 80013f4:	2864      	cmp	r0, #100	; 0x64
 80013f6:	d9f7      	bls.n	80013e8 <HAL_RCCEx_PeriphCLKConfig+0x30>
      {
        return HAL_TIMEOUT;
 80013f8:	2003      	movs	r0, #3
 80013fa:	e05d      	b.n	80014b8 <HAL_RCCEx_PeriphCLKConfig+0x100>
      }      
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80013fc:	6a23      	ldr	r3, [r4, #32]
 80013fe:	4830      	ldr	r0, [pc, #192]	; (80014c0 <HAL_RCCEx_PeriphCLKConfig+0x108>)
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001400:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001404:	d106      	bne.n	8001414 <HAL_RCCEx_PeriphCLKConfig+0x5c>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001406:	6a23      	ldr	r3, [r4, #32]
 8001408:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800140c:	686b      	ldr	r3, [r5, #4]
 800140e:	4313      	orrs	r3, r2
 8001410:	6223      	str	r3, [r4, #32]
 8001412:	e03c      	b.n	800148e <HAL_RCCEx_PeriphCLKConfig+0xd6>
      }      
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001414:	686a      	ldr	r2, [r5, #4]
 8001416:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800141a:	4293      	cmp	r3, r2
 800141c:	d0f3      	beq.n	8001406 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800141e:	6a01      	ldr	r1, [r0, #32]
 8001420:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001424:	f421 7740 	bic.w	r7, r1, #768	; 0x300
 8001428:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800142c:	fab2 f282 	clz	r2, r2
 8001430:	4e25      	ldr	r6, [pc, #148]	; (80014c8 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8001432:	f04f 0e01 	mov.w	lr, #1
 8001436:	f846 e022 	str.w	lr, [r6, r2, lsl #2]
 800143a:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 800143e:	fab3 f383 	clz	r3, r3
 8001442:	2200      	movs	r2, #0
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001444:	07c9      	lsls	r1, r1, #31
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001446:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800144a:	6207      	str	r7, [r0, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800144c:	d5db      	bpl.n	8001406 <HAL_RCCEx_PeriphCLKConfig+0x4e>
      {
        /* Get timeout */
        tickstart = HAL_GetTick();
 800144e:	f7fe fef5 	bl	800023c <HAL_GetTick>
 8001452:	2602      	movs	r6, #2
 8001454:	4680      	mov	r8, r0
 8001456:	4637      	mov	r7, r6
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001458:	f241 3988 	movw	r9, #5000	; 0x1388
 800145c:	fa96 f3a6 	rbit	r3, r6
 8001460:	fa96 f3a6 	rbit	r3, r6
      {
        /* Get timeout */
        tickstart = HAL_GetTick();
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001464:	b10b      	cbz	r3, 800146a <HAL_RCCEx_PeriphCLKConfig+0xb2>
 8001466:	6a22      	ldr	r2, [r4, #32]
 8001468:	e000      	b.n	800146c <HAL_RCCEx_PeriphCLKConfig+0xb4>
 800146a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800146c:	fa97 f3a7 	rbit	r3, r7
 8001470:	fab3 f383 	clz	r3, r3
 8001474:	f003 031f 	and.w	r3, r3, #31
 8001478:	fa22 f303 	lsr.w	r3, r2, r3
 800147c:	07da      	lsls	r2, r3, #31
 800147e:	d4c2      	bmi.n	8001406 <HAL_RCCEx_PeriphCLKConfig+0x4e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001480:	f7fe fedc 	bl	800023c <HAL_GetTick>
 8001484:	ebc8 0000 	rsb	r0, r8, r0
 8001488:	4548      	cmp	r0, r9
 800148a:	d9e7      	bls.n	800145c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800148c:	e7b4      	b.n	80013f8 <HAL_RCCEx_PeriphCLKConfig+0x40>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800148e:	6828      	ldr	r0, [r5, #0]
 8001490:	0783      	lsls	r3, r0, #30
 8001492:	d506      	bpl.n	80014a2 <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001494:	490a      	ldr	r1, [pc, #40]	; (80014c0 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8001496:	684b      	ldr	r3, [r1, #4]
 8001498:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800149c:	68ab      	ldr	r3, [r5, #8]
 800149e:	4313      	orrs	r3, r2
 80014a0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80014a2:	f010 0010 	ands.w	r0, r0, #16
 80014a6:	d007      	beq.n	80014b8 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80014a8:	4905      	ldr	r1, [pc, #20]	; (80014c0 <HAL_RCCEx_PeriphCLKConfig+0x108>)
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80014aa:	2000      	movs	r0, #0
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80014ac:	684b      	ldr	r3, [r1, #4]
 80014ae:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80014b2:	68eb      	ldr	r3, [r5, #12]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
}
 80014b8:	b003      	add	sp, #12
 80014ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80014be:	bf00      	nop
 80014c0:	40021000 	.word	0x40021000
 80014c4:	40007000 	.word	0x40007000
 80014c8:	42420400 	.word	0x42420400

080014cc <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80014cc:	b084      	sub	sp, #16
 80014ce:	a801      	add	r0, sp, #4
 80014d0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80014d4:	b004      	add	sp, #16
 80014d6:	2000      	movs	r0, #0
 80014d8:	4770      	bx	lr

080014da <USB_EnableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 80014da:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80014de:	b29b      	uxth	r3, r3
 80014e0:	f443 433d 	orr.w	r3, r3, #48384	; 0xbd00
 80014e4:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 80014e8:	2000      	movs	r0, #0
 80014ea:	4770      	bx	lr

080014ec <USB_DisableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80014ec:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80014f0:	f423 5374 	bic.w	r3, r3, #15616	; 0x3d00
 80014f4:	045b      	lsls	r3, r3, #17
 80014f6:	0c5b      	lsrs	r3, r3, #17
 80014f8:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 80014fc:	2000      	movs	r0, #0
 80014fe:	4770      	bx	lr

08001500 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001500:	2000      	movs	r0, #0
 8001502:	4770      	bx	lr

08001504 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{    
 8001504:	b084      	sub	sp, #16
 8001506:	b510      	push	{r4, lr}
 8001508:	ac03      	add	r4, sp, #12
 800150a:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  
  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
    
  return HAL_OK;
}
 800150e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  */
HAL_StatusTypeDef USB_DevInit (USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{    
  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8001512:	2301      	movs	r3, #1
 8001514:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8001518:	2300      	movs	r3, #0
 800151a:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
    
  return HAL_OK;
}
 800151e:	b004      	add	sp, #16
  
  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 
  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8001520:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  
  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8001524:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
    
  return HAL_OK;
}
 8001528:	4618      	mov	r0, r3
 800152a:	4770      	bx	lr

0800152c <USB_ActivateEndpoint>:
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  /* initialize Endpoint */
  switch (ep->type)
 800152c:	78cb      	ldrb	r3, [r1, #3]
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800152e:	b530      	push	{r4, r5, lr}
 8001530:	780a      	ldrb	r2, [r1, #0]
  /* initialize Endpoint */
  switch (ep->type)
 8001532:	2b03      	cmp	r3, #3
 8001534:	d82b      	bhi.n	800158e <USB_ActivateEndpoint+0x62>
 8001536:	e8df f003 	tbb	[pc, r3]
 800153a:	1f02      	.short	0x1f02
 800153c:	150c      	.short	0x150c
  {
  case EP_TYPE_CTRL:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_CONTROL);
 800153e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001542:	b29b      	uxth	r3, r3
 8001544:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8001548:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800154c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001550:	e01b      	b.n	800158a <USB_ActivateEndpoint+0x5e>
    break;
  case EP_TYPE_BULK:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_BULK);
 8001552:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001556:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800155a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800155e:	041b      	lsls	r3, r3, #16
 8001560:	0c1b      	lsrs	r3, r3, #16
 8001562:	e012      	b.n	800158a <USB_ActivateEndpoint+0x5e>
    break;
  case EP_TYPE_INTR:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
 8001564:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001568:	b29b      	uxth	r3, r3
 800156a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800156e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001572:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8001576:	e008      	b.n	800158a <USB_ActivateEndpoint+0x5e>
    break;
  case EP_TYPE_ISOC:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 8001578:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800157c:	b29b      	uxth	r3, r3
 800157e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8001582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001586:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800158a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    break;
  default:
      break;
  } 
  
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800158e:	780c      	ldrb	r4, [r1, #0]
 8001590:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8001594:	f444 4200 	orr.w	r2, r4, #32768	; 0x8000
 8001598:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800159c:	051b      	lsls	r3, r3, #20
 800159e:	0d1b      	lsrs	r3, r3, #20
 80015a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015a4:	4313      	orrs	r3, r2
 80015a6:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
  
  if (ep->doublebuffer == 0) 
 80015aa:	7a8b      	ldrb	r3, [r1, #10]
 80015ac:	780d      	ldrb	r5, [r1, #0]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d174      	bne.n	800169c <USB_ActivateEndpoint+0x170>
  {
    if (ep->is_in)
 80015b2:	784a      	ldrb	r2, [r1, #1]
 80015b4:	888b      	ldrh	r3, [r1, #4]
 80015b6:	b33a      	cbz	r2, 8001608 <USB_ActivateEndpoint+0xdc>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80015b8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80015bc:	085b      	lsrs	r3, r3, #1
 80015be:	b292      	uxth	r2, r2
 80015c0:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80015ca:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80015ce:	780a      	ldrb	r2, [r1, #0]
 80015d0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80015d4:	065b      	lsls	r3, r3, #25
 80015d6:	d50b      	bpl.n	80015f0 <USB_ActivateEndpoint+0xc4>
 80015d8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80015dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80015e0:	051b      	lsls	r3, r3, #20
 80015e2:	0d1b      	lsrs	r3, r3, #20
 80015e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80015ec:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK); 
 80015f0:	780a      	ldrb	r2, [r1, #0]
 80015f2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80015f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80015fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80015fe:	041b      	lsls	r3, r3, #16
 8001600:	0c1b      	lsrs	r3, r3, #16
 8001602:	f083 0320 	eor.w	r3, r3, #32
 8001606:	e0fb      	b.n	8001800 <USB_ActivateEndpoint+0x2d4>
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8001608:	f8b0 4050 	ldrh.w	r4, [r0, #80]	; 0x50
 800160c:	085b      	lsrs	r3, r3, #1
 800160e:	b2a4      	uxth	r4, r4
 8001610:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8001614:	3404      	adds	r4, #4
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	f500 6280 	add.w	r2, r0, #1024	; 0x400
 800161c:	f842 3014 	str.w	r3, [r2, r4, lsl #1]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8001620:	f8b0 4050 	ldrh.w	r4, [r0, #80]	; 0x50
 8001624:	780b      	ldrb	r3, [r1, #0]
 8001626:	690d      	ldr	r5, [r1, #16]
 8001628:	b2a4      	uxth	r4, r4
 800162a:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 800162e:	2d3e      	cmp	r5, #62	; 0x3e
 8001630:	f104 0406 	add.w	r4, r4, #6
 8001634:	d90b      	bls.n	800164e <USB_ActivateEndpoint+0x122>
 8001636:	f3c5 134f 	ubfx	r3, r5, #5, #16
 800163a:	06ed      	lsls	r5, r5, #27
 800163c:	bf04      	itt	eq
 800163e:	f103 33ff 	addeq.w	r3, r3, #4294967295
 8001642:	b29b      	uxtheq	r3, r3
 8001644:	ea6f 63c3 	mvn.w	r3, r3, lsl #27
 8001648:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800164c:	e006      	b.n	800165c <USB_ActivateEndpoint+0x130>
 800164e:	f3c5 034f 	ubfx	r3, r5, #1, #16
 8001652:	07ed      	lsls	r5, r5, #31
 8001654:	bf44      	itt	mi
 8001656:	3301      	addmi	r3, #1
 8001658:	b29b      	uxthmi	r3, r3
 800165a:	029b      	lsls	r3, r3, #10
 800165c:	b29b      	uxth	r3, r3
 800165e:	f842 3014 	str.w	r3, [r2, r4, lsl #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001662:	780a      	ldrb	r2, [r1, #0]
 8001664:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001668:	045c      	lsls	r4, r3, #17
 800166a:	d50b      	bpl.n	8001684 <USB_ActivateEndpoint+0x158>
 800166c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001670:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001674:	051b      	lsls	r3, r3, #20
 8001676:	0d1b      	lsrs	r3, r3, #20
 8001678:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800167c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001680:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001684:	780a      	ldrb	r2, [r1, #0]
 8001686:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800168a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800168e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001692:	041b      	lsls	r3, r3, #16
 8001694:	0c1b      	lsrs	r3, r3, #16
 8001696:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800169a:	e0b1      	b.n	8001800 <USB_ActivateEndpoint+0x2d4>
  }
  /*Double Buffer*/
  else
  {
    /*Set the endpoint as double buffered*/
    PCD_SET_EP_DBUF(USBx, ep->num);
 800169c:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 80016a0:	f500 6480 	add.w	r4, r0, #1024	; 0x400
 80016a4:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 80016a8:	051b      	lsls	r3, r3, #20
 80016aa:	0d1b      	lsrs	r3, r3, #20
 80016ac:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80016b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016b4:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
    /*Set buffer address for double buffered mode*/
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 80016b8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80016bc:	780a      	ldrb	r2, [r1, #0]
 80016be:	b29b      	uxth	r3, r3
 80016c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80016c4:	88ca      	ldrh	r2, [r1, #6]
 80016c6:	0852      	lsrs	r2, r2, #1
 80016c8:	0052      	lsls	r2, r2, #1
 80016ca:	f844 2013 	str.w	r2, [r4, r3, lsl #1]
 80016ce:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80016d2:	780a      	ldrb	r2, [r1, #0]
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80016da:	890a      	ldrh	r2, [r1, #8]
 80016dc:	3304      	adds	r3, #4
 80016de:	0852      	lsrs	r2, r2, #1
 80016e0:	0052      	lsls	r2, r2, #1
 80016e2:	f844 2013 	str.w	r2, [r4, r3, lsl #1]
    
    if (ep->is_in==0)
 80016e6:	784b      	ldrb	r3, [r1, #1]
 80016e8:	780a      	ldrb	r2, [r1, #0]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d146      	bne.n	800177c <USB_ActivateEndpoint+0x250>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80016ee:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80016f2:	045b      	lsls	r3, r3, #17
 80016f4:	d50b      	bpl.n	800170e <USB_ActivateEndpoint+0x1e2>
 80016f6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80016fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80016fe:	051b      	lsls	r3, r3, #20
 8001700:	0d1b      	lsrs	r3, r3, #20
 8001702:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001706:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800170a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800170e:	780a      	ldrb	r2, [r1, #0]
 8001710:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001714:	065d      	lsls	r5, r3, #25
 8001716:	d50b      	bpl.n	8001730 <USB_ActivateEndpoint+0x204>
 8001718:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800171c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001720:	051b      	lsls	r3, r3, #20
 8001722:	0d1b      	lsrs	r3, r3, #20
 8001724:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001728:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800172c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8001730:	780a      	ldrb	r2, [r1, #0]
 8001732:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001736:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800173a:	051b      	lsls	r3, r3, #20
 800173c:	0d1b      	lsrs	r3, r3, #20
 800173e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001742:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001746:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800174a:	780a      	ldrb	r2, [r1, #0]
 800174c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001750:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001754:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001758:	041b      	lsls	r3, r3, #16
 800175a:	0c1b      	lsrs	r3, r3, #16
 800175c:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001760:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001764:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001768:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800176c:	780a      	ldrb	r2, [r1, #0]
 800176e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001772:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001776:	051b      	lsls	r3, r3, #20
 8001778:	0d1b      	lsrs	r3, r3, #20
 800177a:	e041      	b.n	8001800 <USB_ActivateEndpoint+0x2d4>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800177c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001780:	045c      	lsls	r4, r3, #17
 8001782:	d50b      	bpl.n	800179c <USB_ActivateEndpoint+0x270>
 8001784:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001788:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800178c:	051b      	lsls	r3, r3, #20
 800178e:	0d1b      	lsrs	r3, r3, #20
 8001790:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001798:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800179c:	780a      	ldrb	r2, [r1, #0]
 800179e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80017a2:	065b      	lsls	r3, r3, #25
 80017a4:	d50b      	bpl.n	80017be <USB_ActivateEndpoint+0x292>
 80017a6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80017aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80017ae:	051b      	lsls	r3, r3, #20
 80017b0:	0d1b      	lsrs	r3, r3, #20
 80017b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017b6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80017ba:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 80017be:	780a      	ldrb	r2, [r1, #0]
 80017c0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80017c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80017c8:	051b      	lsls	r3, r3, #20
 80017ca:	0d1b      	lsrs	r3, r3, #20
 80017cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017d4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80017d8:	780a      	ldrb	r2, [r1, #0]
 80017da:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80017de:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80017e2:	051b      	lsls	r3, r3, #20
 80017e4:	0d1b      	lsrs	r3, r3, #20
 80017e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017ee:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80017f2:	780a      	ldrb	r2, [r1, #0]
 80017f4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80017f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80017fc:	049b      	lsls	r3, r3, #18
 80017fe:	0c9b      	lsrs	r3, r3, #18
 8001800:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001808:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }
  
  return HAL_OK;
}
 800180c:	2000      	movs	r0, #0
 800180e:	bd30      	pop	{r4, r5, pc}

08001810 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8001810:	b510      	push	{r4, lr}
  if (ep->doublebuffer == 0) 
 8001812:	7a8c      	ldrb	r4, [r1, #10]
 8001814:	784a      	ldrb	r2, [r1, #1]
 8001816:	780b      	ldrb	r3, [r1, #0]
 8001818:	bb1c      	cbnz	r4, 8001862 <USB_DeactivateEndpoint+0x52>
  {
    if (ep->is_in)
 800181a:	b182      	cbz	r2, 800183e <USB_DeactivateEndpoint+0x2e>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800181c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001820:	0652      	lsls	r2, r2, #25
 8001822:	d55b      	bpl.n	80018dc <USB_DeactivateEndpoint+0xcc>
 8001824:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001828:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800182c:	0512      	lsls	r2, r2, #20
 800182e:	0d12      	lsrs	r2, r2, #20
 8001830:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001834:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8001838:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
 800183c:	e04e      	b.n	80018dc <USB_DeactivateEndpoint+0xcc>
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS); 
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800183e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001842:	0454      	lsls	r4, r2, #17
 8001844:	f140 808d 	bpl.w	8001962 <USB_DeactivateEndpoint+0x152>
 8001848:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800184c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001850:	0512      	lsls	r2, r2, #20
 8001852:	0d12      	lsrs	r2, r2, #20
 8001854:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001858:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800185c:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
 8001860:	e07f      	b.n	8001962 <USB_DeactivateEndpoint+0x152>
    }
  }
  /*Double Buffer*/
  else
  { 
    if (ep->is_in==0)
 8001862:	2a00      	cmp	r2, #0
 8001864:	d142      	bne.n	80018ec <USB_DeactivateEndpoint+0xdc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001866:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800186a:	0452      	lsls	r2, r2, #17
 800186c:	d50b      	bpl.n	8001886 <USB_DeactivateEndpoint+0x76>
 800186e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001872:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001876:	0512      	lsls	r2, r2, #20
 8001878:	0d12      	lsrs	r2, r2, #20
 800187a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800187e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001882:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001886:	780a      	ldrb	r2, [r1, #0]
 8001888:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800188c:	065c      	lsls	r4, r3, #25
 800188e:	d50b      	bpl.n	80018a8 <USB_DeactivateEndpoint+0x98>
 8001890:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001894:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001898:	051b      	lsls	r3, r3, #20
 800189a:	0d1b      	lsrs	r3, r3, #20
 800189c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018a0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80018a4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80018a8:	780a      	ldrb	r2, [r1, #0]
 80018aa:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80018ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80018b2:	051b      	lsls	r3, r3, #20
 80018b4:	0d1b      	lsrs	r3, r3, #20
 80018b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018ba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80018be:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80018c2:	780a      	ldrb	r2, [r1, #0]
 80018c4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80018c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80018cc:	049b      	lsls	r3, r3, #18
 80018ce:	0c9b      	lsrs	r3, r3, #18
 80018d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018d8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80018dc:	780a      	ldrb	r2, [r1, #0]
 80018de:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80018e2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80018e6:	051b      	lsls	r3, r3, #20
 80018e8:	0d1b      	lsrs	r3, r3, #20
 80018ea:	e041      	b.n	8001970 <USB_DeactivateEndpoint+0x160>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80018ec:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80018f0:	0452      	lsls	r2, r2, #17
 80018f2:	d50b      	bpl.n	800190c <USB_DeactivateEndpoint+0xfc>
 80018f4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80018f8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80018fc:	0512      	lsls	r2, r2, #20
 80018fe:	0d12      	lsrs	r2, r2, #20
 8001900:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001904:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001908:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800190c:	780a      	ldrb	r2, [r1, #0]
 800190e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001912:	065b      	lsls	r3, r3, #25
 8001914:	d50b      	bpl.n	800192e <USB_DeactivateEndpoint+0x11e>
 8001916:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800191a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800191e:	051b      	lsls	r3, r3, #20
 8001920:	0d1b      	lsrs	r3, r3, #20
 8001922:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001926:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800192a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 800192e:	780a      	ldrb	r2, [r1, #0]
 8001930:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001934:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001938:	051b      	lsls	r3, r3, #20
 800193a:	0d1b      	lsrs	r3, r3, #20
 800193c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001944:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001948:	780a      	ldrb	r2, [r1, #0]
 800194a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800194e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001952:	051b      	lsls	r3, r3, #20
 8001954:	0d1b      	lsrs	r3, r3, #20
 8001956:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800195a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800195e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001962:	780a      	ldrb	r2, [r1, #0]
 8001964:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001968:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800196c:	049b      	lsls	r3, r3, #18
 800196e:	0c9b      	lsrs	r3, r3, #18
 8001970:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001974:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001978:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }
  
  return HAL_OK;
}
 800197c:	2000      	movs	r0, #0
 800197e:	bd10      	pop	{r4, pc}

08001980 <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
  if (ep->num == 0)
 8001980:	780a      	ldrb	r2, [r1, #0]
 8001982:	b97a      	cbnz	r2, 80019a4 <USB_EPSetStall+0x24>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(USBx, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 8001984:	8803      	ldrh	r3, [r0, #0]
 8001986:	b29b      	uxth	r3, r3
 8001988:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800198c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001990:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001994:	f083 0310 	eor.w	r3, r3, #16
 8001998:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800199c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019a0:	8003      	strh	r3, [r0, #0]
 80019a2:	e01c      	b.n	80019de <USB_EPSetStall+0x5e>
  }
  else
  {
    if (ep->is_in)
 80019a4:	784b      	ldrb	r3, [r1, #1]
 80019a6:	b153      	cbz	r3, 80019be <USB_EPSetStall+0x3e>
    {
      PCD_SET_EP_TX_STATUS(USBx, ep->num , USB_EP_TX_STALL); 
 80019a8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80019ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80019b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80019b4:	041b      	lsls	r3, r3, #16
 80019b6:	0c1b      	lsrs	r3, r3, #16
 80019b8:	f083 0310 	eor.w	r3, r3, #16
 80019bc:	e009      	b.n	80019d2 <USB_EPSetStall+0x52>
    }
    else
    {
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
 80019be:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80019c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80019c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019ca:	041b      	lsls	r3, r3, #16
 80019cc:	0c1b      	lsrs	r3, r3, #16
 80019ce:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80019d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019da:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }
  return HAL_OK;
}
 80019de:	2000      	movs	r0, #0
 80019e0:	4770      	bx	lr

080019e2 <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in)
 80019e2:	784b      	ldrb	r3, [r1, #1]
 80019e4:	780a      	ldrb	r2, [r1, #0]
 80019e6:	b1db      	cbz	r3, 8001a20 <USB_EPClearStall+0x3e>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80019e8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80019ec:	065b      	lsls	r3, r3, #25
 80019ee:	d50b      	bpl.n	8001a08 <USB_EPClearStall+0x26>
 80019f0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80019f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019f8:	051b      	lsls	r3, r3, #20
 80019fa:	0d1b      	lsrs	r3, r3, #20
 80019fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a00:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001a04:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8001a08:	780a      	ldrb	r2, [r1, #0]
 8001a0a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001a0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001a12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001a16:	041b      	lsls	r3, r3, #16
 8001a18:	0c1b      	lsrs	r3, r3, #16
 8001a1a:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8001a1e:	e01a      	b.n	8001a56 <USB_EPClearStall+0x74>
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001a20:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001a24:	045b      	lsls	r3, r3, #17
 8001a26:	d50b      	bpl.n	8001a40 <USB_EPClearStall+0x5e>
 8001a28:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001a2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a30:	051b      	lsls	r3, r3, #20
 8001a32:	0d1b      	lsrs	r3, r3, #20
 8001a34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a3c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001a40:	780a      	ldrb	r2, [r1, #0]
 8001a42:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001a46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a4e:	041b      	lsls	r3, r3, #16
 8001a50:	0c1b      	lsrs	r3, r3, #16
 8001a52:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001a56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a5e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }
  return HAL_OK;
}
 8001a62:	2000      	movs	r0, #0
 8001a64:	4770      	bx	lr

08001a66 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_TypeDef *USBx, uint8_t address)
{
  if(address == 0) 
 8001a66:	b911      	cbnz	r1, 8001a6e <USB_SetDevAddress+0x8>
  {
   /* set device address and enable function */
   USBx->DADDR = USB_DADDR_EF;
 8001a68:	2380      	movs	r3, #128	; 0x80
 8001a6a:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }
  
  return HAL_OK;
}
 8001a6e:	2000      	movs	r0, #0
 8001a70:	4770      	bx	lr

08001a72 <USB_DevConnect>:
 8001a72:	2000      	movs	r0, #0
 8001a74:	4770      	bx	lr

08001a76 <USB_DevDisconnect>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001a76:	2000      	movs	r0, #0
 8001a78:	4770      	bx	lr

08001a7a <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_TypeDef *USBx)
{
  uint32_t tmpreg = 0;
  
  tmpreg = USBx->ISTR;
 8001a7a:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8001a7e:	b280      	uxth	r0, r0
 8001a80:	4770      	bx	lr

08001a82 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001a82:	2000      	movs	r0, #0
 8001a84:	4770      	bx	lr

08001a86 <USB_WritePMA>:
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 8001a86:	3301      	adds	r3, #1
  uint32_t index = 0, temp1 = 0, temp2 = 0;
  uint16_t *pdwVal = NULL;
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8001a88:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8001a8c:	b510      	push	{r4, lr}
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 8001a8e:	105b      	asrs	r3, r3, #1
  uint32_t index = 0, temp1 = 0, temp2 = 0;
  uint16_t *pdwVal = NULL;
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8001a90:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (index = nbytes; index != 0; index--)
 8001a94:	2400      	movs	r4, #0
 8001a96:	42a3      	cmp	r3, r4
 8001a98:	d005      	beq.n	8001aa6 <USB_WritePMA+0x20>
 8001a9a:	f831 0b02 	ldrh.w	r0, [r1], #2
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
 8001a9e:	f822 0024 	strh.w	r0, [r2, r4, lsl #2]
 8001aa2:	3401      	adds	r4, #1
 8001aa4:	e7f7      	b.n	8001a96 <USB_WritePMA+0x10>
    pdwVal++;
    pbUsrBuf++;
  }
}
 8001aa6:	bd10      	pop	{r4, pc}

08001aa8 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
 8001aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001aaa:	4604      	mov	r4, r0
  uint16_t pmabuffer = 0;
  uint32_t len = ep->xfer_len;
  
  /* IN endpoint */
  if (ep->is_in == 1)
 8001aac:	7848      	ldrb	r0, [r1, #1]
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
 8001aae:	460e      	mov	r6, r1
  uint16_t pmabuffer = 0;
  uint32_t len = ep->xfer_len;
  
  /* IN endpoint */
  if (ep->is_in == 1)
 8001ab0:	2801      	cmp	r0, #1
 8001ab2:	698b      	ldr	r3, [r1, #24]
 8001ab4:	690a      	ldr	r2, [r1, #16]
 8001ab6:	7a8f      	ldrb	r7, [r1, #10]
 8001ab8:	d157      	bne.n	8001b6a <USB_EPStartXfer+0xc2>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8001aba:	461d      	mov	r5, r3
 8001abc:	4293      	cmp	r3, r2
    {
      len=ep->maxpacket;
      ep->xfer_len-=len; 
 8001abe:	bf83      	ittte	hi
 8001ac0:	1a9d      	subhi	r5, r3, r2
 8001ac2:	618d      	strhi	r5, [r1, #24]
 8001ac4:	4615      	movhi	r5, r2
    }
    else
    {  
      len=ep->xfer_len;
      ep->xfer_len =0;
 8001ac6:	2300      	movls	r3, #0
 8001ac8:	bf98      	it	ls
 8001aca:	618b      	strls	r3, [r1, #24]
 8001acc:	b2ab      	uxth	r3, r5
    }
    
    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0) 
 8001ace:	b97f      	cbnz	r7, 8001af0 <USB_EPStartXfer+0x48>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, len);
 8001ad0:	888a      	ldrh	r2, [r1, #4]
 8001ad2:	4620      	mov	r0, r4
 8001ad4:	6949      	ldr	r1, [r1, #20]
 8001ad6:	f7ff ffd6 	bl	8001a86 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8001ada:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 8001ade:	7832      	ldrb	r2, [r6, #0]
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001ae6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8001aea:	f8c3 5404 	str.w	r5, [r3, #1028]	; 0x404
 8001aee:	e030      	b.n	8001b52 <USB_EPStartXfer+0xaa>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 8001af0:	780a      	ldrb	r2, [r1, #0]
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
        pmabuffer = ep->pmaaddr0;
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 8001af2:	4620      	mov	r0, r4
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
    }
    else
    {
      /* Write the data to the USB endpoint */
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 8001af4:	f834 1022 	ldrh.w	r1, [r4, r2, lsl #2]
 8001af8:	00d2      	lsls	r2, r2, #3
 8001afa:	f011 0f40 	tst.w	r1, #64	; 0x40
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8001afe:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 8001b02:	b289      	uxth	r1, r1
 8001b04:	440a      	add	r2, r1
 8001b06:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8001b0a:	f8c2 5404 	str.w	r5, [r2, #1028]	; 0x404
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
        pmabuffer = ep->pmaaddr0;
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 8001b0e:	6971      	ldr	r1, [r6, #20]
      /* Write the data to the USB endpoint */
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
        pmabuffer = ep->pmaaddr1;
 8001b10:	bf14      	ite	ne
 8001b12:	8932      	ldrhne	r2, [r6, #8]
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
        pmabuffer = ep->pmaaddr0;
 8001b14:	88f2      	ldrheq	r2, [r6, #6]
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 8001b16:	f7ff ffb6 	bl	8001a86 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8001b1a:	7873      	ldrb	r3, [r6, #1]
 8001b1c:	7832      	ldrb	r2, [r6, #0]
 8001b1e:	b953      	cbnz	r3, 8001b36 <USB_EPStartXfer+0x8e>
 8001b20:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8001b24:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b28:	051b      	lsls	r3, r3, #20
 8001b2a:	0d1b      	lsrs	r3, r3, #20
 8001b2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b30:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001b34:	e00b      	b.n	8001b4e <USB_EPStartXfer+0xa6>
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d10b      	bne.n	8001b52 <USB_EPStartXfer+0xaa>
 8001b3a:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8001b3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b42:	051b      	lsls	r3, r3, #20
 8001b44:	0d1b      	lsrs	r3, r3, #20
 8001b46:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b4e:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
    }
    
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8001b52:	7832      	ldrb	r2, [r6, #0]
 8001b54:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8001b58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001b60:	041b      	lsls	r3, r3, #16
 8001b62:	0c1b      	lsrs	r3, r3, #16
 8001b64:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8001b68:	e066      	b.n	8001c38 <USB_EPStartXfer+0x190>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8001b6a:	4293      	cmp	r3, r2
    {
      len=ep->maxpacket;
      ep->xfer_len-=len; 
 8001b6c:	bf8b      	itete	hi
 8001b6e:	1a9b      	subhi	r3, r3, r2
    }
    else
    {
      len=ep->xfer_len;
      ep->xfer_len =0;
 8001b70:	2200      	movls	r2, #0
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
    {
      len=ep->maxpacket;
      ep->xfer_len-=len; 
 8001b72:	618b      	strhi	r3, [r1, #24]
    }
    else
    {
      len=ep->xfer_len;
      ep->xfer_len =0;
 8001b74:	618a      	strls	r2, [r1, #24]
 8001b76:	bf88      	it	hi
 8001b78:	4613      	movhi	r3, r2
 8001b7a:	7809      	ldrb	r1, [r1, #0]
    }
    
    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0) 
 8001b7c:	b327      	cbz	r7, 8001bc8 <USB_EPStartXfer+0x120>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8001b7e:	bb00      	cbnz	r0, 8001bc2 <USB_EPStartXfer+0x11a>
 8001b80:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 8001b84:	2b3e      	cmp	r3, #62	; 0x3e
 8001b86:	b292      	uxth	r2, r2
 8001b88:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8001b8c:	f101 0102 	add.w	r1, r1, #2
 8001b90:	f504 6080 	add.w	r0, r4, #1024	; 0x400
 8001b94:	d90b      	bls.n	8001bae <USB_EPStartXfer+0x106>
 8001b96:	f3c3 124f 	ubfx	r2, r3, #5, #16
 8001b9a:	06dd      	lsls	r5, r3, #27
 8001b9c:	bf04      	itt	eq
 8001b9e:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8001ba2:	b292      	uxtheq	r2, r2
 8001ba4:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8001ba8:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8001bac:	e006      	b.n	8001bbc <USB_EPStartXfer+0x114>
 8001bae:	f3c3 024f 	ubfx	r2, r3, #1, #16
 8001bb2:	07df      	lsls	r7, r3, #31
 8001bb4:	bf44      	itt	mi
 8001bb6:	3201      	addmi	r2, #1
 8001bb8:	b292      	uxthmi	r2, r2
 8001bba:	0292      	lsls	r2, r2, #10
 8001bbc:	b292      	uxth	r2, r2
 8001bbe:	f840 2011 	str.w	r2, [r0, r1, lsl #1]
 8001bc2:	7872      	ldrb	r2, [r6, #1]
 8001bc4:	7831      	ldrb	r1, [r6, #0]
 8001bc6:	bb0a      	cbnz	r2, 8001c0c <USB_EPStartXfer+0x164>
 8001bc8:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 8001bcc:	2b3e      	cmp	r3, #62	; 0x3e
 8001bce:	b292      	uxth	r2, r2
 8001bd0:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8001bd4:	f101 0106 	add.w	r1, r1, #6
 8001bd8:	f504 6080 	add.w	r0, r4, #1024	; 0x400
 8001bdc:	d90b      	bls.n	8001bf6 <USB_EPStartXfer+0x14e>
 8001bde:	f3c3 124f 	ubfx	r2, r3, #5, #16
 8001be2:	06dd      	lsls	r5, r3, #27
 8001be4:	bf04      	itt	eq
 8001be6:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8001bea:	b292      	uxtheq	r2, r2
 8001bec:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8001bf0:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8001bf4:	e006      	b.n	8001c04 <USB_EPStartXfer+0x15c>
 8001bf6:	f3c3 024f 	ubfx	r2, r3, #1, #16
 8001bfa:	07db      	lsls	r3, r3, #31
 8001bfc:	bf44      	itt	mi
 8001bfe:	3201      	addmi	r2, #1
 8001c00:	b292      	uxthmi	r2, r2
 8001c02:	0292      	lsls	r2, r2, #10
 8001c04:	b292      	uxth	r2, r2
 8001c06:	f840 2011 	str.w	r2, [r0, r1, lsl #1]
 8001c0a:	e00a      	b.n	8001c22 <USB_EPStartXfer+0x17a>
 8001c0c:	2a01      	cmp	r2, #1
 8001c0e:	d108      	bne.n	8001c22 <USB_EPStartXfer+0x17a>
 8001c10:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 8001c14:	b292      	uxth	r2, r2
 8001c16:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8001c1a:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8001c1e:	f8c1 3404 	str.w	r3, [r1, #1028]	; 0x404
    }
    
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001c22:	7832      	ldrb	r2, [r6, #0]
 8001c24:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8001c28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c30:	041b      	lsls	r3, r3, #16
 8001c32:	0c1b      	lsrs	r3, r3, #16
 8001c34:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001c38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c40:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
  }
  
  return HAL_OK;
}
 8001c44:	2000      	movs	r0, #0
 8001c46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001c48 <USB_ReadPMA>:
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 8001c48:	3301      	adds	r3, #1
  uint32_t index = 0;
  uint32_t *pdwVal = NULL;
  
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8001c4a:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8001c4e:	b510      	push	{r4, lr}
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 8001c50:	105b      	asrs	r3, r3, #1
  uint32_t index = 0;
  uint32_t *pdwVal = NULL;
  
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8001c52:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (index = nbytes; index != 0; index--)
 8001c56:	2400      	movs	r4, #0
 8001c58:	42a3      	cmp	r3, r4
 8001c5a:	d005      	beq.n	8001c68 <USB_ReadPMA+0x20>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8001c5c:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8001c60:	f821 0014 	strh.w	r0, [r1, r4, lsl #1]
 8001c64:	3401      	adds	r4, #1
 8001c66:	e7f7      	b.n	8001c58 <USB_ReadPMA+0x10>
    pbUsrBuf++;
  }
}
 8001c68:	bd10      	pop	{r4, pc}
	...

08001c6c <USBD_HID_GetCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_HID_CfgDesc);
 8001c6c:	2322      	movs	r3, #34	; 0x22
 8001c6e:	8003      	strh	r3, [r0, #0]
  return USBD_HID_CfgDesc;
}
 8001c70:	4800      	ldr	r0, [pc, #0]	; (8001c74 <USBD_HID_GetCfgDesc+0x8>)
 8001c72:	4770      	bx	lr
 8001c74:	20000054 	.word	0x20000054

08001c78 <USBD_HID_DataIn>:
                              uint8_t epnum)
{
  
  /* Ensure that the FIFO is empty before a new transfer, this condition could 
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8001c78:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
 8001c7c:	2000      	movs	r0, #0
 8001c7e:	7318      	strb	r0, [r3, #12]
  return USBD_OK;
}
 8001c80:	4770      	bx	lr
	...

08001c84 <USBD_HID_GetDeviceQualifierDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc (uint16_t *length)
{
  *length = sizeof (USBD_HID_DeviceQualifierDesc);
 8001c84:	230a      	movs	r3, #10
 8001c86:	8003      	strh	r3, [r0, #0]
  return USBD_HID_DeviceQualifierDesc;
}
 8001c88:	4800      	ldr	r0, [pc, #0]	; (8001c8c <USBD_HID_GetDeviceQualifierDesc+0x8>)
 8001c8a:	4770      	bx	lr
 8001c8c:	20000048 	.word	0x20000048

08001c90 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 8001c90:	b538      	push	{r3, r4, r5, lr}
 8001c92:	780c      	ldrb	r4, [r1, #0]
 8001c94:	4605      	mov	r5, r0
  uint16_t len = 0;
  uint8_t  *pbuf = NULL;
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef*) pdev->pClassData;
  
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8001c96:	f014 0460 	ands.w	r4, r4, #96	; 0x60
static uint8_t  USBD_HID_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
  uint16_t len = 0;
  uint8_t  *pbuf = NULL;
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef*) pdev->pClassData;
 8001c9a:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8001c9e:	d021      	beq.n	8001ce4 <USBD_HID_Setup+0x54>
 8001ca0:	2c20      	cmp	r4, #32
 8001ca2:	d145      	bne.n	8001d30 <USBD_HID_Setup+0xa0>
  {
  case USB_REQ_TYPE_CLASS :  
    switch (req->bRequest)
 8001ca4:	784a      	ldrb	r2, [r1, #1]
 8001ca6:	3a02      	subs	r2, #2
 8001ca8:	2a09      	cmp	r2, #9
 8001caa:	d816      	bhi.n	8001cda <USBD_HID_Setup+0x4a>
 8001cac:	e8df f002 	tbb	[pc, r2]
 8001cb0:	1515080f 	.word	0x1515080f
 8001cb4:	15151515 	.word	0x15151515
 8001cb8:	050b      	.short	0x050b
    {
      
      
    case HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 8001cba:	788a      	ldrb	r2, [r1, #2]
 8001cbc:	601a      	str	r2, [r3, #0]
 8001cbe:	e037      	b.n	8001d30 <USBD_HID_Setup+0xa0>
      break;
      
    case HID_REQ_GET_PROTOCOL:
      USBD_CtlSendData (pdev, 
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	e005      	b.n	8001cd2 <USBD_HID_Setup+0x42>
                        (uint8_t *)&hhid->Protocol,
                        1);    
      break;
      
    case HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8001cc6:	884a      	ldrh	r2, [r1, #2]
 8001cc8:	0a12      	lsrs	r2, r2, #8
 8001cca:	605a      	str	r2, [r3, #4]
 8001ccc:	e030      	b.n	8001d30 <USBD_HID_Setup+0xa0>
      break;
      
    case HID_REQ_GET_IDLE:
      USBD_CtlSendData (pdev, 
 8001cce:	2201      	movs	r2, #1
 8001cd0:	1d19      	adds	r1, r3, #4
 8001cd2:	4628      	mov	r0, r5
 8001cd4:	f000 fb45 	bl	8002362 <USBD_CtlSendData>
 8001cd8:	e02a      	b.n	8001d30 <USBD_HID_Setup+0xa0>
                        (uint8_t *)&hhid->IdleState,
                        1);        
      break;      
      
    default:
      USBD_CtlError (pdev, req);
 8001cda:	4628      	mov	r0, r5
 8001cdc:	f000 f994 	bl	8002008 <USBD_CtlError>
      return USBD_FAIL; 
 8001ce0:	2402      	movs	r4, #2
 8001ce2:	e026      	b.n	8001d32 <USBD_HID_Setup+0xa2>
    }
    break;
    
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8001ce4:	784a      	ldrb	r2, [r1, #1]
 8001ce6:	2a0a      	cmp	r2, #10
 8001ce8:	d019      	beq.n	8001d1e <USBD_HID_Setup+0x8e>
 8001cea:	2a0b      	cmp	r2, #11
 8001cec:	d01d      	beq.n	8001d2a <USBD_HID_Setup+0x9a>
 8001cee:	2a06      	cmp	r2, #6
 8001cf0:	d11f      	bne.n	8001d32 <USBD_HID_Setup+0xa2>
    {
    case USB_REQ_GET_DESCRIPTOR: 
      if( req->wValue >> 8 == HID_REPORT_DESC)
 8001cf2:	884b      	ldrh	r3, [r1, #2]
 8001cf4:	0a1b      	lsrs	r3, r3, #8
 8001cf6:	2b22      	cmp	r3, #34	; 0x22
 8001cf8:	d105      	bne.n	8001d06 <USBD_HID_Setup+0x76>
      {
        len = MIN(HID_CUSTOM_REPORT_DESC_SIZE , req->wLength);
 8001cfa:	88ca      	ldrh	r2, [r1, #6]
        pbuf = HID_CUSTOM_ReportDesc;
 8001cfc:	490e      	ldr	r1, [pc, #56]	; (8001d38 <USBD_HID_Setup+0xa8>)
    switch (req->bRequest)
    {
    case USB_REQ_GET_DESCRIPTOR: 
      if( req->wValue >> 8 == HID_REPORT_DESC)
      {
        len = MIN(HID_CUSTOM_REPORT_DESC_SIZE , req->wLength);
 8001cfe:	2a4e      	cmp	r2, #78	; 0x4e
 8001d00:	bf28      	it	cs
 8001d02:	224e      	movcs	r2, #78	; 0x4e
 8001d04:	e009      	b.n	8001d1a <USBD_HID_Setup+0x8a>
        pbuf = HID_CUSTOM_ReportDesc;
      }
      else if( req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8001d06:	2b21      	cmp	r3, #33	; 0x21
 8001d08:	d105      	bne.n	8001d16 <USBD_HID_Setup+0x86>
      {
        pbuf = USBD_HID_Desc;   
        len = MIN(USB_HID_DESC_SIZ , req->wLength);
 8001d0a:	88ca      	ldrh	r2, [r1, #6]
        len = MIN(HID_CUSTOM_REPORT_DESC_SIZE , req->wLength);
        pbuf = HID_CUSTOM_ReportDesc;
      }
      else if( req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
      {
        pbuf = USBD_HID_Desc;   
 8001d0c:	490b      	ldr	r1, [pc, #44]	; (8001d3c <USBD_HID_Setup+0xac>)
        len = MIN(USB_HID_DESC_SIZ , req->wLength);
 8001d0e:	2a09      	cmp	r2, #9
 8001d10:	bf28      	it	cs
 8001d12:	2209      	movcs	r2, #9
 8001d14:	e001      	b.n	8001d1a <USBD_HID_Setup+0x8a>
  */
static uint8_t  USBD_HID_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
  uint16_t len = 0;
  uint8_t  *pbuf = NULL;
 8001d16:	4621      	mov	r1, r4
  * @retval status
  */
static uint8_t  USBD_HID_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
  uint16_t len = 0;
 8001d18:	4622      	mov	r2, r4
      {
        pbuf = USBD_HID_Desc;   
        len = MIN(USB_HID_DESC_SIZ , req->wLength);
      }
      
      USBD_CtlSendData (pdev, 
 8001d1a:	4628      	mov	r0, r5
 8001d1c:	e002      	b.n	8001d24 <USBD_HID_Setup+0x94>
                        len);
      
      break;
      
    case USB_REQ_GET_INTERFACE :
      USBD_CtlSendData (pdev,
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f103 0108 	add.w	r1, r3, #8
 8001d24:	f000 fb1d 	bl	8002362 <USBD_CtlSendData>
                        (uint8_t *)&hhid->AltSetting,
                        1);
      break;
 8001d28:	e003      	b.n	8001d32 <USBD_HID_Setup+0xa2>
      
    case USB_REQ_SET_INTERFACE :
      hhid->AltSetting = (uint8_t)(req->wValue);
 8001d2a:	788a      	ldrb	r2, [r1, #2]
 8001d2c:	609a      	str	r2, [r3, #8]
      break;
 8001d2e:	e000      	b.n	8001d32 <USBD_HID_Setup+0xa2>
    }
  }
  return USBD_OK;
 8001d30:	2400      	movs	r4, #0
}
 8001d32:	4620      	mov	r0, r4
 8001d34:	bd38      	pop	{r3, r4, r5, pc}
 8001d36:	bf00      	nop
 8001d38:	20000078 	.word	0x20000078
 8001d3c:	2000003c 	.word	0x2000003c

08001d40 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 8001d40:	b510      	push	{r4, lr}
 8001d42:	4604      	mov	r4, r0
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev,
 8001d44:	2181      	movs	r1, #129	; 0x81
 8001d46:	f000 fd5c 	bl	8002802 <USBD_LL_CloseEP>
                  HID_EPIN_ADDR);
  
  /* FRee allocated memory */
  if(pdev->pClassData != NULL)
 8001d4a:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8001d4e:	b120      	cbz	r0, 8001d5a <USBD_HID_DeInit+0x1a>
  {
    USBD_free(pdev->pClassData);
 8001d50:	f000 fd96 	bl	8002880 <USBD_static_free>
    pdev->pClassData = NULL;
 8001d54:	2300      	movs	r3, #0
 8001d56:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
  } 
  
  return USBD_OK;
}
 8001d5a:	2000      	movs	r0, #0
 8001d5c:	bd10      	pop	{r4, pc}

08001d5e <USBD_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 8001d5e:	b510      	push	{r4, lr}
  uint8_t ret = 0;
  
  /* Open EP IN */
  USBD_LL_OpenEP(pdev,
 8001d60:	2305      	movs	r3, #5
 8001d62:	2203      	movs	r2, #3
 8001d64:	2181      	movs	r1, #129	; 0x81
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 8001d66:	4604      	mov	r4, r0
  uint8_t ret = 0;
  
  /* Open EP IN */
  USBD_LL_OpenEP(pdev,
 8001d68:	f000 fd41 	bl	80027ee <USBD_LL_OpenEP>
                 HID_EPIN_ADDR,
                 USBD_EP_TYPE_INTR,
                 HID_EPIN_SIZE);  
  
  pdev->pClassData = USBD_malloc(sizeof (USBD_HID_HandleTypeDef));
 8001d6c:	2010      	movs	r0, #16
 8001d6e:	f000 fd83 	bl	8002878 <USBD_static_malloc>
 8001d72:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  
  if(pdev->pClassData == NULL)
 8001d76:	b118      	cbz	r0, 8001d80 <USBD_HID_Init+0x22>
  {
    ret = 1; 
  }
  else
  {
    ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	7303      	strb	r3, [r0, #12]
  * @retval status
  */
static uint8_t  USBD_HID_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
  uint8_t ret = 0;
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	bd10      	pop	{r4, pc}
  
  pdev->pClassData = USBD_malloc(sizeof (USBD_HID_HandleTypeDef));
  
  if(pdev->pClassData == NULL)
  {
    ret = 1; 
 8001d80:	2001      	movs	r0, #1
  else
  {
    ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
  }
  return ret;
}
 8001d82:	bd10      	pop	{r4, pc}

08001d84 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport     (USBD_HandleTypeDef  *pdev, 
                                 uint8_t *report,
                                 uint16_t len)
{
 8001d84:	b510      	push	{r4, lr}
 8001d86:	4613      	mov	r3, r2
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef*)pdev->pClassData;
  
  if (pdev->dev_state == USBD_STATE_CONFIGURED )
 8001d88:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8001d8c:	2a03      	cmp	r2, #3
 8001d8e:	d109      	bne.n	8001da4 <USBD_HID_SendReport+0x20>
  */
uint8_t USBD_HID_SendReport     (USBD_HandleTypeDef  *pdev, 
                                 uint8_t *report,
                                 uint16_t len)
{
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef*)pdev->pClassData;
 8001d90:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  if (pdev->dev_state == USBD_STATE_CONFIGURED )
  {
    if(hhid->state == HID_IDLE)
 8001d94:	7b22      	ldrb	r2, [r4, #12]
 8001d96:	b92a      	cbnz	r2, 8001da4 <USBD_HID_SendReport+0x20>
    {
      hhid->state = HID_BUSY;
 8001d98:	2201      	movs	r2, #1
 8001d9a:	7322      	strb	r2, [r4, #12]
      USBD_LL_Transmit (pdev, 
 8001d9c:	460a      	mov	r2, r1
 8001d9e:	2181      	movs	r1, #129	; 0x81
 8001da0:	f000 fd5b 	bl	800285a <USBD_LL_Transmit>
                        report,
                        len);
    }
  }
  return USBD_OK;
}
 8001da4:	2000      	movs	r0, #0
 8001da6:	bd10      	pop	{r4, pc}

08001da8 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8001da8:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8001daa:	b180      	cbz	r0, 8001dce <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8001dac:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8001db0:	b113      	cbz	r3, 8001db8 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8001db2:	2300      	movs	r3, #0
 8001db4:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8001db8:	b109      	cbz	r1, 8001dbe <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8001dba:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  pdev->id = id;
 8001dc4:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8001dc6:	f000 fcd7 	bl	8002778 <USBD_LL_Init>
  
  return USBD_OK; 
 8001dca:	2000      	movs	r0, #0
 8001dcc:	bd08      	pop	{r3, pc}
{
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
 8001dce:	2002      	movs	r0, #2
  pdev->id = id;
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
  
  return USBD_OK; 
}
 8001dd0:	bd08      	pop	{r3, pc}

08001dd2 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8001dd2:	b119      	cbz	r1, 8001ddc <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8001dd4:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 8001dd8:	2000      	movs	r0, #0
 8001dda:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8001ddc:	2002      	movs	r0, #2
  }
  
  return status;
}
 8001dde:	4770      	bx	lr

08001de0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8001de0:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8001de2:	f000 fcfd 	bl	80027e0 <USBD_LL_Start>
  
  return USBD_OK;  
}
 8001de6:	2000      	movs	r0, #0
 8001de8:	bd08      	pop	{r3, pc}

08001dea <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8001dea:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 8001dec:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8001df0:	b90b      	cbnz	r3, 8001df6 <USBD_SetClassConfig+0xc>
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8001df2:	2002      	movs	r0, #2
 8001df4:	bd08      	pop	{r3, pc}
  
  if(pdev->pClass != NULL)
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4798      	blx	r3
 8001dfa:	2800      	cmp	r0, #0
 8001dfc:	d1f9      	bne.n	8001df2 <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 8001dfe:	bd08      	pop	{r3, pc}

08001e00 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8001e00:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8001e02:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	4798      	blx	r3
  return USBD_OK;
}
 8001e0a:	2000      	movs	r0, #0
 8001e0c:	bd08      	pop	{r3, pc}

08001e0e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8001e0e:	b538      	push	{r3, r4, r5, lr}
 8001e10:	4604      	mov	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8001e12:	f500 7502 	add.w	r5, r0, #520	; 0x208
 8001e16:	4628      	mov	r0, r5
 8001e18:	f000 f8e2 	bl	8001fe0 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 8001e22:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
{

  USBD_ParseSetupRequest(&pdev->request, psetup);
  
  pdev->ep0_state = USBD_EP0_SETUP;
  pdev->ep0_data_len = pdev->request.wLength;
 8001e26:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 8001e2a:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 8001e2e:	f001 031f 	and.w	r3, r1, #31
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d00c      	beq.n	8001e50 <USBD_LL_SetupStage+0x42>
 8001e36:	d306      	bcc.n	8001e46 <USBD_LL_SetupStage+0x38>
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d10e      	bne.n	8001e5a <USBD_LL_SetupStage+0x4c>
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
    break;
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 8001e3c:	4629      	mov	r1, r5
 8001e3e:	4620      	mov	r0, r4
 8001e40:	f000 fa10 	bl	8002264 <USBD_StdEPReq>
    break;
 8001e44:	e00e      	b.n	8001e64 <USBD_LL_SetupStage+0x56>
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 8001e46:	4629      	mov	r1, r5
 8001e48:	4620      	mov	r0, r4
 8001e4a:	f000 f8e9 	bl	8002020 <USBD_StdDevReq>
    break;
 8001e4e:	e009      	b.n	8001e64 <USBD_LL_SetupStage+0x56>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 8001e50:	4629      	mov	r1, r5
 8001e52:	4620      	mov	r0, r4
 8001e54:	f000 f9ee 	bl	8002234 <USBD_StdItfReq>
    break;
 8001e58:	e004      	b.n	8001e64 <USBD_LL_SetupStage+0x56>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8001e5a:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8001e5e:	4620      	mov	r0, r4
 8001e60:	f000 fcd6 	bl	8002810 <USBD_LL_StallEP>
    break;
  }  
  return USBD_OK;  
}
 8001e64:	2000      	movs	r0, #0
 8001e66:	bd38      	pop	{r3, r4, r5, pc}

08001e68 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8001e68:	b538      	push	{r3, r4, r5, lr}
 8001e6a:	4604      	mov	r4, r0
 8001e6c:	4615      	mov	r5, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8001e6e:	bb09      	cbnz	r1, 8001eb4 <USBD_LL_DataOutStage+0x4c>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8001e70:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 8001e74:	2b03      	cmp	r3, #3
 8001e76:	d126      	bne.n	8001ec6 <USBD_LL_DataOutStage+0x5e>
    {
      if(pep->rem_length > pep->maxpacket)
 8001e78:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
 8001e7c:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 8001e80:	4291      	cmp	r1, r2
 8001e82:	d90a      	bls.n	8001e9a <USBD_LL_DataOutStage+0x32>
      {
        pep->rem_length -=  pep->maxpacket;
 8001e84:	1a8b      	subs	r3, r1, r2
       
        USBD_CtlContinueRx (pdev, 
 8001e86:	429a      	cmp	r2, r3
 8001e88:	bf28      	it	cs
 8001e8a:	461a      	movcs	r2, r3
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
    {
      if(pep->rem_length > pep->maxpacket)
      {
        pep->rem_length -=  pep->maxpacket;
 8001e8c:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
       
        USBD_CtlContinueRx (pdev, 
 8001e90:	b292      	uxth	r2, r2
 8001e92:	4629      	mov	r1, r5
 8001e94:	f000 fa7a 	bl	800238c <USBD_CtlContinueRx>
 8001e98:	e015      	b.n	8001ec6 <USBD_LL_DataOutStage+0x5e>
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8001e9a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8001e9e:	691b      	ldr	r3, [r3, #16]
 8001ea0:	b123      	cbz	r3, 8001eac <USBD_LL_DataOutStage+0x44>
 8001ea2:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8001ea6:	2a03      	cmp	r2, #3
 8001ea8:	d100      	bne.n	8001eac <USBD_LL_DataOutStage+0x44>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
        {
          pdev->pClass->EP0_RxReady(pdev); 
 8001eaa:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8001eac:	4620      	mov	r0, r4
 8001eae:	f000 fa75 	bl	800239c <USBD_CtlSendStatus>
 8001eb2:	e008      	b.n	8001ec6 <USBD_LL_DataOutStage+0x5e>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 8001eb4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8001eb8:	699b      	ldr	r3, [r3, #24]
 8001eba:	b123      	cbz	r3, 8001ec6 <USBD_LL_DataOutStage+0x5e>
 8001ebc:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8001ec0:	2a03      	cmp	r2, #3
 8001ec2:	d100      	bne.n	8001ec6 <USBD_LL_DataOutStage+0x5e>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
 8001ec4:	4798      	blx	r3
  }  
  return USBD_OK;
}
 8001ec6:	2000      	movs	r0, #0
 8001ec8:	bd38      	pop	{r3, r4, r5, pc}

08001eca <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8001eca:	b570      	push	{r4, r5, r6, lr}
 8001ecc:	4613      	mov	r3, r2
 8001ece:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8001ed0:	460e      	mov	r6, r1
 8001ed2:	2900      	cmp	r1, #0
 8001ed4:	d13c      	bne.n	8001f50 <USBD_LL_DataInStage+0x86>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8001ed6:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 8001eda:	2a02      	cmp	r2, #2
 8001edc:	d130      	bne.n	8001f40 <USBD_LL_DataInStage+0x76>
    {
      if(pep->rem_length > pep->maxpacket)
 8001ede:	69c5      	ldr	r5, [r0, #28]
 8001ee0:	6a02      	ldr	r2, [r0, #32]
 8001ee2:	4295      	cmp	r5, r2
 8001ee4:	d907      	bls.n	8001ef6 <USBD_LL_DataInStage+0x2c>
      {
        pep->rem_length -=  pep->maxpacket;
 8001ee6:	1aaa      	subs	r2, r5, r2
 8001ee8:	61c2      	str	r2, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 8001eea:	4619      	mov	r1, r3
 8001eec:	b292      	uxth	r2, r2
 8001eee:	f000 fa45 	bl	800237c <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8001ef2:	4633      	mov	r3, r6
 8001ef4:	e011      	b.n	8001f1a <USBD_LL_DataInStage+0x50>
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 8001ef6:	6983      	ldr	r3, [r0, #24]
 8001ef8:	fbb3 f5f2 	udiv	r5, r3, r2
 8001efc:	fb02 3515 	mls	r5, r2, r5, r3
 8001f00:	b98d      	cbnz	r5, 8001f26 <USBD_LL_DataInStage+0x5c>
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d80f      	bhi.n	8001f26 <USBD_LL_DataInStage+0x5c>
           (pep->total_length >= pep->maxpacket) &&
 8001f06:	f8d0 21f8 	ldr.w	r2, [r0, #504]	; 0x1f8
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d20b      	bcs.n	8001f26 <USBD_LL_DataInStage+0x5c>
             (pep->total_length < pdev->ep0_data_len ))
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8001f0e:	462a      	mov	r2, r5
 8001f10:	f000 fa34 	bl	800237c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8001f14:	462b      	mov	r3, r5
           (pep->total_length >= pep->maxpacket) &&
             (pep->total_length < pdev->ep0_data_len ))
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
          pdev->ep0_data_len = 0;
 8001f16:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	4620      	mov	r0, r4
 8001f20:	f000 fca2 	bl	8002868 <USBD_LL_PrepareReceive>
 8001f24:	e00c      	b.n	8001f40 <USBD_LL_DataInStage+0x76>
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8001f26:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	b12b      	cbz	r3, 8001f3a <USBD_LL_DataInStage+0x70>
 8001f2e:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 8001f32:	2a03      	cmp	r2, #3
 8001f34:	d101      	bne.n	8001f3a <USBD_LL_DataInStage+0x70>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
          {
            pdev->pClass->EP0_TxSent(pdev); 
 8001f36:	4620      	mov	r0, r4
 8001f38:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 8001f3a:	4620      	mov	r0, r4
 8001f3c:	f000 fa39 	bl	80023b2 <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8001f40:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d10c      	bne.n	8001f62 <USBD_LL_DataInStage+0x98>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
 8001f4e:	e008      	b.n	8001f62 <USBD_LL_DataInStage+0x98>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 8001f50:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8001f54:	695b      	ldr	r3, [r3, #20]
 8001f56:	b123      	cbz	r3, 8001f62 <USBD_LL_DataInStage+0x98>
 8001f58:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8001f5c:	2a03      	cmp	r2, #3
 8001f5e:	d100      	bne.n	8001f62 <USBD_LL_DataInStage+0x98>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
 8001f60:	4798      	blx	r3
  }  
  return USBD_OK;
}
 8001f62:	2000      	movs	r0, #0
 8001f64:	bd70      	pop	{r4, r5, r6, pc}

08001f66 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8001f66:	b538      	push	{r3, r4, r5, lr}
 8001f68:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	4611      	mov	r1, r2
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8001f6e:	2540      	movs	r5, #64	; 0x40
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8001f70:	2340      	movs	r3, #64	; 0x40
 8001f72:	f000 fc3c 	bl	80027ee <USBD_LL_OpenEP>
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8001f76:	462b      	mov	r3, r5
  USBD_LL_OpenEP(pdev,
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8001f78:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	2180      	movs	r1, #128	; 0x80
 8001f80:	4620      	mov	r0, r4
 8001f82:	f000 fc34 	bl	80027ee <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8001f86:	2301      	movs	r3, #1
 8001f88:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8001f8c:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  USBD_LL_OpenEP(pdev,
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8001f90:	6225      	str	r5, [r4, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  
  if (pdev->pClassData) 
 8001f92:	b12b      	cbz	r3, 8001fa0 <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8001f94:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8001f98:	7921      	ldrb	r1, [r4, #4]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	4620      	mov	r0, r4
 8001f9e:	4798      	blx	r3
 
  
  return USBD_OK;
}
 8001fa0:	2000      	movs	r0, #0
 8001fa2:	bd38      	pop	{r3, r4, r5, pc}

08001fa4 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8001fa4:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8001fa6:	2000      	movs	r0, #0
 8001fa8:	4770      	bx	lr

08001faa <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8001faa:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8001fae:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8001fb2:	2304      	movs	r3, #4
 8001fb4:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8001fb8:	2000      	movs	r0, #0
 8001fba:	4770      	bx	lr

08001fbc <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 8001fbc:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 8001fc0:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8001fc4:	2000      	movs	r0, #0
 8001fc6:	4770      	bx	lr

08001fc8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8001fc8:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8001fca:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8001fce:	2a03      	cmp	r2, #3
 8001fd0:	d104      	bne.n	8001fdc <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 8001fd2:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8001fd6:	69db      	ldr	r3, [r3, #28]
 8001fd8:	b103      	cbz	r3, 8001fdc <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8001fda:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8001fdc:	2000      	movs	r0, #0
 8001fde:	bd08      	pop	{r3, pc}

08001fe0 <USBD_ParseSetupRequest>:
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
  req->bmRequest     = *(uint8_t *)  (pdata);
 8001fe0:	780b      	ldrb	r3, [r1, #0]
 8001fe2:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8001fe4:	784b      	ldrb	r3, [r1, #1]
 8001fe6:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8001fe8:	78ca      	ldrb	r2, [r1, #3]
 8001fea:	788b      	ldrb	r3, [r1, #2]
 8001fec:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001ff0:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8001ff2:	794a      	ldrb	r2, [r1, #5]
 8001ff4:	790b      	ldrb	r3, [r1, #4]
 8001ff6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001ffa:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8001ffc:	79ca      	ldrb	r2, [r1, #7]
 8001ffe:	798b      	ldrb	r3, [r1, #6]
 8002000:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002004:	80c3      	strh	r3, [r0, #6]
 8002006:	4770      	bx	lr

08002008 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8002008:	b510      	push	{r4, lr}
 800200a:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 800200c:	2180      	movs	r1, #128	; 0x80
 800200e:	f000 fbff 	bl	8002810 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8002012:	4620      	mov	r0, r4
}
 8002014:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
  USBD_LL_StallEP(pdev , 0);
 8002018:	2100      	movs	r1, #0
 800201a:	f000 bbf9 	b.w	8002810 <USBD_LL_StallEP>
	...

08002020 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8002020:	b573      	push	{r0, r1, r4, r5, r6, lr}
  USBD_StatusTypeDef ret = USBD_OK;  
  
  switch (req->bRequest) 
 8002022:	784b      	ldrb	r3, [r1, #1]
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8002024:	4604      	mov	r4, r0
 8002026:	460d      	mov	r5, r1
  USBD_StatusTypeDef ret = USBD_OK;  
  
  switch (req->bRequest) 
 8002028:	2b09      	cmp	r3, #9
 800202a:	f200 80f9 	bhi.w	8002220 <USBD_StdDevReq+0x200>
 800202e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002032:	00cb      	.short	0x00cb
 8002034:	00f700e2 	.word	0x00f700e2
 8002038:	00f700de 	.word	0x00f700de
 800203c:	000a0075 	.word	0x000a0075
 8002040:	00bb00f7 	.word	0x00bb00f7
 8002044:	0091      	.short	0x0091
{
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 8002046:	884b      	ldrh	r3, [r1, #2]
 8002048:	0a1a      	lsrs	r2, r3, #8
 800204a:	3a01      	subs	r2, #1
 800204c:	2a06      	cmp	r2, #6
 800204e:	f200 80e7 	bhi.w	8002220 <USBD_StdDevReq+0x200>
 8002052:	e8df f012 	tbh	[pc, r2, lsl #1]
 8002056:	0007      	.short	0x0007
 8002058:	0017000b 	.word	0x0017000b
 800205c:	00e500e5 	.word	0x00e500e5
 8002060:	0047003c 	.word	0x0047003c
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif    
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8002064:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	e017      	b.n	800209c <USBD_StdDevReq+0x7c>
    break;
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 800206c:	7c02      	ldrb	r2, [r0, #16]
 800206e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002072:	b90a      	cbnz	r2, 8002078 <USBD_StdDevReq+0x58>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8002074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002076:	e000      	b.n	800207a <USBD_StdDevReq+0x5a>
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8002078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800207a:	f10d 0006 	add.w	r0, sp, #6
 800207e:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8002080:	2302      	movs	r3, #2
 8002082:	e03a      	b.n	80020fa <USBD_StdDevReq+0xda>
    }
    break;
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8002084:	b2db      	uxtb	r3, r3
 8002086:	2b05      	cmp	r3, #5
 8002088:	f200 80ca 	bhi.w	8002220 <USBD_StdDevReq+0x200>
 800208c:	e8df f003 	tbb	[pc, r3]
 8002090:	130f0b03 	.word	0x130f0b03
 8002094:	1b17      	.short	0x1b17
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8002096:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f10d 0106 	add.w	r1, sp, #6
 80020a0:	7c20      	ldrb	r0, [r4, #16]
 80020a2:	4798      	blx	r3
 80020a4:	e02a      	b.n	80020fc <USBD_StdDevReq+0xdc>
      break;
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80020a6:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	e7f6      	b.n	800209c <USBD_StdDevReq+0x7c>
      break;
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80020ae:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	e7f2      	b.n	800209c <USBD_StdDevReq+0x7c>
      break;
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80020b6:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80020ba:	691b      	ldr	r3, [r3, #16]
 80020bc:	e7ee      	b.n	800209c <USBD_StdDevReq+0x7c>
      break;
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80020be:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80020c2:	695b      	ldr	r3, [r3, #20]
 80020c4:	e7ea      	b.n	800209c <USBD_StdDevReq+0x7c>
      break;
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80020c6:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	e7e6      	b.n	800209c <USBD_StdDevReq+0x7c>
#endif   
    }
    break;
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 80020ce:	7c03      	ldrb	r3, [r0, #16]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	f040 80a5 	bne.w	8002220 <USBD_StdDevReq+0x200>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80020d6:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80020da:	f10d 0006 	add.w	r0, sp, #6
 80020de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020e0:	4798      	blx	r3
 80020e2:	e00b      	b.n	80020fc <USBD_StdDevReq+0xdc>
      USBD_CtlError(pdev , req);
      return;
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 80020e4:	7c03      	ldrb	r3, [r0, #16]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f040 809a 	bne.w	8002220 <USBD_StdDevReq+0x200>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80020ec:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80020f0:	f10d 0006 	add.w	r0, sp, #6
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80020f8:	2307      	movs	r3, #7
 80020fa:	7043      	strb	r3, [r0, #1]
  default: 
     USBD_CtlError(pdev , req);
    return;
  }
  
  if((len != 0)&& (req->wLength != 0))
 80020fc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8002100:	2a00      	cmp	r2, #0
 8002102:	f000 8091 	beq.w	8002228 <USBD_StdDevReq+0x208>
 8002106:	88eb      	ldrh	r3, [r5, #6]
 8002108:	2b00      	cmp	r3, #0
 800210a:	f000 808d 	beq.w	8002228 <USBD_StdDevReq+0x208>
  {
    
    len = MIN(len , req->wLength);
 800210e:	429a      	cmp	r2, r3
 8002110:	bf28      	it	cs
 8002112:	461a      	movcs	r2, r3
    
    USBD_CtlSendData (pdev, 
 8002114:	4601      	mov	r1, r0
  }
  
  if((len != 0)&& (req->wLength != 0))
  {
    
    len = MIN(len , req->wLength);
 8002116:	f8ad 2006 	strh.w	r2, [sp, #6]
 800211a:	e064      	b.n	80021e6 <USBD_StdDevReq+0x1c6>
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 800211c:	888b      	ldrh	r3, [r1, #4]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d17e      	bne.n	8002220 <USBD_StdDevReq+0x200>
 8002122:	88cb      	ldrh	r3, [r1, #6]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d17b      	bne.n	8002220 <USBD_StdDevReq+0x200>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8002128:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 800212c:	788e      	ldrb	r6, [r1, #2]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800212e:	2b03      	cmp	r3, #3
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8002130:	f006 067f 	and.w	r6, r6, #127	; 0x7f
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8002134:	d074      	beq.n	8002220 <USBD_StdDevReq+0x200>
    {
      USBD_CtlError(pdev , req);
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 8002136:	f880 61fe 	strb.w	r6, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 800213a:	4631      	mov	r1, r6
 800213c:	f000 fb86 	bl	800284c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8002140:	4620      	mov	r0, r4
 8002142:	f000 f92b 	bl	800239c <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 8002146:	b10e      	cbz	r6, 800214c <USBD_StdDevReq+0x12c>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8002148:	2302      	movs	r3, #2
 800214a:	e000      	b.n	800214e <USBD_StdDevReq+0x12e>
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 800214c:	2301      	movs	r3, #1
 800214e:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
 8002152:	e069      	b.n	8002228 <USBD_StdDevReq+0x208>
                           USBD_SetupReqTypedef *req)
{
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 8002154:	7889      	ldrb	r1, [r1, #2]
 8002156:	4e36      	ldr	r6, [pc, #216]	; (8002230 <USBD_StdDevReq+0x210>)
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8002158:	2901      	cmp	r1, #1
                           USBD_SetupReqTypedef *req)
{
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 800215a:	7031      	strb	r1, [r6, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 800215c:	d860      	bhi.n	8002220 <USBD_StdDevReq+0x200>
  {            
     USBD_CtlError(pdev , req);                              
  } 
  else 
  {
    switch (pdev->dev_state) 
 800215e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002162:	2b02      	cmp	r3, #2
 8002164:	d002      	beq.n	800216c <USBD_StdDevReq+0x14c>
 8002166:	2b03      	cmp	r3, #3
 8002168:	d008      	beq.n	800217c <USBD_StdDevReq+0x15c>
 800216a:	e059      	b.n	8002220 <USBD_StdDevReq+0x200>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 800216c:	2900      	cmp	r1, #0
 800216e:	d053      	beq.n	8002218 <USBD_StdDevReq+0x1f8>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 8002170:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8002172:	2303      	movs	r3, #3
    switch (pdev->dev_state) 
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 8002174:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8002176:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
 800217a:	e00f      	b.n	800219c <USBD_StdDevReq+0x17c>
         USBD_CtlSendStatus(pdev);
      }
      break;
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 800217c:	b931      	cbnz	r1, 800218c <USBD_StdDevReq+0x16c>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800217e:	2302      	movs	r3, #2
 8002180:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 8002184:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 8002186:	f7ff fe3b 	bl	8001e00 <USBD_ClrClassConfig>
 800218a:	e045      	b.n	8002218 <USBD_StdDevReq+0x1f8>
        USBD_CtlSendStatus(pdev);
        
      } 
      else  if (cfgidx != pdev->dev_config) 
 800218c:	6841      	ldr	r1, [r0, #4]
 800218e:	2901      	cmp	r1, #1
 8002190:	d042      	beq.n	8002218 <USBD_StdDevReq+0x1f8>
      {
        /* Clear old configuration */
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8002192:	b2c9      	uxtb	r1, r1
 8002194:	f7ff fe34 	bl	8001e00 <USBD_ClrClassConfig>
        
        /* set new configuration */
        pdev->dev_config = cfgidx;
 8002198:	7831      	ldrb	r1, [r6, #0]
 800219a:	6061      	str	r1, [r4, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 800219c:	4620      	mov	r0, r4
 800219e:	f7ff fe24 	bl	8001dea <USBD_SetClassConfig>
 80021a2:	2802      	cmp	r0, #2
 80021a4:	d138      	bne.n	8002218 <USBD_StdDevReq+0x1f8>
 80021a6:	e03b      	b.n	8002220 <USBD_StdDevReq+0x200>
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{

  if (req->wLength != 1) 
 80021a8:	88ca      	ldrh	r2, [r1, #6]
 80021aa:	2a01      	cmp	r2, #1
 80021ac:	d138      	bne.n	8002220 <USBD_StdDevReq+0x200>
  {                   
     USBD_CtlError(pdev , req);
  }
  else 
  {
    switch (pdev->dev_state )  
 80021ae:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d003      	beq.n	80021be <USBD_StdDevReq+0x19e>
 80021b6:	2b03      	cmp	r3, #3
 80021b8:	d132      	bne.n	8002220 <USBD_StdDevReq+0x200>
                        1);
      break;
      
    case USBD_STATE_CONFIGURED:   
      
      USBD_CtlSendData (pdev, 
 80021ba:	1d01      	adds	r1, r0, #4
 80021bc:	e013      	b.n	80021e6 <USBD_StdDevReq+0x1c6>
  else 
  {
    switch (pdev->dev_state )  
    {
    case USBD_STATE_ADDRESSED:                     
      pdev->dev_default_config = 0;
 80021be:	4601      	mov	r1, r0
 80021c0:	2300      	movs	r3, #0
 80021c2:	f841 3f08 	str.w	r3, [r1, #8]!
 80021c6:	e00e      	b.n	80021e6 <USBD_StdDevReq+0x1c6>
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
  
    
  switch (pdev->dev_state) 
 80021c8:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80021cc:	3b02      	subs	r3, #2
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d826      	bhi.n	8002220 <USBD_StdDevReq+0x200>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 80021d2:	2301      	movs	r3, #1
 80021d4:	60c3      	str	r3, [r0, #12]
#else
    pdev->dev_config_status = 0;                                   
#endif
                      
    if (pdev->dev_remote_wakeup) 
 80021d6:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 80021da:	b10b      	cbz	r3, 80021e0 <USBD_StdDevReq+0x1c0>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 80021dc:	2303      	movs	r3, #3
 80021de:	60c3      	str	r3, [r0, #12]
    }
    
    USBD_CtlSendData (pdev, 
 80021e0:	2202      	movs	r2, #2
 80021e2:	f104 010c 	add.w	r1, r4, #12
 80021e6:	4620      	mov	r0, r4
 80021e8:	f000 f8bb 	bl	8002362 <USBD_CtlSendData>
 80021ec:	e01c      	b.n	8002228 <USBD_StdDevReq+0x208>
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80021ee:	884b      	ldrh	r3, [r1, #2]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d119      	bne.n	8002228 <USBD_StdDevReq+0x208>
 80021f4:	e008      	b.n	8002208 <USBD_StdDevReq+0x1e8>
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
  switch (pdev->dev_state)
 80021f6:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80021fa:	3b02      	subs	r3, #2
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d80f      	bhi.n	8002220 <USBD_StdDevReq+0x200>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8002200:	884b      	ldrh	r3, [r1, #2]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d110      	bne.n	8002228 <USBD_StdDevReq+0x208>
    {
      pdev->dev_remote_wakeup = 0; 
 8002206:	2300      	movs	r3, #0
 8002208:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 800220c:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002210:	4629      	mov	r1, r5
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	4620      	mov	r0, r4
 8002216:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8002218:	4620      	mov	r0, r4
 800221a:	f000 f8bf 	bl	800239c <USBD_CtlSendStatus>
 800221e:	e003      	b.n	8002228 <USBD_StdDevReq+0x208>
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
    break;
    
  default:  
    USBD_CtlError(pdev , req);
 8002220:	4629      	mov	r1, r5
 8002222:	4620      	mov	r0, r4
 8002224:	f7ff fef0 	bl	8002008 <USBD_CtlError>
    break;
  }
  
  return ret;
}
 8002228:	2000      	movs	r0, #0
 800222a:	b002      	add	sp, #8
 800222c:	bd70      	pop	{r4, r5, r6, pc}
 800222e:	bf00      	nop
 8002230:	2000011c 	.word	0x2000011c

08002234 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8002234:	b538      	push	{r3, r4, r5, lr}
  USBD_StatusTypeDef ret = USBD_OK; 
  
  switch (pdev->dev_state) 
 8002236:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800223a:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret = USBD_OK; 
  
  switch (pdev->dev_state) 
 800223c:	2b03      	cmp	r3, #3
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800223e:	460d      	mov	r5, r1
  USBD_StatusTypeDef ret = USBD_OK; 
  
  switch (pdev->dev_state) 
 8002240:	d10c      	bne.n	800225c <USBD_StdItfReq+0x28>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8002242:	790b      	ldrb	r3, [r1, #4]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d809      	bhi.n	800225c <USBD_StdItfReq+0x28>
    {
      pdev->pClass->Setup (pdev, req); 
 8002248:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 8002250:	88eb      	ldrh	r3, [r5, #6]
 8002252:	b92b      	cbnz	r3, 8002260 <USBD_StdItfReq+0x2c>
      {
         USBD_CtlSendStatus(pdev);
 8002254:	4620      	mov	r0, r4
 8002256:	f000 f8a1 	bl	800239c <USBD_CtlSendStatus>
 800225a:	e001      	b.n	8002260 <USBD_StdItfReq+0x2c>
       USBD_CtlError(pdev , req);
    }
    break;
    
  default:
     USBD_CtlError(pdev , req);
 800225c:	f7ff fed4 	bl	8002008 <USBD_CtlError>
    break;
  }
  return USBD_OK;
}
 8002260:	2000      	movs	r0, #0
 8002262:	bd38      	pop	{r3, r4, r5, pc}

08002264 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8002264:	b570      	push	{r4, r5, r6, lr}
  USBD_StatusTypeDef ret = USBD_OK; 
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 8002266:	780a      	ldrb	r2, [r1, #0]
{
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 8002268:	888e      	ldrh	r6, [r1, #4]
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 800226a:	f002 0260 	and.w	r2, r2, #96	; 0x60
 800226e:	2a20      	cmp	r2, #32
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8002270:	4604      	mov	r4, r0
 8002272:	460d      	mov	r5, r1
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 8002274:	b2f3      	uxtb	r3, r6
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 8002276:	d104      	bne.n	8002282 <USBD_StdEPReq+0x1e>
  {
    pdev->pClass->Setup (pdev, req);
 8002278:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	4798      	blx	r3
    
    return USBD_OK;
 8002280:	e051      	b.n	8002326 <USBD_StdEPReq+0xc2>
  }
  
  switch (req->bRequest) 
 8002282:	784a      	ldrb	r2, [r1, #1]
 8002284:	2a01      	cmp	r2, #1
 8002286:	d010      	beq.n	80022aa <USBD_StdEPReq+0x46>
 8002288:	d326      	bcc.n	80022d8 <USBD_StdEPReq+0x74>
 800228a:	2a03      	cmp	r2, #3
 800228c:	d14b      	bne.n	8002326 <USBD_StdEPReq+0xc2>
  {
    
  case USB_REQ_SET_FEATURE :
    
    switch (pdev->dev_state) 
 800228e:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002292:	2a02      	cmp	r2, #2
 8002294:	d027      	beq.n	80022e6 <USBD_StdEPReq+0x82>
 8002296:	2a03      	cmp	r2, #3
 8002298:	d143      	bne.n	8002322 <USBD_StdEPReq+0xbe>
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
      
    case USBD_STATE_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 800229a:	884a      	ldrh	r2, [r1, #2]
 800229c:	b992      	cbnz	r2, 80022c4 <USBD_StdEPReq+0x60>
      {
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800229e:	065e      	lsls	r6, r3, #25
 80022a0:	d010      	beq.n	80022c4 <USBD_StdEPReq+0x60>
        { 
          USBD_LL_StallEP(pdev , ep_addr);
 80022a2:	4619      	mov	r1, r3
 80022a4:	f000 fab4 	bl	8002810 <USBD_LL_StallEP>
 80022a8:	e00c      	b.n	80022c4 <USBD_StdEPReq+0x60>
    }
    break;
    
  case USB_REQ_CLEAR_FEATURE :
    
    switch (pdev->dev_state) 
 80022aa:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80022ae:	2a02      	cmp	r2, #2
 80022b0:	d019      	beq.n	80022e6 <USBD_StdEPReq+0x82>
 80022b2:	2a03      	cmp	r2, #3
 80022b4:	d135      	bne.n	8002322 <USBD_StdEPReq+0xbe>
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
      
    case USBD_STATE_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 80022b6:	884a      	ldrh	r2, [r1, #2]
 80022b8:	bbaa      	cbnz	r2, 8002326 <USBD_StdEPReq+0xc2>
      {
        if ((ep_addr & 0x7F) != 0x00) 
 80022ba:	0659      	lsls	r1, r3, #25
 80022bc:	d008      	beq.n	80022d0 <USBD_StdEPReq+0x6c>
        {        
          USBD_LL_ClearStallEP(pdev , ep_addr);
 80022be:	4619      	mov	r1, r3
 80022c0:	f000 faad 	bl	800281e <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 80022c4:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80022c8:	4629      	mov	r1, r5
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	4620      	mov	r0, r4
 80022ce:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80022d0:	4620      	mov	r0, r4
 80022d2:	f000 f863 	bl	800239c <USBD_CtlSendStatus>
 80022d6:	e026      	b.n	8002326 <USBD_StdEPReq+0xc2>
      break;    
    }
    break;
    
  case USB_REQ_GET_STATUS:                  
    switch (pdev->dev_state) 
 80022d8:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80022dc:	2a02      	cmp	r2, #2
 80022de:	d002      	beq.n	80022e6 <USBD_StdEPReq+0x82>
 80022e0:	2a03      	cmp	r2, #3
 80022e2:	d006      	beq.n	80022f2 <USBD_StdEPReq+0x8e>
 80022e4:	e01d      	b.n	8002322 <USBD_StdEPReq+0xbe>
    {
    case USBD_STATE_ADDRESSED:          
      if ((ep_addr & 0x7F) != 0x00) 
 80022e6:	065a      	lsls	r2, r3, #25
 80022e8:	d01d      	beq.n	8002326 <USBD_StdEPReq+0xc2>
      {
        USBD_LL_StallEP(pdev , ep_addr);
 80022ea:	4619      	mov	r1, r3
 80022ec:	f000 fa90 	bl	8002810 <USBD_LL_StallEP>
 80022f0:	e019      	b.n	8002326 <USBD_StdEPReq+0xc2>
 80022f2:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      }
      break;	
      
    case USBD_STATE_CONFIGURED:
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80022f6:	f016 0f80 	tst.w	r6, #128	; 0x80
 80022fa:	eb00 1505 	add.w	r5, r0, r5, lsl #4
                                         &pdev->ep_out[ep_addr & 0x7F];
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 80022fe:	4619      	mov	r1, r3
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
      
    case USBD_STATE_CONFIGURED:
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8002300:	bf14      	ite	ne
 8002302:	3514      	addne	r5, #20
 8002304:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
                                         &pdev->ep_out[ep_addr & 0x7F];
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8002308:	f000 fa90 	bl	800282c <USBD_LL_IsStallEP>
 800230c:	b110      	cbz	r0, 8002314 <USBD_StdEPReq+0xb0>
      {
        pep->status = 0x0001;     
 800230e:	2301      	movs	r3, #1
 8002310:	602b      	str	r3, [r5, #0]
 8002312:	e000      	b.n	8002316 <USBD_StdEPReq+0xb2>
      }
      else
      {
        pep->status = 0x0000;  
 8002314:	6028      	str	r0, [r5, #0]
      }
      
      USBD_CtlSendData (pdev,
 8002316:	2202      	movs	r2, #2
 8002318:	4629      	mov	r1, r5
 800231a:	4620      	mov	r0, r4
 800231c:	f000 f821 	bl	8002362 <USBD_CtlSendData>
                        (uint8_t *)&pep->status,
                        2);
      break;
 8002320:	e001      	b.n	8002326 <USBD_StdEPReq+0xc2>
      
    default:                         
      USBD_CtlError(pdev , req);
 8002322:	f7ff fe71 	bl	8002008 <USBD_CtlError>
    
  default:
    break;
  }
  return ret;
}
 8002326:	2000      	movs	r0, #0
 8002328:	bd70      	pop	{r4, r5, r6, pc}

0800232a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800232a:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 800232c:	b1c0      	cbz	r0, 8002360 <USBD_GetString+0x36>
 800232e:	4605      	mov	r5, r0
 8002330:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 8002332:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002336:	b2db      	uxtb	r3, r3
 8002338:	2c00      	cmp	r4, #0
 800233a:	d1f9      	bne.n	8002330 <USBD_GetString+0x6>
{
  uint8_t idx = 0;
  
  if (desc != NULL) 
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	3302      	adds	r3, #2
 8002340:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 8002342:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8002344:	2303      	movs	r3, #3
 8002346:	704b      	strb	r3, [r1, #1]
 8002348:	3801      	subs	r0, #1
 800234a:	2302      	movs	r3, #2
    
    while (*desc != '\0') 
 800234c:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8002350:	b135      	cbz	r5, 8002360 <USBD_GetString+0x36>
    {
      unicode[idx++] = *desc++;
 8002352:	1c5a      	adds	r2, r3, #1
 8002354:	54cd      	strb	r5, [r1, r3]
 8002356:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0x00;
 8002358:	3302      	adds	r3, #2
 800235a:	b2db      	uxtb	r3, r3
 800235c:	548c      	strb	r4, [r1, r2]
 800235e:	e7f5      	b.n	800234c <USBD_GetString+0x22>
 8002360:	bd30      	pop	{r4, r5, pc}

08002362 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8002362:	4613      	mov	r3, r2
 8002364:	b510      	push	{r4, lr}
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8002366:	2202      	movs	r2, #2
 8002368:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 800236c:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 800236e:	460a      	mov	r2, r1
                               uint16_t len)
{
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 8002370:	61c3      	str	r3, [r0, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8002372:	2100      	movs	r1, #0
 8002374:	f000 fa71 	bl	800285a <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8002378:	2000      	movs	r0, #0
 800237a:	bd10      	pop	{r4, pc}

0800237c <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 800237c:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 800237e:	4613      	mov	r3, r2
 8002380:	460a      	mov	r2, r1
 8002382:	2100      	movs	r1, #0
 8002384:	f000 fa69 	bl	800285a <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8002388:	2000      	movs	r0, #0
 800238a:	bd08      	pop	{r3, pc}

0800238c <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 800238c:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 800238e:	4613      	mov	r3, r2
 8002390:	460a      	mov	r2, r1
 8002392:	2100      	movs	r1, #0
 8002394:	f000 fa68 	bl	8002868 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 8002398:	2000      	movs	r0, #0
 800239a:	bd08      	pop	{r3, pc}

0800239c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 800239c:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800239e:	2304      	movs	r3, #4
 80023a0:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 80023a4:	2300      	movs	r3, #0
 80023a6:	461a      	mov	r2, r3
 80023a8:	4619      	mov	r1, r3
 80023aa:	f000 fa56 	bl	800285a <USBD_LL_Transmit>
  
  return USBD_OK;
}
 80023ae:	2000      	movs	r0, #0
 80023b0:	bd08      	pop	{r3, pc}

080023b2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 80023b2:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 80023b4:	2305      	movs	r3, #5
 80023b6:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 80023ba:	2300      	movs	r3, #0
 80023bc:	461a      	mov	r2, r3
 80023be:	4619      	mov	r1, r3
 80023c0:	f000 fa52 	bl	8002868 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 80023c4:	2000      	movs	r0, #0
 80023c6:	bd08      	pop	{r3, pc}

080023c8 <SystemClock_Config>:

}

/** System Clock Configuration
 */
void SystemClock_Config(void) {
 80023c8:	b530      	push	{r4, r5, lr}
	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_PeriphCLKInitTypeDef PeriphClkInit;

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80023ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000

}

/** System Clock Configuration
 */
void SystemClock_Config(void) {
 80023ce:	b095      	sub	sp, #84	; 0x54

	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_PeriphCLKInitTypeDef PeriphClkInit;

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80023d0:	2401      	movs	r4, #1
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80023d2:	930b      	str	r3, [sp, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80023d4:	2200      	movs	r2, #0
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023d6:	2502      	movs	r5, #2
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80023d8:	9312      	str	r3, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80023da:	a80a      	add	r0, sp, #40	; 0x28
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80023dc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000

	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_PeriphCLKInitTypeDef PeriphClkInit;

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80023e0:	940a      	str	r4, [sp, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80023e2:	920c      	str	r2, [sp, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023e4:	9511      	str	r5, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80023e6:	9313      	str	r3, [sp, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80023e8:	f7fe fc86 	bl	8000cf8 <HAL_RCC_OscConfig>
 80023ec:	b100      	cbz	r0, 80023f0 <SystemClock_Config+0x28>
 80023ee:	e7fe      	b.n	80023ee <SystemClock_Config+0x26>
		Error_Handler();
	}

	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80023f0:	230f      	movs	r3, #15
 80023f2:	9305      	str	r3, [sp, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023f4:	9007      	str	r0, [sp, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80023f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80023fa:	4621      	mov	r1, r4
 80023fc:	a805      	add	r0, sp, #20
		Error_Handler();
	}

	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023fe:	9506      	str	r5, [sp, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002400:	9308      	str	r3, [sp, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002402:	9309      	str	r3, [sp, #36]	; 0x24
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8002404:	f7fe ff20 	bl	8001248 <HAL_RCC_ClockConfig>
 8002408:	b100      	cbz	r0, 800240c <SystemClock_Config+0x44>
 800240a:	e7fe      	b.n	800240a <SystemClock_Config+0x42>
		Error_Handler();
	}

	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800240c:	2310      	movs	r3, #16
 800240e:	9301      	str	r3, [sp, #4]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8002410:	a801      	add	r0, sp, #4
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
		Error_Handler();
	}

	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8002412:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002416:	9304      	str	r3, [sp, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8002418:	f7fe ffce 	bl	80013b8 <HAL_RCCEx_PeriphCLKConfig>
 800241c:	4604      	mov	r4, r0
 800241e:	b100      	cbz	r0, 8002422 <SystemClock_Config+0x5a>
 8002420:	e7fe      	b.n	8002420 <SystemClock_Config+0x58>
		Error_Handler();
	}

	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 8002422:	f7fe ffc3 	bl	80013ac <HAL_RCC_GetHCLKFreq>
 8002426:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800242a:	fbb0 f0f3 	udiv	r0, r0, r3
 800242e:	f7fd ff6b 	bl	8000308 <HAL_SYSTICK_Config>

	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002432:	2004      	movs	r0, #4
 8002434:	f7fd ff7e 	bl	8000334 <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002438:	4622      	mov	r2, r4
 800243a:	4621      	mov	r1, r4
 800243c:	f04f 30ff 	mov.w	r0, #4294967295
 8002440:	f7fd ff22 	bl	8000288 <HAL_NVIC_SetPriority>
}
 8002444:	b015      	add	sp, #84	; 0x54
 8002446:	bd30      	pop	{r4, r5, pc}

08002448 <main>:

/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void) {
 8002448:	b570      	push	{r4, r5, r6, lr}
		uint8_t key2;
		uint8_t key3;
	};
	struct keyboardHID_t keyboardHID;
	keyboardHID.id = 1;
	keyboardHID.modifiers = 0;
 800244a:	2400      	movs	r4, #0

/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void) {
 800244c:	b08c      	sub	sp, #48	; 0x30
	struct mediaHID_t {
		uint8_t id;
		uint8_t keys;
	};
	struct mediaHID_t mediaHID;
	mediaHID.id = 2;
 800244e:	2502      	movs	r5, #2
		uint8_t key1;
		uint8_t key2;
		uint8_t key3;
	};
	struct keyboardHID_t keyboardHID;
	keyboardHID.id = 1;
 8002450:	2601      	movs	r6, #1
 8002452:	f88d 6018 	strb.w	r6, [sp, #24]
	keyboardHID.modifiers = 0;
 8002456:	f88d 4019 	strb.w	r4, [sp, #25]
	keyboardHID.key1 = 0;
 800245a:	f88d 401a 	strb.w	r4, [sp, #26]
	keyboardHID.key2 = 0;
 800245e:	f88d 401b 	strb.w	r4, [sp, #27]
	keyboardHID.key3 = 0;
 8002462:	f88d 401c 	strb.w	r4, [sp, #28]
	struct mediaHID_t {
		uint8_t id;
		uint8_t keys;
	};
	struct mediaHID_t mediaHID;
	mediaHID.id = 2;
 8002466:	f88d 5004 	strb.w	r5, [sp, #4]
	mediaHID.keys = 0;
 800246a:	f88d 4005 	strb.w	r4, [sp, #5]
	/* USER CODE END 1 */

	/* MCU Configuration----------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800246e:	f7fd fecb 	bl	8000208 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8002472:	f7ff ffa9 	bl	80023c8 <SystemClock_Config>
static void MX_GPIO_Init(void) {

	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8002476:	4b56      	ldr	r3, [pc, #344]	; (80025d0 <main+0x188>)
	;
	__HAL_RCC_GPIOA_CLK_ENABLE()
	;

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002478:	f44f 5100 	mov.w	r1, #8192	; 0x2000
static void MX_GPIO_Init(void) {

	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE()
 800247c:	699a      	ldr	r2, [r3, #24]
	;
	__HAL_RCC_GPIOA_CLK_ENABLE()
	;

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800247e:	4855      	ldr	r0, [pc, #340]	; (80025d4 <main+0x18c>)
static void MX_GPIO_Init(void) {

	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8002480:	f042 0210 	orr.w	r2, r2, #16
 8002484:	619a      	str	r2, [r3, #24]
 8002486:	699a      	ldr	r2, [r3, #24]
 8002488:	f002 0210 	and.w	r2, r2, #16
 800248c:	9202      	str	r2, [sp, #8]
 800248e:	9a02      	ldr	r2, [sp, #8]
	;
	__HAL_RCC_GPIOD_CLK_ENABLE()
 8002490:	699a      	ldr	r2, [r3, #24]
 8002492:	f042 0220 	orr.w	r2, r2, #32
 8002496:	619a      	str	r2, [r3, #24]
 8002498:	699a      	ldr	r2, [r3, #24]
 800249a:	f002 0220 	and.w	r2, r2, #32
 800249e:	9203      	str	r2, [sp, #12]
 80024a0:	9a03      	ldr	r2, [sp, #12]
	;
	__HAL_RCC_GPIOB_CLK_ENABLE()
 80024a2:	699a      	ldr	r2, [r3, #24]
 80024a4:	f042 0208 	orr.w	r2, r2, #8
 80024a8:	619a      	str	r2, [r3, #24]
 80024aa:	699a      	ldr	r2, [r3, #24]
 80024ac:	f002 0208 	and.w	r2, r2, #8
 80024b0:	9204      	str	r2, [sp, #16]
 80024b2:	9a04      	ldr	r2, [sp, #16]
	;
	__HAL_RCC_GPIOA_CLK_ENABLE()
 80024b4:	699a      	ldr	r2, [r3, #24]
 80024b6:	f042 0204 	orr.w	r2, r2, #4
 80024ba:	619a      	str	r2, [r3, #24]
 80024bc:	699b      	ldr	r3, [r3, #24]
	;

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80024be:	4622      	mov	r2, r4
	;
	__HAL_RCC_GPIOD_CLK_ENABLE()
	;
	__HAL_RCC_GPIOB_CLK_ENABLE()
	;
	__HAL_RCC_GPIOA_CLK_ENABLE()
 80024c0:	f003 0304 	and.w	r3, r3, #4
 80024c4:	9305      	str	r3, [sp, #20]
 80024c6:	9b05      	ldr	r3, [sp, #20]
	;

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80024c8:	f7fe f824 	bl	8000514 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 80024cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024d0:	a908      	add	r1, sp, #32
 80024d2:	4840      	ldr	r0, [pc, #256]	; (80025d4 <main+0x18c>)

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 80024d4:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024d6:	9609      	str	r6, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024d8:	950b      	str	r5, [sp, #44]	; 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024da:	f7fd ff3d 	bl	8000358 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB0 PB1 PB2 PB10
	 PB11 PB12 PB13 PB14*/
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_10
 80024de:	f647 4307 	movw	r3, #31751	; 0x7c07
			| GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024e2:	a908      	add	r1, sp, #32
 80024e4:	483c      	ldr	r0, [pc, #240]	; (80025d8 <main+0x190>)
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

	/*Configure GPIO pins : PB0 PB1 PB2 PB10
	 PB11 PB12 PB13 PB14*/
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_10
 80024e6:	9308      	str	r3, [sp, #32]
			| GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024e8:	9409      	str	r4, [sp, #36]	; 0x24
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80024ea:	950a      	str	r5, [sp, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024ec:	f7fd ff34 	bl	8000358 <HAL_GPIO_Init>
	/* Configure the system clock */
	SystemClock_Config();

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
	MX_USB_DEVICE_Init();
 80024f0:	f000 f8d4 	bl	800269c <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80024f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024f8:	4836      	ldr	r0, [pc, #216]	; (80025d4 <main+0x18c>)
 80024fa:	f7fe f80f 	bl	800051c <HAL_GPIO_TogglePin>

		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_SET) { /// volume down
 80024fe:	2101      	movs	r1, #1
 8002500:	4835      	ldr	r0, [pc, #212]	; (80025d8 <main+0x190>)
 8002502:	f7fe f801 	bl	8000508 <HAL_GPIO_ReadPin>
 8002506:	2801      	cmp	r0, #1
 8002508:	d101      	bne.n	800250e <main+0xc6>
			mediaHID.keys = USB_HID_VOL_DEC;
 800250a:	2380      	movs	r3, #128	; 0x80
 800250c:	e00f      	b.n	800252e <main+0xe6>
			USBD_HID_SendReport(&hUsbDeviceFS, &mediaHID,
					sizeof(struct mediaHID_t));

		} else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_SET) { ///volume up
 800250e:	2102      	movs	r1, #2
 8002510:	4831      	ldr	r0, [pc, #196]	; (80025d8 <main+0x190>)
 8002512:	f7fd fff9 	bl	8000508 <HAL_GPIO_ReadPin>
 8002516:	2801      	cmp	r0, #1
 8002518:	d101      	bne.n	800251e <main+0xd6>
			mediaHID.keys = USB_HID_VOL_UP;
 800251a:	2340      	movs	r3, #64	; 0x40
 800251c:	e007      	b.n	800252e <main+0xe6>
			USBD_HID_SendReport(&hUsbDeviceFS, &mediaHID,
					sizeof(struct mediaHID_t));

		} else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_SET) { ////volume mute
 800251e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002522:	482d      	ldr	r0, [pc, #180]	; (80025d8 <main+0x190>)
 8002524:	f7fd fff0 	bl	8000508 <HAL_GPIO_ReadPin>
 8002528:	2801      	cmp	r0, #1
 800252a:	d103      	bne.n	8002534 <main+0xec>
			mediaHID.keys = USB_HID_MUTE;
 800252c:	2320      	movs	r3, #32
 800252e:	f88d 3005 	strb.w	r3, [sp, #5]
 8002532:	e01c      	b.n	800256e <main+0x126>
			USBD_HID_SendReport(&hUsbDeviceFS, &mediaHID,
					sizeof(struct mediaHID_t));

		} else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10) == GPIO_PIN_SET) { ///play/pause
 8002534:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002538:	4827      	ldr	r0, [pc, #156]	; (80025d8 <main+0x190>)
 800253a:	f7fd ffe5 	bl	8000508 <HAL_GPIO_ReadPin>
 800253e:	2801      	cmp	r0, #1
 8002540:	d101      	bne.n	8002546 <main+0xfe>
			mediaHID.keys = USB_HID_PAUSE;
 8002542:	2310      	movs	r3, #16
 8002544:	e7f3      	b.n	800252e <main+0xe6>
			USBD_HID_SendReport(&hUsbDeviceFS, &mediaHID,
					sizeof(struct mediaHID_t));
		} else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11) == GPIO_PIN_SET) { // previous
 8002546:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800254a:	4823      	ldr	r0, [pc, #140]	; (80025d8 <main+0x190>)
 800254c:	f7fd ffdc 	bl	8000508 <HAL_GPIO_ReadPin>
 8002550:	2801      	cmp	r0, #1
 8002552:	d103      	bne.n	800255c <main+0x114>
			mediaHID.keys = USB_HID_SCAN_PREV;
 8002554:	2202      	movs	r2, #2
 8002556:	f88d 2005 	strb.w	r2, [sp, #5]
 800255a:	e009      	b.n	8002570 <main+0x128>
			USBD_HID_SendReport(&hUsbDeviceFS, &mediaHID,
					sizeof(struct mediaHID_t));
		} else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_SET) { // next
 800255c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002560:	481d      	ldr	r0, [pc, #116]	; (80025d8 <main+0x190>)
 8002562:	f7fd ffd1 	bl	8000508 <HAL_GPIO_ReadPin>
 8002566:	2801      	cmp	r0, #1
 8002568:	d104      	bne.n	8002574 <main+0x12c>
			mediaHID.keys = USB_HID_SCAN_NEXT;
 800256a:	f88d 0005 	strb.w	r0, [sp, #5]
			USBD_HID_SendReport(&hUsbDeviceFS, &mediaHID,
 800256e:	2202      	movs	r2, #2
 8002570:	a901      	add	r1, sp, #4
 8002572:	e00e      	b.n	8002592 <main+0x14a>
					sizeof(struct mediaHID_t));
		} else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == GPIO_PIN_SET) { // lock screen
 8002574:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002578:	4817      	ldr	r0, [pc, #92]	; (80025d8 <main+0x190>)
 800257a:	f7fd ffc5 	bl	8000508 <HAL_GPIO_ReadPin>
 800257e:	2801      	cmp	r0, #1
 8002580:	d10a      	bne.n	8002598 <main+0x150>
			keyboardHID.modifiers = USB_HID_MODIFIER_LEFT_GUI;
 8002582:	2308      	movs	r3, #8
 8002584:	f88d 3019 	strb.w	r3, [sp, #25]
			keyboardHID.key1 = USB_HID_KEY_L;
 8002588:	230f      	movs	r3, #15
 800258a:	f88d 301a 	strb.w	r3, [sp, #26]
			USBD_HID_SendReport(&hUsbDeviceFS, &keyboardHID,
 800258e:	2205      	movs	r2, #5
 8002590:	a906      	add	r1, sp, #24
 8002592:	4812      	ldr	r0, [pc, #72]	; (80025dc <main+0x194>)
 8002594:	f7ff fbf6 	bl	8001d84 <USBD_HID_SendReport>
					sizeof(struct keyboardHID_t));

		}
		keyboardHID.modifiers = 0;
 8002598:	2400      	movs	r4, #0
		keyboardHID.key1 = 0;
		keyboardHID.key2 = 0;
		keyboardHID.key3 = 0;
		USBD_HID_SendReport(&hUsbDeviceFS, &keyboardHID,
 800259a:	a906      	add	r1, sp, #24
 800259c:	2205      	movs	r2, #5
 800259e:	480f      	ldr	r0, [pc, #60]	; (80025dc <main+0x194>)
			keyboardHID.key1 = USB_HID_KEY_L;
			USBD_HID_SendReport(&hUsbDeviceFS, &keyboardHID,
					sizeof(struct keyboardHID_t));

		}
		keyboardHID.modifiers = 0;
 80025a0:	f88d 4019 	strb.w	r4, [sp, #25]
		keyboardHID.key1 = 0;
 80025a4:	f88d 401a 	strb.w	r4, [sp, #26]
		keyboardHID.key2 = 0;
 80025a8:	f88d 401b 	strb.w	r4, [sp, #27]
		keyboardHID.key3 = 0;
 80025ac:	f88d 401c 	strb.w	r4, [sp, #28]
		USBD_HID_SendReport(&hUsbDeviceFS, &keyboardHID,
 80025b0:	f7ff fbe8 	bl	8001d84 <USBD_HID_SendReport>
				sizeof(struct keyboardHID_t));
		HAL_Delay(30);
 80025b4:	201e      	movs	r0, #30
 80025b6:	f7fd fe47 	bl	8000248 <HAL_Delay>

		mediaHID.keys = 0;
		USBD_HID_SendReport(&hUsbDeviceFS, &mediaHID,
 80025ba:	2202      	movs	r2, #2
 80025bc:	a901      	add	r1, sp, #4
 80025be:	4807      	ldr	r0, [pc, #28]	; (80025dc <main+0x194>)
		keyboardHID.key3 = 0;
		USBD_HID_SendReport(&hUsbDeviceFS, &keyboardHID,
				sizeof(struct keyboardHID_t));
		HAL_Delay(30);

		mediaHID.keys = 0;
 80025c0:	f88d 4005 	strb.w	r4, [sp, #5]
		USBD_HID_SendReport(&hUsbDeviceFS, &mediaHID,
 80025c4:	f7ff fbde 	bl	8001d84 <USBD_HID_SendReport>
				sizeof(struct mediaHID_t));


		HAL_Delay(150);
 80025c8:	2096      	movs	r0, #150	; 0x96
 80025ca:	f7fd fe3d 	bl	8000248 <HAL_Delay>

	}
 80025ce:	e791      	b.n	80024f4 <main+0xac>
 80025d0:	40021000 	.word	0x40021000
 80025d4:	40011000 	.word	0x40011000
 80025d8:	40010c00 	.word	0x40010c00
 80025dc:	20000134 	.word	0x20000134

080025e0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
void Error_Handler(void) {
 80025e0:	e7fe      	b.n	80025e0 <Error_Handler>
	...

080025e4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80025e4:	4b20      	ldr	r3, [pc, #128]	; (8002668 <HAL_MspInit+0x84>)

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025e6:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80025e8:	699a      	ldr	r2, [r3, #24]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025ea:	2003      	movs	r0, #3
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80025ec:	f042 0201 	orr.w	r2, r2, #1
 80025f0:	619a      	str	r2, [r3, #24]
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	f003 0301 	and.w	r3, r3, #1
 80025f8:	9301      	str	r3, [sp, #4]
 80025fa:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025fc:	f7fd fe32 	bl	8000264 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002600:	2200      	movs	r2, #0
 8002602:	4611      	mov	r1, r2
 8002604:	f06f 000b 	mvn.w	r0, #11
 8002608:	f7fd fe3e 	bl	8000288 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800260c:	2200      	movs	r2, #0
 800260e:	4611      	mov	r1, r2
 8002610:	f06f 000a 	mvn.w	r0, #10
 8002614:	f7fd fe38 	bl	8000288 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002618:	2200      	movs	r2, #0
 800261a:	4611      	mov	r1, r2
 800261c:	f06f 0009 	mvn.w	r0, #9
 8002620:	f7fd fe32 	bl	8000288 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002624:	2200      	movs	r2, #0
 8002626:	4611      	mov	r1, r2
 8002628:	f06f 0004 	mvn.w	r0, #4
 800262c:	f7fd fe2c 	bl	8000288 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002630:	2200      	movs	r2, #0
 8002632:	4611      	mov	r1, r2
 8002634:	f06f 0003 	mvn.w	r0, #3
 8002638:	f7fd fe26 	bl	8000288 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800263c:	2200      	movs	r2, #0
 800263e:	4611      	mov	r1, r2
 8002640:	f06f 0001 	mvn.w	r0, #1
 8002644:	f7fd fe20 	bl	8000288 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002648:	2200      	movs	r2, #0
 800264a:	4611      	mov	r1, r2
 800264c:	f04f 30ff 	mov.w	r0, #4294967295
 8002650:	f7fd fe1a 	bl	8000288 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002654:	4a05      	ldr	r2, [pc, #20]	; (800266c <HAL_MspInit+0x88>)
 8002656:	6853      	ldr	r3, [r2, #4]
 8002658:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800265c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002660:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002662:	b003      	add	sp, #12
 8002664:	f85d fb04 	ldr.w	pc, [sp], #4
 8002668:	40021000 	.word	0x40021000
 800266c:	40010000 	.word	0x40010000

08002670 <NMI_Handler>:
 8002670:	4770      	bx	lr

08002672 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8002672:	e7fe      	b.n	8002672 <HardFault_Handler>

08002674 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8002674:	e7fe      	b.n	8002674 <MemManage_Handler>

08002676 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8002676:	e7fe      	b.n	8002676 <BusFault_Handler>

08002678 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8002678:	e7fe      	b.n	8002678 <UsageFault_Handler>

0800267a <SVC_Handler>:
 800267a:	4770      	bx	lr

0800267c <DebugMon_Handler>:
 800267c:	4770      	bx	lr

0800267e <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800267e:	4770      	bx	lr

08002680 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002680:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002682:	f7fd fdd3 	bl	800022c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002686:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  HAL_SYSTICK_IRQHandler();
 800268a:	f7fd be60 	b.w	800034e <HAL_SYSTICK_IRQHandler>
	...

08002690 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002690:	4801      	ldr	r0, [pc, #4]	; (8002698 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 8002692:	f7fe b864 	b.w	800075e <HAL_PCD_IRQHandler>
 8002696:	bf00      	nop
 8002698:	20000358 	.word	0x20000358

0800269c <MX_USB_DEVICE_Init>:
/* USB Device Core handle declaration */
USBD_HandleTypeDef hUsbDeviceFS;

/* init function */				        
void MX_USB_DEVICE_Init(void)
{
 800269c:	b510      	push	{r4, lr}
  /* Init Device Library,Add Supported Class and Start the library*/
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 800269e:	4c07      	ldr	r4, [pc, #28]	; (80026bc <MX_USB_DEVICE_Init+0x20>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	4907      	ldr	r1, [pc, #28]	; (80026c0 <MX_USB_DEVICE_Init+0x24>)
 80026a4:	4620      	mov	r0, r4
 80026a6:	f7ff fb7f 	bl	8001da8 <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID);
 80026aa:	4620      	mov	r0, r4
 80026ac:	4905      	ldr	r1, [pc, #20]	; (80026c4 <MX_USB_DEVICE_Init+0x28>)
 80026ae:	f7ff fb90 	bl	8001dd2 <USBD_RegisterClass>

  USBD_Start(&hUsbDeviceFS);
 80026b2:	4620      	mov	r0, r4

}
 80026b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  /* Init Device Library,Add Supported Class and Start the library*/
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID);

  USBD_Start(&hUsbDeviceFS);
 80026b8:	f7ff bb92 	b.w	8001de0 <USBD_Start>
 80026bc:	20000134 	.word	0x20000134
 80026c0:	200000c8 	.word	0x200000c8
 80026c4:	20000004 	.word	0x20000004

080026c8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80026c8:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 80026ca:	4b0d      	ldr	r3, [pc, #52]	; (8002700 <HAL_PCD_MspInit+0x38>)
 80026cc:	6802      	ldr	r2, [r0, #0]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d112      	bne.n	80026f8 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80026d2:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80026d6:	69da      	ldr	r2, [r3, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80026d8:	2014      	movs	r0, #20
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80026da:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80026de:	61da      	str	r2, [r3, #28]
 80026e0:	69db      	ldr	r3, [r3, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80026e2:	2200      	movs	r2, #0
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80026e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026e8:	9301      	str	r3, [sp, #4]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80026ea:	4611      	mov	r1, r2
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80026ec:	9b01      	ldr	r3, [sp, #4]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80026ee:	f7fd fdcb 	bl	8000288 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80026f2:	2014      	movs	r0, #20
 80026f4:	f7fd fdfc 	bl	80002f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80026f8:	b003      	add	sp, #12
 80026fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80026fe:	bf00      	nop
 8002700:	40005c00 	.word	0x40005c00

08002704 <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8002704:	f500 717b 	add.w	r1, r0, #1004	; 0x3ec
 8002708:	f8d0 041c 	ldr.w	r0, [r0, #1052]	; 0x41c
 800270c:	f7ff bb7f 	b.w	8001e0e <USBD_LL_SetupStage>

08002710 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8002710:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8002714:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002718:	f8d0 041c 	ldr.w	r0, [r0, #1052]	; 0x41c
 800271c:	f7ff bba4 	b.w	8001e68 <USBD_LL_DataOutStage>

08002720 <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8002720:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8002724:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002726:	f8d0 041c 	ldr.w	r0, [r0, #1052]	; 0x41c
 800272a:	f7ff bbce 	b.w	8001eca <USBD_LL_DataInStage>

0800272e <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800272e:	f8d0 041c 	ldr.w	r0, [r0, #1052]	; 0x41c
 8002732:	f7ff bc49 	b.w	8001fc8 <USBD_LL_SOF>

08002736 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 8002736:	b510      	push	{r4, lr}
 8002738:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;    
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);  
 800273a:	2101      	movs	r1, #1
 800273c:	f8d0 041c 	ldr.w	r0, [r0, #1052]	; 0x41c
 8002740:	f7ff fc30 	bl	8001fa4 <USBD_LL_SetSpeed>
  
  /*Reset Device*/
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8002744:	f8d4 041c 	ldr.w	r0, [r4, #1052]	; 0x41c
}
 8002748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);  
  
  /*Reset Device*/
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800274c:	f7ff bc0b 	b.w	8001f66 <USBD_LL_Reset>

08002750 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8002750:	b510      	push	{r4, lr}
 8002752:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8002754:	f8d0 041c 	ldr.w	r0, [r0, #1052]	; 0x41c
 8002758:	f7ff fc27 	bl	8001faa <USBD_LL_Suspend>
  /*Enter in STOP mode */
  /* USER CODE BEGIN 2 */  
  if (hpcd->Init.low_power_enable)
 800275c:	69a3      	ldr	r3, [r4, #24]
 800275e:	b123      	cbz	r3, 800276a <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8002760:	4a02      	ldr	r2, [pc, #8]	; (800276c <HAL_PCD_SuspendCallback+0x1c>)
 8002762:	6913      	ldr	r3, [r2, #16]
 8002764:	f043 0306 	orr.w	r3, r3, #6
 8002768:	6113      	str	r3, [r2, #16]
 800276a:	bd10      	pop	{r4, pc}
 800276c:	e000ed00 	.word	0xe000ed00

08002770 <HAL_PCD_ResumeCallback>:
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8002770:	f8d0 041c 	ldr.w	r0, [r0, #1052]	; 0x41c
 8002774:	f7ff bc22 	b.w	8001fbc <USBD_LL_Resume>

08002778 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Init (USBD_HandleTypeDef *pdev)
{ 
 8002778:	b510      	push	{r4, lr}
 800277a:	4604      	mov	r4, r0
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_8;
 800277c:	4916      	ldr	r1, [pc, #88]	; (80027d8 <USBD_LL_Init+0x60>)
  */
USBD_StatusTypeDef  USBD_LL_Init (USBD_HandleTypeDef *pdev)
{ 
  /* Init USB_IP */
  /* Link The driver to the stack */
  hpcd_USB_FS.pData = pdev;
 800277e:	4817      	ldr	r0, [pc, #92]	; (80027dc <USBD_LL_Init+0x64>)
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_8;
 8002780:	2302      	movs	r3, #2
 8002782:	2208      	movs	r2, #8
 8002784:	f04f 0e03 	mov.w	lr, #3
  */
USBD_StatusTypeDef  USBD_LL_Init (USBD_HandleTypeDef *pdev)
{ 
  /* Init USB_IP */
  /* Link The driver to the stack */
  hpcd_USB_FS.pData = pdev;
 8002788:	f8c0 441c 	str.w	r4, [r0, #1052]	; 0x41c
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_8;
 800278c:	e880 400e 	stmia.w	r0, {r1, r2, r3, lr}
USBD_StatusTypeDef  USBD_LL_Init (USBD_HandleTypeDef *pdev)
{ 
  /* Init USB_IP */
  /* Link The driver to the stack */
  hpcd_USB_FS.pData = pdev;
  pdev->pData = &hpcd_USB_FS;
 8002790:	f8c4 0220 	str.w	r0, [r4, #544]	; 0x220

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_8;
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8002794:	2300      	movs	r3, #0
 8002796:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8002798:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800279a:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800279c:	f7fd fec2 	bl	8000524 <HAL_PCD_Init>
 80027a0:	b108      	cbz	r0, 80027a6 <USBD_LL_Init+0x2e>
  {
    Error_Handler();
 80027a2:	f7ff ff1d 	bl	80025e0 <Error_Handler>
  }

  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80027a6:	2200      	movs	r2, #0
 80027a8:	4611      	mov	r1, r2
 80027aa:	2318      	movs	r3, #24
 80027ac:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 80027b0:	f7fe fa89 	bl	8000cc6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80027b4:	2358      	movs	r3, #88	; 0x58
 80027b6:	2200      	movs	r2, #0
 80027b8:	2180      	movs	r1, #128	; 0x80
 80027ba:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 80027be:	f7fe fa82 	bl	8000cc6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);  
 80027c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027c6:	2200      	movs	r2, #0
 80027c8:	2181      	movs	r1, #129	; 0x81
 80027ca:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 80027ce:	f7fe fa7a 	bl	8000cc6 <HAL_PCDEx_PMAConfig>
  return USBD_OK;
}
 80027d2:	2000      	movs	r0, #0
 80027d4:	bd10      	pop	{r4, pc}
 80027d6:	bf00      	nop
 80027d8:	40005c00 	.word	0x40005c00
 80027dc:	20000358 	.word	0x20000358

080027e0 <USBD_LL_Start>:
  * @brief  Starts the Low Level portion of the Device driver. 
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80027e0:	b508      	push	{r3, lr}
  HAL_PCD_Start((PCD_HandleTypeDef*)pdev->pData);
 80027e2:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80027e6:	f7fd ff07 	bl	80005f8 <HAL_PCD_Start>
  return USBD_OK;
}
 80027ea:	2000      	movs	r0, #0
 80027ec:	bd08      	pop	{r3, pc}

080027ee <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef  USBD_LL_OpenEP  (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  ep_type,
                                      uint16_t ep_mps)
{
 80027ee:	b510      	push	{r4, lr}
 80027f0:	461c      	mov	r4, r3
  HAL_PCD_EP_Open((PCD_HandleTypeDef*) pdev->pData,
 80027f2:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80027f6:	4613      	mov	r3, r2
 80027f8:	4622      	mov	r2, r4
 80027fa:	f7fd ff28 	bl	800064e <HAL_PCD_EP_Open>
                  ep_addr,
                  ep_mps,
                  ep_type);
  
  return USBD_OK; 
}
 80027fe:	2000      	movs	r0, #0
 8002800:	bd10      	pop	{r4, pc}

08002802 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_CloseEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8002802:	b508      	push	{r3, lr}
  HAL_PCD_EP_Close((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8002804:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002808:	f7fd ff44 	bl	8000694 <HAL_PCD_EP_Close>
  return USBD_OK;
}
 800280c:	2000      	movs	r0, #0
 800280e:	bd08      	pop	{r3, pc}

08002810 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_StallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8002810:	b508      	push	{r3, lr}
  HAL_PCD_EP_SetStall((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8002812:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002816:	f7fe fa0a 	bl	8000c2e <HAL_PCD_EP_SetStall>
  return USBD_OK;
}
 800281a:	2000      	movs	r0, #0
 800281c:	bd08      	pop	{r3, pc}

0800281e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_ClearStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 800281e:	b508      	push	{r3, lr}
  HAL_PCD_EP_ClrStall((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8002820:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002824:	f7fe fa2c 	bl	8000c80 <HAL_PCD_EP_ClrStall>
  return USBD_OK; 
}
 8002828:	2000      	movs	r0, #0
 800282a:	bd08      	pop	{r3, pc}

0800282c <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 800282c:	060a      	lsls	r2, r1, #24
  * @param  ep_addr: Endpoint Number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800282e:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
  
  if((ep_addr & 0x80) == 0x80)
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8002832:	bf45      	ittet	mi
 8002834:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
 8002838:	eb03 1341 	addmi.w	r3, r3, r1, lsl #5
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800283c:	eb03 1341 	addpl.w	r3, r3, r1, lsl #5
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8002840:	f893 002a 	ldrbmi.w	r0, [r3, #42]	; 0x2a
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8002844:	bf58      	it	pl
 8002846:	f893 020a 	ldrbpl.w	r0, [r3, #522]	; 0x20a
  }
}
 800284a:	4770      	bx	lr

0800284c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_SetUSBAddress (USBD_HandleTypeDef *pdev, uint8_t dev_addr)   
{
 800284c:	b508      	push	{r3, lr}
  HAL_PCD_SetAddress((PCD_HandleTypeDef*) pdev->pData, dev_addr);
 800284e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002852:	f7fd fee8 	bl	8000626 <HAL_PCD_SetAddress>
  return USBD_OK; 
}
 8002856:	2000      	movs	r0, #0
 8002858:	bd08      	pop	{r3, pc}

0800285a <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef  USBD_LL_Transmit (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  *pbuf,
                                      uint16_t  size)
{
 800285a:	b508      	push	{r3, lr}
  HAL_PCD_EP_Transmit((PCD_HandleTypeDef*) pdev->pData, ep_addr, pbuf, size);
 800285c:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002860:	f7fd ff5d 	bl	800071e <HAL_PCD_EP_Transmit>
  return USBD_OK;
}
 8002864:	2000      	movs	r0, #0
 8002866:	bd08      	pop	{r3, pc}

08002868 <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef  USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                           uint8_t  ep_addr,                                      
                                           uint8_t  *pbuf,
                                           uint16_t  size)
{
 8002868:	b508      	push	{r3, lr}
  HAL_PCD_EP_Receive((PCD_HandleTypeDef*) pdev->pData, ep_addr, pbuf, size);
 800286a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800286e:	f7fd ff32 	bl	80006d6 <HAL_PCD_EP_Receive>
  return USBD_OK;
}
 8002872:	2000      	movs	r0, #0
 8002874:	bd08      	pop	{r3, pc}
	...

08002878 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 8002878:	4800      	ldr	r0, [pc, #0]	; (800287c <USBD_static_malloc+0x4>)
 800287a:	4770      	bx	lr
 800287c:	20000120 	.word	0x20000120

08002880 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  *p pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8002880:	4770      	bx	lr

08002882 <HAL_PCDEx_SetConnectionState>:
* @param hpcd: PCD handle
* @param state: connection state (0 : disconnected / 1: connected) 
* @retval None
*/
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
{
 8002882:	4770      	bx	lr

08002884 <USBD_FS_DeviceDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_DeviceDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 8002884:	2312      	movs	r3, #18
 8002886:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8002888:	4800      	ldr	r0, [pc, #0]	; (800288c <USBD_FS_DeviceDescriptor+0x8>)
 800288a:	4770      	bx	lr
 800288c:	200000e8 	.word	0x200000e8

08002890 <USBD_FS_LangIDStrDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_LangIDStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
  *length =  sizeof(USBD_LangIDDesc);  
 8002890:	2304      	movs	r3, #4
 8002892:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8002894:	4800      	ldr	r0, [pc, #0]	; (8002898 <USBD_FS_LangIDStrDescriptor+0x8>)
 8002896:	4770      	bx	lr
 8002898:	200000e4 	.word	0x200000e4

0800289c <USBD_FS_ManufacturerStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ManufacturerStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 800289c:	b510      	push	{r4, lr}
  USBD_GetString (USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800289e:	4c04      	ldr	r4, [pc, #16]	; (80028b0 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 80028a0:	460a      	mov	r2, r1
 80028a2:	4804      	ldr	r0, [pc, #16]	; (80028b4 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 80028a4:	4621      	mov	r1, r4
 80028a6:	f7ff fd40 	bl	800232a <USBD_GetString>
  return USBD_StrDesc;
}
 80028aa:	4620      	mov	r0, r4
 80028ac:	bd10      	pop	{r4, pc}
 80028ae:	bf00      	nop
 80028b0:	20000778 	.word	0x20000778
 80028b4:	080029ae 	.word	0x080029ae

080028b8 <USBD_FS_ProductStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ProductStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 80028b8:	b510      	push	{r4, lr}
  if(speed == 0)
  {   
    USBD_GetString (USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80028ba:	4c04      	ldr	r4, [pc, #16]	; (80028cc <USBD_FS_ProductStrDescriptor+0x14>)
 80028bc:	460a      	mov	r2, r1
 80028be:	4804      	ldr	r0, [pc, #16]	; (80028d0 <USBD_FS_ProductStrDescriptor+0x18>)
 80028c0:	4621      	mov	r1, r4
 80028c2:	f7ff fd32 	bl	800232a <USBD_GetString>
  else
  {
    USBD_GetString (USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);    
  }
  return USBD_StrDesc;
}
 80028c6:	4620      	mov	r0, r4
 80028c8:	bd10      	pop	{r4, pc}
 80028ca:	bf00      	nop
 80028cc:	20000778 	.word	0x20000778
 80028d0:	080029c1 	.word	0x080029c1

080028d4 <USBD_FS_SerialStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_SerialStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 80028d4:	b510      	push	{r4, lr}
  if(speed  == USBD_SPEED_HIGH)
  {    
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 80028d6:	4c04      	ldr	r4, [pc, #16]	; (80028e8 <USBD_FS_SerialStrDescriptor+0x14>)
 80028d8:	460a      	mov	r2, r1
 80028da:	4804      	ldr	r0, [pc, #16]	; (80028ec <USBD_FS_SerialStrDescriptor+0x18>)
 80028dc:	4621      	mov	r1, r4
 80028de:	f7ff fd24 	bl	800232a <USBD_GetString>
  else
  {
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);    
  }
  return USBD_StrDesc;
}
 80028e2:	4620      	mov	r0, r4
 80028e4:	bd10      	pop	{r4, pc}
 80028e6:	bf00      	nop
 80028e8:	20000778 	.word	0x20000778
 80028ec:	080029d7 	.word	0x080029d7

080028f0 <USBD_FS_ConfigStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ConfigStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 80028f0:	b510      	push	{r4, lr}
  if(speed  == USBD_SPEED_HIGH)
  {  
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80028f2:	4c04      	ldr	r4, [pc, #16]	; (8002904 <USBD_FS_ConfigStrDescriptor+0x14>)
 80028f4:	460a      	mov	r2, r1
 80028f6:	4804      	ldr	r0, [pc, #16]	; (8002908 <USBD_FS_ConfigStrDescriptor+0x18>)
 80028f8:	4621      	mov	r1, r4
 80028fa:	f7ff fd16 	bl	800232a <USBD_GetString>
  else
  {
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length); 
  }
  return USBD_StrDesc;  
}
 80028fe:	4620      	mov	r0, r4
 8002900:	bd10      	pop	{r4, pc}
 8002902:	bf00      	nop
 8002904:	20000778 	.word	0x20000778
 8002908:	080029e4 	.word	0x080029e4

0800290c <USBD_FS_InterfaceStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_InterfaceStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 800290c:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800290e:	4c04      	ldr	r4, [pc, #16]	; (8002920 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8002910:	460a      	mov	r2, r1
 8002912:	4804      	ldr	r0, [pc, #16]	; (8002924 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8002914:	4621      	mov	r1, r4
 8002916:	f7ff fd08 	bl	800232a <USBD_GetString>
  else
  {
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;  
}
 800291a:	4620      	mov	r0, r4
 800291c:	bd10      	pop	{r4, pc}
 800291e:	bf00      	nop
 8002920:	20000778 	.word	0x20000778
 8002924:	080029ef 	.word	0x080029ef

08002928 <__libc_init_array>:
 8002928:	4b0e      	ldr	r3, [pc, #56]	; (8002964 <__libc_init_array+0x3c>)
 800292a:	b570      	push	{r4, r5, r6, lr}
 800292c:	461e      	mov	r6, r3
 800292e:	4c0e      	ldr	r4, [pc, #56]	; (8002968 <__libc_init_array+0x40>)
 8002930:	2500      	movs	r5, #0
 8002932:	1ae4      	subs	r4, r4, r3
 8002934:	10a4      	asrs	r4, r4, #2
 8002936:	42a5      	cmp	r5, r4
 8002938:	d004      	beq.n	8002944 <__libc_init_array+0x1c>
 800293a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800293e:	4798      	blx	r3
 8002940:	3501      	adds	r5, #1
 8002942:	e7f8      	b.n	8002936 <__libc_init_array+0xe>
 8002944:	f000 f816 	bl	8002974 <_init>
 8002948:	4b08      	ldr	r3, [pc, #32]	; (800296c <__libc_init_array+0x44>)
 800294a:	4c09      	ldr	r4, [pc, #36]	; (8002970 <__libc_init_array+0x48>)
 800294c:	461e      	mov	r6, r3
 800294e:	1ae4      	subs	r4, r4, r3
 8002950:	10a4      	asrs	r4, r4, #2
 8002952:	2500      	movs	r5, #0
 8002954:	42a5      	cmp	r5, r4
 8002956:	d004      	beq.n	8002962 <__libc_init_array+0x3a>
 8002958:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800295c:	4798      	blx	r3
 800295e:	3501      	adds	r5, #1
 8002960:	e7f8      	b.n	8002954 <__libc_init_array+0x2c>
 8002962:	bd70      	pop	{r4, r5, r6, pc}
 8002964:	08002a00 	.word	0x08002a00
 8002968:	08002a00 	.word	0x08002a00
 800296c:	08002a00 	.word	0x08002a00
 8002970:	08002a04 	.word	0x08002a04

08002974 <_init>:
 8002974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002976:	bf00      	nop
 8002978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800297a:	bc08      	pop	{r3}
 800297c:	469e      	mov	lr, r3
 800297e:	4770      	bx	lr

08002980 <_fini>:
 8002980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002982:	bf00      	nop
 8002984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002986:	bc08      	pop	{r3}
 8002988:	469e      	mov	lr, r3
 800298a:	4770      	bx	lr
